{"version":3,"sources":["webpack:///src/app/common/allocations/allocations.component.ts","webpack:///src/app/common/allocations/allocations.component.html"],"names":["AllocationsComponent","http","ngbModal","changeDetector","route","router","session","confirmation","toastr","translate","apiUrl","allocation","post","id","Math","floor","random","jsonrpc","method","headers","subscribe","response","Object","assign","result","success","instant","updateEvent","next","patch","op","path","value","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAeaA,oBAAoB;AAAA;;AAAA;;AAG7B,sCACIC,IADJ,EAEIC,QAFJ,EAGIC,cAHJ,EAIIC,KAJJ,EAKIC,MALJ,EAMIC,OANJ,EAOIC,YAPJ,EAQYC,MARZ,EASWC,SATX,EASsC;AAAA;;AAAA;;AAElC,oCAAMR,IAAN,EAAYC,QAAZ,EAAsBC,cAAtB,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,OAArD,EAA8DC,YAA9D;AAHQ,gBAAAC,MAAA,GAAAA,MAAA;AACD,gBAAAC,SAAA,GAAAA,SAAA;AAXD,gBAAAC,MAAA,GAAS,cAAT;AAW4B;AAGrC;;AAf4B;AAAA;AAAA,iBAiBtB,iBAAQC,UAAR,EAA8B;AAAA;;AACjC,iBAAKV,IAAL,CACKW,IADL,wBAEwBD,UAAU,CAACE,EAFnC,GAGQ;AACIA,gBAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADR;AAEIC,qBAAO,EAAE,KAFb;AAGIC,oBAAM,EAAE;AAHZ,aAHR,EAQQ;AACIC,qBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,gCAAgB;AAAlB,eAAhB;AADb,aARR,EAYKC,SAZL,CAYe,UAAAC,QAAQ,EAAI;AACnBC,oBAAM,CAACC,MAAP,CAAcZ,UAAd,EAA0BU,QAAQ,CAACG,MAAnC;;AACA,oBAAI,CAAChB,MAAL,CAAYiB,OAAZ,CAAoB,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,iCAAvB,CAApB;;AACA,oBAAI,CAACC,WAAL,CAAiBC,IAAjB;AACH,aAhBL;AAiBH;AAnC4B;AAAA;AAAA,iBAqCtB,gBAAOjB,UAAP,EAA6B;AAAA;;AAChC,iBAAKV,IAAL,CACK4B,KADL,wBAEwBlB,UAAU,CAACE,EAFnC,GAGQ,CACI;AACIiB,gBAAE,EAAE,SADR;AAEIC,kBAAI,EAAE,SAFV;AAGIC,mBAAK,EAAE;AAHX,aADJ,CAHR,EAUQ;AACIb,qBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,gCAAgB;AAAlB,eAAhB;AADb,aAVR,EAcKC,SAdL,CAce,UAAAC,QAAQ,EAAI;AACnBC,oBAAM,CAACC,MAAP,CAAcZ,UAAd,EAA0BU,QAA1B;;AACA,oBAAI,CAACb,MAAL,CAAYiB,OAAZ,CAAoB,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,iCAAvB,CAApB;;AACA,oBAAI,CAACC,WAAL,CAAiBC,IAAjB;AACH,aAlBL;AAmBH;AAzD4B;;AAAA;AAAA,QAAS,6DAAT,C;;;;gBAfxB;;gBAGA;;gBAFA;;gBACA;;gBAAgB;;gBAMhB;;gBADA;;gBAEA;;gBALA;;;;AAWI5B,0BAAoB,6DAJhC,gEAAU;AACPiC,gBAAQ,EAAE,aADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIgC,GAApBlC,oBAAoB,CAApB;;;;;;;;;;;;;;;;ACfb;AAAe;;;AAAA","file":"default~admin-admin-module~discover-discover-module-es5.js","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Allocation, RPCResult } from '../api-interfaces'\nimport { ListComponent } from '../list.component'\nimport { ConfirmationService } from '../services/confirmation.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\n\n@Component({\n    selector: 'allocations',\n    templateUrl: 'allocations.component.html',\n})\nexport class AllocationsComponent extends ListComponent<Allocation> {\n    protected apiUrl = '/allocations'\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private toastr: ToastrService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public approve(allocation: Allocation): void {\n        this.http\n            .post<RPCResult<Allocation>>(\n                `/allocations/${allocation.id}`,\n                {\n                    id: Math.floor(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'approve',\n                },\n                {\n                    headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                }\n            )\n            .subscribe(response => {\n                Object.assign(allocation, response.result)\n                this.toastr.success(this.translate.instant('allocations.allocation-approved'))\n                this.updateEvent.next()\n            })\n    }\n\n    public cancel(allocation: Allocation): void {\n        this.http\n            .patch<Allocation>(\n                `/allocations/${allocation.id}`,\n                [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ],\n                {\n                    headers: new HttpHeaders({ 'Content-Type': 'application/json-patch+json' }),\n                }\n            )\n            .subscribe(response => {\n                Object.assign(allocation, response)\n                this.toastr.success(this.translate.instant('allocations.allocation-canceled'))\n                this.updateEvent.next()\n            })\n    }\n}\n","export default \"<section class=\\\"container-fluid\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header d-flex justify-content-between align-items-center\\\">\\n            <span>{{ 'common.allocations' | translate }}</span>\\n            <div>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"requestExport()\\\">\\n                    <fa-icon [icon]=\\\"faDownload\\\" class=\\\"mr-1\\\"></fa-icon> {{ 'common.export' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"row no-gutters align-items-center mb-3\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-17 d-flex justify-content-between align-items-center\\\">\\n                    <span class=\\\"ml-lg-3\\\"\\n                        >{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span\\n                    >\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <ng-select\\n                            class=\\\"mr-2\\\"\\n                            [(ngModel)]=\\\"limit\\\"\\n                            dropdownPosition=\\\"auto\\\"\\n                            (change)=\\\"select(1)\\\"\\n                            [items]=\\\"limitOpts\\\"\\n                            [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                            [clearable]=\\\"false\\\"\\n                            [searchable]=\\\"false\\\"\\n                            required\\n                        >\\n                            <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                        </ng-select>\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"5\\\"\\n                            [ellipses]=\\\"false\\\"\\n                            [rotate]=\\\"true\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"table-responsive position-relative\\\">\\n                <table class=\\\"table table-hover table-bordered table-data\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">\\n                                Product\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['productId']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['productId'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['productId']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'allocations.investor' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['user', 'id']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['user', 'id'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['user', 'id']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                                {{ 'common.amount' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['baseTransaction', 'amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['baseTransaction', 'amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['baseTransaction', 'amount']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                                {{ 'common.units' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['counterTransaction', 'amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['counterTransaction', 'amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['counterTransaction', 'amount']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.created-at' | translate | titlecase }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">{{ 'common.actions' | translate }}</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <tr *ngFor=\\\"let allocation of items\\\">\\n                                <th scope=\\\"row\\\" [width]=\\\"'1%'\\\">\\n                                    <uuid [value]=\\\"allocation.id\\\"></uuid>\\n                                </th>\\n                                <td>{{ allocation.product?.currency?.code }}</td>\\n                                <td>\\n                                    <user-display [user]=\\\"allocation.user\\\"> </user-display>\\n                                </td>\\n                                <td class=\\\"text-right\\\" [ngClass]=\\\"allocation.status === 'cancelled' ? 'text-muted' : 'text-primary'\\\">\\n                                    {{ allocation.baseTransaction?.amount | amount: allocation.baseTransaction?.currency?.decimalPlaces }}\\n                                    {{ allocation.baseTransaction?.currency?.code }}\\n                                </td>\\n                                <td class=\\\"text-right\\\" [ngClass]=\\\"allocation.status === 'completed' ? 'text-green' : 'text-muted'\\\">\\n                                    {{ allocation.counterTransaction?.amount | amount: allocation.counterTransaction?.currency?.decimalPlaces }}\\n                                    {{ allocation.counterTransaction?.currency?.code }}\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize badge badge-lg\\\"\\n                                        [ngClass]=\\\"{\\n                                            'badge-success': allocation.status === 'completed',\\n                                            'badge-info': allocation.status === 'pending',\\n                                            'badge-danger': allocation.status === 'cancelled'\\n                                        }\\\"\\n                                        >{{ allocation.status }}</span\\n                                    >\\n                                </td>\\n                                <td>{{ allocation.createdAt | date: 'medium' }}</td>\\n                                <td class=\\\"action\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">\\n                                    <div class=\\\"btn-group w-100\\\">\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-primary-air btn-sm btn-block px-2\\\"\\n                                            (click)=\\\"$event.preventDefault()\\\"\\n                                            *ngIf=\\\"allocation.status !== 'pending'\\\"\\n                                            disabled\\n                                        >\\n                                            {{ 'common.view' | translate }}\\n                                        </button>\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-success btn-sm btn-block px-2\\\"\\n                                            (click)=\\\"approve(allocation)\\\"\\n                                            *ngIf=\\\"allocation.status === 'pending'\\\"\\n                                        >\\n                                            Approve\\n                                        </button>\\n                                        <div\\n                                            class=\\\"btn-group\\\"\\n                                            ngbDropdown\\n                                            container=\\\"body\\\"\\n                                            placement=\\\"bottom-right\\\"\\n                                            *ngIf=\\\"allocation.status === 'pending'\\\"\\n                                        >\\n                                            <button\\n                                                class=\\\"btn btn-sm dropdown-toggle-split\\\"\\n                                                [ngClass]=\\\"allocation.status === 'pending' ? 'btn-success' : 'btn-primary-air'\\\"\\n                                                ngbDropdownToggle\\n                                            >\\n                                                <fa-icon [icon]=\\\"faCaretDown\\\"></fa-icon>\\n                                            </button>\\n                                            <div class=\\\"dropdown-menu dropdown-menu-sm\\\" ngbDropdownMenu>\\n                                                <a href ngbDropdownItem (click)=\\\"cancel(allocation); $event.preventDefault()\\\">{{\\n                                                    'common.cancel' | translate\\n                                                }}</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"items.length === 0\\\">\\n                                <td colspan=\\\"8\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n                <ng-container *ngIf=\\\"isFetching | async\\\">\\n                    <circle-spinner></circle-spinner>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\";"]}