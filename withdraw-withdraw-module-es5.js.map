{"version":3,"sources":["webpack:///src/app/common/models/accounting/fee.model.ts","webpack:///src/app/withdraw/withdraw-routing.module.ts","webpack:///src/app/withdraw/withdraw.component.ts","webpack:///src/app/withdraw/withdraw-form/withdraw-form.component.ts","webpack:///src/app/withdraw/withdraw.module.ts","webpack:///src/app/withdraw/withdraw-form/withdraw-form.component.html","webpack:///src/app/common/services/accounting/fee.service.ts","webpack:///src/app/withdraw/withdraw.component.html"],"names":["feeTypeMap","deposit","withdrawal","transfer","conversion","investment","trade","redeem","service","gst","payment","feeMethodMap","internal","card","crypto","local","swift","Fee","data","Object","assign","currency","user","beneficiary","code","id","includes","type","getFeeType","transactionType","feeMap","invoice","routes","path","component","redirectTo","canActivate","WithdrawRoutingModule","imports","forChild","exports","WithdrawComponent","route","session","subscriptions","snapshot","queryParamMap","has","resetTransaction","get","subscribe","params","unsubscribe","method","transaction","counterWallet","selector","template","WithdrawFormComponent","ngbModal","http","feeService","walletsService","walletsQuery","router","currenciesQuery","translate","files","isUploadCollapsed","saveAsTemplate","inclusiveFee","faQuestionCircle","appName","purposeItems","fee","fetchEvent","add","userStream","pipe","_","baseWallet","fetch","determineFee","minValue","minAmount","convert","changes","reset","beneficiaryDetailsForm","submit","isValid","disabled","withdrawForm","invalid","accessErrors","length","modal","open","windowClass","backdrop","componentInstance","onConfirm","createTransaction","err","isSubmitted","close","transactionView","transactionViewModal","next","wallet","body","amount","undefined","settledAmount","post","map","file","headers","encodeURIComponent","name","size","onSelect","navigate","queryParams","balances$","balances","found","find","balance","availableBalance","maxFee","max","relativeFeeAmount","times","relativeFee","fixedFee","plus","isGreaterThan","minus","toFixed","decimalPlaces","isLessThan","parseFloat","toString","resetForm","purpose","comment","getEntity","WithdrawModule","declarations","FeeService","Math","round","random","jsonrpc","response","result","currentTransaction","fixed","relative","min","minFee","providedIn"],"mappings":"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","file":"withdraw-withdraw-module-es5.js","sourcesContent":["import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { PaymentGuard } from '../common/payment/payment.guard'\nimport { WithdrawComponent } from './withdraw.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: WithdrawComponent,\n        data: {\n            redirectTo: '/withdraw',\n        },\n        canActivate: [LoggedInAuthGuard, PaymentGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class WithdrawRoutingModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs'\nimport { IBeneficiary, Transaction, TransactionMethod, Wallet } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'withdraw',\n    templateUrl: 'withdraw.component.html',\n})\nexport class WithdrawComponent implements OnInit, OnDestroy {\n    public transaction: Partial<Transaction>\n    private subscriptions = new Subscription()\n\n    constructor(private route: ActivatedRoute, public session: SessionService) {}\n\n    public async ngOnInit(): Promise<void> {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') || 'swift') as TransactionMethod)\n        })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    private resetTransaction(method: TransactionMethod): void {\n        this.transaction = {\n            type: 'withdrawal',\n            method,\n            counterWallet: {\n                user: null,\n            } as Wallet,\n            beneficiary: {\n                method: method as any,\n            } as IBeneficiary,\n        }\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { pick } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, throwError } from 'rxjs'\nimport { mergeMap, map, switchMap, tap, catchError } from 'rxjs/operators'\nimport { ICurrency, IFee, IUser, Transaction, TransactionMethod, Wallet } from 'src/app/common/api-interfaces'\nimport { BeneficiaryDetailsFormComponent } from 'src/app/common/beneficiary-form/beneficiary-details-form/beneficiary-details-form.component'\nimport { Beneficiary } from 'src/app/common/models/accounting/beneficiary.model'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { openNoAccessModal } from 'src/app/common/no-access-modal/no-access-modal.component'\nimport { BeneficiaryBookComponent } from 'src/app/common/payment/beneficiary-book/beneficiary-book.component'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from 'src/app/common/services/accounting/fee.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { TransactionViewComponent } from 'src/app/common/transaction/transaction-view/transaction-view.component'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { WalletsQuery } from 'src/app/store/wallets/wallets.query'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'withdraw-form',\n    templateUrl: 'withdraw-form.component.html',\n})\nexport class WithdrawFormComponent implements OnInit, OnDestroy, OnChanges {\n    @Input()\n    public transaction: Partial<Transaction>\n    public files: File[] = []\n    public minAmount: string | number | undefined\n    public isUploadCollapsed = true\n    public saveAsTemplate = true\n    public inclusiveFee = true\n\n    public faQuestionCircle = faQuestionCircle\n    public appName = environment.appName\n\n    public purposeItems = [\n        'Employment Income',\n        'Business Expenses',\n        'Tax Payment',\n        'License/Subscription Fee',\n        'Bill/Utilities Payment',\n        'Insurance Payment',\n        'Commission/Bonus Payment',\n        'Family Maintenance (Education, Medical, Travel)',\n        'Investment/Securities',\n        'Transport',\n        'Property Payment',\n    ]\n\n    @ViewChild('withdrawForm')\n    public withdrawForm: NgForm\n\n    @ViewChild('beneficiaryDetailsForm')\n    public beneficiaryDetailsForm: BeneficiaryDetailsFormComponent\n\n    private fee: IFee | null = null\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n\n    private beneficiary: Beneficiary | undefined\n    constructor(\n        public session: SessionService,\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private feeService: FeeService,\n        private walletsService: WalletsService,\n        private walletsQuery: WalletsQuery,\n        private router: Router,\n        private currenciesQuery: CurrenciesQuery,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest([this.fetchEvent, this.session.userStream])\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.baseWallet = {\n                            user: pick(user, ['id', 'accountNumber', 'name']),\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        this.feeService.fetch({\n                            type: 'withdrawal',\n                            method: this.transaction.method as TransactionMethod,\n                            user: { id: user.id } as IUser,\n                            currency: { code: this.transaction.currency?.code } as ICurrency,\n                        })\n                    )\n                )\n                .subscribe(fee => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                })\n        )\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.reset()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.beneficiaryDetailsForm) {\n            this.beneficiaryDetailsForm.submit()\n            if (!(this.beneficiaryDetailsForm.isValid() || this.beneficiaryDetailsForm.disabled)) {\n                return\n            }\n        }\n        if (this.withdrawForm && this.withdrawForm.invalid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction()\n                .pipe(\n                    catchError(err => {\n                        component.isSubmitted = false\n                        component.reset()\n                        return throwError(err)\n                    })\n                )\n                .subscribe(transaction => {\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                })\n        })\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        if (this.saveAsTemplate && this.transaction.beneficiary && !this.transaction.beneficiary.id) {\n            const wallet = this.transaction.baseWallet\n            if (wallet) {\n                this.transaction.beneficiary.user = wallet.user\n            }\n        }\n        const body = {\n            ...this.transaction,\n        }\n        if (!this.inclusiveFee) {\n            body.amount = undefined\n            body.settledAmount = this.transaction.amount\n        }\n        return this.http.post<Transaction>('/transactions', body).pipe(\n            mergeMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public openBeneficiaryBook(): void {\n        const modal = this.ngbModal.open(BeneficiaryBookComponent, {\n            windowClass: 'modal-primary',\n            size: 'lg',\n        })\n        ;(modal.componentInstance as BeneficiaryBookComponent).onSelect.subscribe(async (beneficiary: Beneficiary) => {\n            if (beneficiary.method === this.transaction.method) {\n                this.transaction.beneficiary = beneficiary\n                this.saveAsTemplate = false\n            } else {\n                this.beneficiary = beneficiary\n                this.router.navigate(['/withdraw'], {\n                    queryParams: { method: beneficiary.method !== 'swift' ? beneficiary.method : null },\n                })\n            }\n            modal.close()\n        })\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            this.walletsQuery.balances$.subscribe(balances => {\n                const found = balances.find(balance => balance.currency.code === this.transaction.currency!.code)\n                if (found) {\n                    this.transaction.amount = found.availableBalance\n\n                    if (!this.inclusiveFee && this.fee) {\n                        const maxFee = new BigNumber(\n                            Currency.convert(this.fee.max!, this.fee.currency, this.transaction.currency!)\n                        )\n                        const relativeFeeAmount = new BigNumber(this.transaction.amount).times(\n                            this.transaction.relativeFee ?? 0\n                        )\n                        let fee = new BigNumber(this.transaction.fixedFee || 0).plus(relativeFeeAmount)\n                        if (fee.isGreaterThan(maxFee)) {\n                            fee = maxFee\n                        }\n                        this.transaction.amount = new BigNumber(this.transaction.amount)\n                            .minus(fee)\n                            .toFixed(this.transaction.currency!.decimalPlaces, 1)\n                    }\n\n                    if (new BigNumber(this.transaction.amount).isLessThan(0)) {\n                        this.transaction.amount = '0'\n                    }\n\n                    this.transaction.amount = parseFloat(this.transaction.amount).toString()\n                }\n            })\n        }\n    }\n\n    public toggleInclusiveFee(): void {\n        this.inclusiveFee = !this.inclusiveFee\n        this.transaction.settledAmount = !this.inclusiveFee ? this.transaction.amount : undefined\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    public reset(): void {\n        this.saveAsTemplate = true\n        this.inclusiveFee = true\n        this.minAmount = undefined\n        this.files = []\n        if (this.withdrawForm) {\n            this.withdrawForm.resetForm({\n                saveAsTemplate: true,\n                inclusiveFee: true,\n                amount: undefined,\n                purpose: undefined,\n                comment: undefined,\n                'currency-select': this.transaction.currency,\n            })\n        }\n        if (this.beneficiaryDetailsForm) {\n            this.beneficiaryDetailsForm.reset()\n        }\n        if (!this.beneficiary) {\n            this.transaction.beneficiary = pick(this.transaction.beneficiary, ['currency', 'method']) as any\n        } else {\n            this.transaction.beneficiary = this.beneficiary\n            if (this.beneficiary.method === 'local') {\n                this.transaction.currency = this.currenciesQuery.getEntity(this.beneficiary.currency.code)\n            }\n            this.beneficiary = undefined\n            this.saveAsTemplate = false\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { WithdrawFormComponent } from './withdraw-form/withdraw-form.component'\nimport { WithdrawRoutingModule } from './withdraw-routing.module'\nimport { WithdrawComponent } from './withdraw.component'\n\n@NgModule({\n    declarations: [WithdrawComponent, WithdrawFormComponent],\n    imports: [CommonModule, WithdrawRoutingModule, PaymentFormModule, TransactionModule],\n})\nexport class WithdrawModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openBeneficiaryBook()\\\" class=\\\"font-lg\\\">{{ 'withdraw-form.view-templates' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #withdrawForm=\\\"ngForm\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': withdrawForm.submitted }\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"transaction?.method === 'crypto' ? ['crypto'] : ['fiat']\\\"\\n                [required]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                #currencySelect\\n                [hideZeroBalance]=\\\"appName !== 'sgpmx'\\\"\\n            >\\n            </currency-select>\\n        </div>\\n        <div *ngIf=\\\"currencySelect.currencyInput.invalid && (withdrawForm.submitted || currencySelect.currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                {{ 'common.this-is-required' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <div class=\\\"d-flex\\\">\\n                    <label class=\\\"font-md\\\"> {{ 'common.amount' | translate }} </label>\\n                </div>\\n                <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n            </div>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (withdrawForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    {{ 'common.minimum-amount-is' | translate }}\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <label class=\\\"custom-control custom-checkbox\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" name=\\\"inclusiveFee\\\" (click)=\\\"toggleInclusiveFee()\\\" [ngModel]=\\\"inclusiveFee\\\" />\\n                <span class=\\\"custom-control-label font-md\\\">\\n                    {{ 'common.include-service-fee' | translate }}\\n                    <fa-icon\\n                        class=\\\"text-primary\\\"\\n                        [icon]=\\\"faQuestionCircle\\\"\\n                        [popoverTitle]=\\\"inclusiveFeeTitle\\\"\\n                        [ngbPopover]=\\\"inclusiveFeeContent\\\"\\n                        triggers=\\\"hover\\\"\\n                        container=\\\"body\\\"\\n                    >\\n                    </fa-icon>\\n                </span>\\n            </label>\\n        </div>\\n        <beneficiary-details-form\\n            [beneficiary]=\\\"transaction.beneficiary\\\"\\n            [currency]=\\\"transaction.currency\\\"\\n            [isLarge]=\\\"true\\\"\\n            [disabled]=\\\"!!transaction.beneficiary?.id\\\"\\n            #beneficiaryDetailsForm\\n        >\\n        </beneficiary-details-form>\\n        <div class=\\\"form-group mb-4\\\">\\n            <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <label class=\\\"custom-control custom-checkbox\\\">\\n                    <input\\n                        type=\\\"checkbox\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        name=\\\"saveAsTemplate\\\"\\n                        [(ngModel)]=\\\"saveAsTemplate\\\"\\n                        [disabled]=\\\"!!transaction.beneficiary?.id\\\"\\n                    />\\n                    <span class=\\\"custom-control-label font-md\\\" [ngClass]=\\\"saveAsTemplate ? 'text-body' : 'text-muted'\\\">{{\\n                        'withdraw-form.save-as-template' | translate\\n                    }}</span>\\n                </label>\\n                <a href (click)=\\\"$event.preventDefault(); reset()\\\" *ngIf=\\\"transaction.beneficiary?.id\\\">{{ 'common.clear' | translate }}</a>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n            <ng-select\\n                class=\\\"ng-select-lg\\\"\\n                name=\\\"purpose\\\"\\n                [(ngModel)]=\\\"transaction.purpose\\\"\\n                [items]=\\\"purposeItems\\\"\\n                [clearable]=\\\"false\\\"\\n                [required]=\\\"true\\\"\\n                [addTag]=\\\"true\\\"\\n                addTagText=\\\"Use\\\"\\n                dropdownPosition=\\\"bottom\\\"\\n                #purposeInput=\\\"ngModel\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"purposeInput.invalid && (withdrawForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ ' + ('common.attach' | translate) : '- ' + ('common.remove' | translate) }}\\n                {{ 'common.file' | translate | lowercase }}\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <access-errors [errors]=\\\"['VerificationRequiredError']\\\"></access-errors>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\" [disabled]=\\\"user.accessErrors.includes('VerificationRequiredError')\\\">\\n            {{ 'common.submit' | translate }}\\n        </button>\\n        <div class=\\\"small text-muted\\\">\\n            {{ 'common.by-clicking-the-submit-button' | translate }} <br />\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.\\n        </div>\\n    </form>\\n</ng-container>\\n<ng-template #inclusiveFeeTitle> {{ 'common.include-service-fee' | translate }} </ng-template>\\n<ng-template #inclusiveFeeContent>\\n    <p>\\n        {{ 'common.if' | translate }} <b>{{ 'common.checked' | translate }}</b\\n        >, {{ 'common.checked-desc' | translate }}\\n    </p>\\n    <p>\\n        {{ 'common.if' | translate }} <b>{{ 'common.unchecked' | translate }}</b\\n        >, {{ 'common.unchecked-desc' | translate }}\\n    </p>\\n</ng-template>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page e2e-withdraw\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"payment-methods\\\">\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-swift')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: null }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                        [routerLinkActiveOptions]=\\\"{ exact: true }\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/swift.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.intl-wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-local')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: 'local' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/local.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'withdraw.local-wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-crypto')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: 'crypto' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/crypto.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.crypto-currencies' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.withdraw' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <withdraw-form [(transaction)]=\\\"transaction\\\"></withdraw-form>\\n                    </div>\\n                </section>\\n                <p class=\\\"text-center text-muted\\\">\\n                    <a [routerLink]=\\\"['/deposit']\\\">{{ 'common.go-to-deposit' | translate }} &#x203A;</a>\\n                </p>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";"]}