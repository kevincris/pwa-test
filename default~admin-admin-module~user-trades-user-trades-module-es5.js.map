{"version":3,"sources":["webpack:///src/app/common/trades/trade-quote-modal.component.html","webpack:///src/app/common/trades/trade-feed.component.ts","webpack:///src/app/common/trades/trades.module.ts","webpack:///src/app/common/trades/trade-quote-modal.component.ts","webpack:///src/app/common/trades/trade-form.component.ts","webpack:///src/app/common/trades/trade-feed.component.html","webpack:///src/app/common/trades/trade-form.component.html"],"names":["TradeFeedComponent","http","feed","subscriptions","add","pipe","get","subscribe","unsubscribe","selector","template","TradesModule","declarations","exports","imports","TradeQuoteModalComponent","activeModal","onExecute","onCountdown","symbolsMap","expiry","Date","trade","expiryDate","countdown","restart","begin","parts","symbol","split","price","times","quantity","toFixed","event","action","emit","TradeFormComponent","ngbModal","session","toastr","walletsService","securityCheckService","translate","faCircle","symbols","side","onTrade","isLoading","isTradingInAmount","isUserSelectAllowed","userAutocomplete","usersStream","search","params","set","results","map","user","body","userId","id","amount","post","form","invalid","getScopePermission","requestQuote","openQuoteModal","success","instant","fetch","resetForm","modal","open","windowClass","backdrop","component","componentInstance","executeTrade","close","t"],"mappings":"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","file":"default~admin-admin-module~user-trades-user-trades-module-es5.js","sourcesContent":["export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">Review and Execute</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <table class=\\\"table table-striped table-borderless mb-0\\\">\\n        <tbody>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Precious Metal Type</th>\\n                <td>{{ $any(symbolsMap)[trade.symbol] }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Transaction Type</th>\\n                <td class=\\\"text-capitalize\\\">{{ trade.side }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">{{ 'common.spot-price' | translate }}</th>\\n                <td>{{ trade.price | amount: 2 }} {{ counterCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Value/<br />Troy Ounce</th>\\n                <td>{{ total | amount: 2 }} {{ counterCurrency }}<br />{{ trade.quantity | amount: 7 }} {{ baseCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Transaction Fee</th>\\n                <td>\\n                    <span>{{ trade.fee | amount: 2 }} {{ counterCurrency }} </span>\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">GST</th>\\n                <td>\\n                    <span>{{ trade.gst | amount: 2 }} {{ counterCurrency }} </span>\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">{{ 'common.grand-total' | translate }}</th>\\n                <td class=\\\"font-weight-bold\\\" [ngClass]=\\\"trade.side === 'BUY' ? 'text-primary' : 'text-danger'\\\">\\n                    {{ trade.total | amount: 2 }} {{ counterCurrency }}\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Spot Price Refresh Timer</th>\\n                <td><countdown #cd [config]=\\\"{ leftTime: expiry, format: 'ss' }\\\" (event)=\\\"onCountdownEvent($event)\\\"></countdown> seconds</td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn\\\" [ngClass]=\\\"trade.side === 'BUY' ? 'btn-primary' : 'btn-danger'\\\" (click)=\\\"onExecute.emit()\\\">\\n        <span class=\\\"text-capitalize\\\">{{ trade.side }}</span> {{ trade.quantity | amount: 7 }} {{ baseCurrency }}\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"activeModal.dismiss()\\\">Cancel</button>\\n</div>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Subscription, timer } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { FeedResponse } from '../api-interfaces'\n\n@Component({\n    selector: 'trade-feed',\n    templateUrl: 'trade-feed.component.html',\n})\nexport class TradeFeedComponent implements OnInit, OnDestroy {\n    public feed: Record<string, FeedResponse> = {}\n    private subscriptions = new Subscription()\n\n    constructor(private http: HttpClient) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            timer(1, 10 * 1000)\n                .pipe(switchMap(() => this.http.get<Record<string, FeedResponse>>('/trades/feed')))\n                .subscribe(feed => {\n                    this.feed = feed\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CountdownModule } from 'ngx-countdown'\nimport { CommonModule } from '../common.module'\nimport { TradeFeedComponent } from './trade-feed.component'\nimport { TradeFormComponent } from './trade-form.component'\nimport { TradeQuoteModalComponent } from './trade-quote-modal.component'\n\n@NgModule({\n    declarations: [TradeFormComponent, TradeQuoteModalComponent, TradeFeedComponent],\n    exports: [TradeFormComponent, TradeFeedComponent],\n    imports: [CommonModule, IonicModule, CountdownModule],\n})\nexport class TradesModule {}\n","import { AfterViewInit, Component, EventEmitter, OnChanges, OnInit, ViewChild } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport BigNumber from 'bignumber.js'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport { CountdownComponent } from 'ngx-countdown'\nimport { RequestQuoteResponse } from './trade-form.component'\n\n@Component({\n    selector: 'trade-quote-modal',\n    templateUrl: 'trade-quote-modal.component.html',\n})\nexport class TradeQuoteModalComponent implements OnInit, OnChanges, AfterViewInit {\n    public trade: RequestQuoteResponse\n    public expiry: number\n    public onExecute = new EventEmitter<void>()\n    public onCountdown = new EventEmitter<void>()\n    public symbolsMap = {\n        'AU/USD': 'Gold Troy Ounce',\n        'AG/USD': 'Silver Troy Ounce',\n    }\n\n    @ViewChild('cd', { static: false })\n    public countdown: CountdownComponent\n\n    constructor(public activeModal: NgbActiveModal) {}\n\n    public ngOnInit(): void {\n        this.expiry = differenceInSeconds(new Date(this.trade.expiryDate), new Date())\n    }\n\n    public ngOnChanges(): void {\n        this.expiry = differenceInSeconds(new Date(this.trade.expiryDate), new Date())\n        if (this.countdown) {\n            this.countdown.restart()\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this.countdown.begin()\n    }\n\n    public get baseCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[0]\n    }\n\n    public get counterCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[1]\n    }\n\n    public get total(): string {\n        return new BigNumber(this.trade.price).times(this.trade.quantity).toFixed(2)\n    }\n\n    public onCountdownEvent(event: any): void {\n        if (event.action === 'done') {\n            this.onCountdown.emit()\n        }\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, map, switchMap } from 'rxjs/operators'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { IUser, Trade, TradeSide, TradeSymbol } from '../api-interfaces'\nimport { SecurityCheckService } from '../security-check/security-check.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { TradeQuoteModalComponent } from './trade-quote-modal.component'\n\nexport interface RequestQuoteResponse {\n    side: TradeSide\n    symbol: TradeSymbol\n    price: string\n    quantity: string\n    expiryDate: number\n    fee: string\n    gst: string\n    total: string\n    hmac: string\n}\n\n@Component({\n    selector: 'trade-form',\n    templateUrl: 'trade-form.component.html',\n})\nexport class TradeFormComponent {\n    public faCircle = faCircle\n    public symbols: TradeSymbol[] = ['AU/USD', 'AG/USD']\n    public symbolsMap = {\n        'AU/USD': 'Gold Troy Ounce',\n        'AG/USD': 'Silver Troy Ounce',\n    }\n    public trade: Partial<Trade> = {\n        side: 'BUY',\n        symbol: this.symbols[0],\n    }\n    public user: IUser\n    @ViewChild('tradeForm')\n    public form: NgForm\n    @Output()\n    public onTrade = new EventEmitter<void>()\n\n    public isLoading = false\n    public isTradingInAmount = true\n    @Input()\n    public isUserSelectAllowed = false\n\n    public userAutocomplete = new EventEmitter<string>()\n    public usersStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        ),\n        map(results => results.map(user => ({ user })))\n    )\n\n    constructor(\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private session: SessionService,\n        private toastr: ToastrService,\n        private walletsService: WalletsService,\n        private securityCheckService: SecurityCheckService,\n        public translate: TranslateService\n    ) {}\n\n    public requestQuote(): Observable<RequestQuoteResponse> {\n        const body: Pick<Trade, 'side' | 'symbol'> & { userId: string; amount?: string; quantity?: string } = {\n            side: this.trade.side!,\n            symbol: this.trade.symbol!,\n            userId: this.user?.id ?? this.session.user.id,\n        }\n        if (this.isTradingInAmount) {\n            body.amount = this.trade.quantity\n        } else {\n            body.quantity = this.trade.quantity\n        }\n        return this.http.post<RequestQuoteResponse>('/trades/request-for-quote', body)\n    }\n\n    public submitRequestQuote(): void {\n        if (this.form.invalid) {\n            return\n        }\n        this.securityCheckService.getScopePermission('banking').subscribe(() => {\n            this.isLoading = true\n            this.requestQuote()\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(trade => {\n                    this.openQuoteModal(trade)\n                })\n        })\n    }\n\n    public executeTrade(trade: RequestQuoteResponse): void {\n        this.isLoading = true\n        this.http\n            .post<Trade>('/trades', {\n                ...trade,\n                userId: this.user?.id ?? this.session.user.id,\n            })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('trade-form.trade-executed'))\n                this.onTrade.emit()\n                this.walletsService.fetch()\n                this.form.resetForm({ symbol: this.trade.symbol, side: this.trade.side, quantity: null })\n            })\n    }\n\n    public openQuoteModal(trade: RequestQuoteResponse): void {\n        const modal = this.ngbModal.open(TradeQuoteModalComponent, {\n            windowClass: trade.side === 'BUY' ? 'modal-primary' : 'modal-danger',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as TradeQuoteModalComponent\n        component.trade = trade\n        component.onExecute.subscribe(() => {\n            this.executeTrade(component.trade)\n            modal.close()\n        })\n        component.onCountdown.subscribe(() => {\n            this.requestQuote().subscribe(t => {\n                component.trade = t\n                component.countdown.restart()\n            })\n        })\n    }\n\n    public get baseCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[0]\n    }\n}\n","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"prices prices-gold p-3\\\">\\n            <h5>Gold Troy Ounce</h5>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">SELL</p>\\n                    <h3 *ngIf=\\\"feed.gold; else spinner\\\">{{ feed.gold.sell + '' | amount: 2 }} USD</h3>\\n                </div>\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">BUY</p>\\n                    <h3 *ngIf=\\\"feed.gold; else spinner\\\">{{ feed.gold.buy + '' | amount: 2 }} USD</h3>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"prices prices-silver p-3\\\">\\n            <h5>Silver Troy Ounce</h5>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">SELL</p>\\n                    <h3 *ngIf=\\\"feed.silver; else spinner\\\">{{ feed.silver.sell + '' | amount: 2 }} USD</h3>\\n                </div>\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">BUY</p>\\n                    <h3 *ngIf=\\\"feed.silver; else spinner\\\">{{ feed.silver.buy + '' | amount: 2 }} USD</h3>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #spinner>\\n    <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n</ng-template>\\n\";","export default \"<form\\n    class=\\\"form-validation\\\"\\n    (ngSubmit)=\\\"submitRequestQuote()\\\"\\n    #tradeForm=\\\"ngForm\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': tradeForm.submitted }\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div *ngIf=\\\"isUserSelectAllowed\\\" class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.user' | translate }}</label>\\n        <ng-select\\n            name=\\\"user\\\"\\n            [placeholder]=\\\"'common.select-user' | translate\\\"\\n            [(ngModel)]=\\\"user\\\"\\n            bindValue=\\\"user\\\"\\n            #userInput=\\\"ngModel\\\"\\n            [items]=\\\"usersStream | async\\\"\\n            [typeahead]=\\\"userAutocomplete\\\"\\n            [clearable]=\\\"false\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-display *ngIf=\\\"item\\\" [user]=\\\"item.user\\\"></user-display>\\n                    <small *ngIf=\\\"item.user\\\" class=\\\"text-gray ml-1\\\">{{ item.user.email }}</small>\\n                </div>\\n            </ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item.user\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                    <div class=\\\"w-100\\\">\\n                        <ng-container *ngIf=\\\"item.user\\\">\\n                            <div>{{ item.user.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.user.email }}</small>\\n                        </ng-container>\\n                    </div>\\n                </div>\\n            </ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"userInput.invalid && (tradeForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.transaction-type' | translate }}</label>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-secondary btn-lg bg-transparent\\\" (click)=\\\"trade.side = 'SELL'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-sell\\\" name=\\\"side\\\" value=\\\"SELL\\\" [(ngModel)]=\\\"trade.side\\\" />\\n                    <label class=\\\"custom-control-label text-secondary font-weight-normal\\\" for=\\\"side-sell\\\">{{\\n                        'common.sell' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-primary btn-lg bg-transparent\\\" (click)=\\\"trade.side = 'BUY'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-buy\\\" name=\\\"side\\\" value=\\\"BUY\\\" [(ngModel)]=\\\"trade.side\\\" />\\n                    <label class=\\\"custom-control-label text-primary font-weight-normal\\\" for=\\\"side-buy\\\">{{\\n                        'common.buy' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\" for=\\\"symbol\\\">{{ 'common.precious-metal-type' | translate }}</label>\\n        <ng-select\\n            class=\\\"ng-select-lg\\\"\\n            name=\\\"symbol\\\"\\n            [placeholder]=\\\"'common.select-symbol' | translate\\\"\\n            [items]=\\\"symbols\\\"\\n            [searchable]=\\\"false\\\"\\n            [clearable]=\\\"false\\\"\\n            [(ngModel)]=\\\"trade.symbol\\\"\\n            #symbol=\\\"ngModel\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\"> {{ $any(symbolsMap)[item] }} </ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\"> {{ $any(symbolsMap)[item] }} </ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"symbol.invalid && (tradeForm.submitted || symbol.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"symbol?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"d-flex justify-content-between\\\">\\n            <label class=\\\"font-md\\\" for=\\\"quantity\\\">\\n                {{ (isTradingInAmount ? 'common.value' : 'common.troy-ounce') | translate }}\\n            </label>\\n            <a href (click)=\\\"isTradingInAmount = !isTradingInAmount; $event.preventDefault()\\\">{{\\n                isTradingInAmount ? ('common.switch-to' | translate) + baseCurrency : ('common.switch-to' | translate) + 'USD'\\n            }}</a>\\n        </div>\\n        <div class=\\\"input-group\\\">\\n            <input\\n                type=\\\"number\\\"\\n                numeric\\n                [decimals]=\\\"isTradingInAmount ? 2 : 7\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"quantity\\\"\\n                name=\\\"quantity\\\"\\n                [(ngModel)]=\\\"trade.quantity\\\"\\n                #amountInput=\\\"ngModel\\\"\\n                [placeholder]=\\\"isTradingInAmount ? '0.00' : '0.0000000'\\\"\\n                [min]=\\\"isTradingInAmount ? '1' : '0.0000001'\\\"\\n                [max]=\\\"'100000'\\\"\\n                emptyToNull\\n                required\\n            />\\n            <div class=\\\"input-group-append\\\">\\n                <span class=\\\"input-group-text font-lg\\\">{{ isTradingInAmount ? 'USD' : baseCurrency }}</span>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"amountInput.invalid && (tradeForm.submitted || amountInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.min\\\">Minimum is 1 USD or equivalent.</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.max\\\">Maximum is 100,000 USD or equivalent.</div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.proceed' | translate }}\\n    </button>\\n</form>\\n\";"]}