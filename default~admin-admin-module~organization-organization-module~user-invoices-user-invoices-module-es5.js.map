{"version":3,"sources":["webpack:///src/app/common/currency-mask.config.ts","webpack:///src/app/common/models/accounting/invoice.model.ts","webpack:///src/app/common/invoices/invoices.component.html","webpack:///src/app/common/invoices/invoice-form/invoice-form.component.ts","webpack:///src/app/common/models/accounting/invoice-item.model.ts","webpack:///src/app/common/services/accounting/invoice.service.ts","webpack:///src/app/common/invoices/invoices.module.ts","webpack:///src/app/common/invoices/invoice-form/invoice-form.component.html","webpack:///src/app/common/invoices/invoice-modal/invoice-modal.component.html","webpack:///src/app/common/invoices/invoices.component.ts","webpack:///src/app/common/invoices/invoice-modal/invoice-modal.component.ts","webpack:///src/app/common/invoices/invoice-item-form/invoice-item-form.component.ts","webpack:///src/app/common/invoices/invoice-item-form/invoice-item-form.component.html"],"names":["baseCurrencyMaskOptions","align","allowNegative","integerCurrencyMaskOptions","precision","percentageCurrencyMaskOptions","prefix","suffix","Invoice","data","items","Object","assign","currency","invoicer","invoicee","map","item","length","reduce","total","result","plus","quantity","times","price","isFinite","toFixed","valueAddedTax","tax","InvoiceFormComponent","session","http","toastr","invoices","activeModal","translate","onSave","onDelete","currencies","editorModules","toolbar","list","indent","header","userAutocomplete","legalEntitiesStream","pipe","search","get","params","set","faChevronLeft","faTrash","faSave","isLoading","isTermsCollapsed","convertPercentage","subscriptions","invoice","limit","subscribe","response","code","user","preferredCurrency","unsubscribe","itemsForm","toArray","form","submit","invalid","some","isValid","body","subject","dueDate","slice","accountNumber","toString","terms","add","create","success","instant","next","push","country","alpha2","name","selector","template","InvoiceItem","InvoiceService","id","createPayload","post","operations","patch","headers","Math","round","random","jsonrpc","method","rpcResult","where","count","url","head","observe","JSON","stringify","has","providedIn","InvoicesModule","declarations","exports","imports","InvoicesComponent","ngbModal","changeDetector","route","router","confirmation","toStartCase","apiUrl","formComponent","modal","open","backdrop","windowClass","viewInvoiceModal","componentInstance","invoiceId","onSettle","updateEvent","op","path","value","createSignedUrl","signedUrl","window","InvoiceModalComponent","walletsService","fetchById","settle","fetch","emit","close","InvoiceItemFormComponent","submitted","valid"],"mappings":"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","file":"default~admin-admin-module~organization-organization-module~user-invoices-user-invoices-module-es5.js","sourcesContent":["import { CurrencyMaskConfig } from '@aerapass/ngx-currency-mask'\n\nexport const baseCurrencyMaskOptions: Partial<CurrencyMaskConfig> = {\n    align: 'left',\n    allowNegative: false,\n}\n\nexport const integerCurrencyMaskOptions = {\n    ...baseCurrencyMaskOptions,\n    precision: 0,\n}\n\nexport const percentageCurrencyMaskOptions = {\n    ...baseCurrencyMaskOptions,\n    prefix: '',\n    suffix: ' %',\n}\n","import BigNumber from 'bignumber.js'\nimport { IInvoice, InvoiceStatus } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\nimport { InvoiceItem } from './invoice-item.model'\n\nexport class Invoice implements IInvoice {\n    public id: string\n    public subject: string\n    public valueAddedTax: string\n    public invoicer: User | null\n    public invoicee: User\n    public currency: Currency\n    public dueDate: Date\n    public items: InvoiceItem[] = []\n    public status: InvoiceStatus\n    public terms: string | null\n    public createdAt: Date\n    public updatedAt: Date\n\n    public constructor(data?: IInvoice) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.invoicer) {\n                this.invoicer = new User(data.invoicer)\n            }\n            if (data.invoicee) {\n                this.invoicee = new User(data.invoicee)\n            }\n            if (data.items) {\n                this.items = data.items.map(item => new InvoiceItem(item))\n            }\n        }\n    }\n\n    public get total(): string {\n        return this.items && this.items.length > 0\n            ? this.items\n                  .reduce((total: BigNumber, item: InvoiceItem) => {\n                      const result = new BigNumber(total).plus(\n                          new BigNumber(item.quantity).times(new BigNumber(item.price))\n                      )\n                      return result.isFinite() ? result : new BigNumber(0)\n                  }, new BigNumber(0))\n                  .toFixed(6, 1)\n            : '0'\n    }\n\n    public get tax(): string {\n        return new BigNumber(this.total).times(new BigNumber(this.valueAddedTax || 0)).toFixed(6, 1)\n    }\n\n    public get net(): string {\n        return new BigNumber(this.total).plus(new BigNumber(this.tax)).toFixed(6, 1)\n    }\n}\n","export default \"<section class=\\\"container-fluid\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header d-flex justify-content-between align-items-center\\\">\\n            <span>{{ 'common.invoices' | translate }}</span>\\n            <div>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"requestExport()\\\">\\n                    <fa-icon [icon]=\\\"faDownload\\\" class=\\\"mr-1\\\"></fa-icon> {{ 'common.export' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn btn-primary btn-sm ml-1\\\"\\n                    (click)=\\\"showForm($event, {})\\\"\\n                    *ngIf=\\\"['admin'].includes(session.user?.role)\\\"\\n                >\\n                    <fa-icon [icon]=\\\"faPlus\\\" class=\\\"mr-1\\\"></fa-icon> {{ 'common.new-invoice' | translate | sentenceCase }}\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"row no-gutters align-items-center mb-3\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-17 d-flex justify-content-between align-items-center\\\">\\n                    <span class=\\\"ml-lg-3\\\"\\n                        >{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span\\n                    >\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <ng-select\\n                            class=\\\"mr-2\\\"\\n                            [(ngModel)]=\\\"limit\\\"\\n                            dropdownPosition=\\\"auto\\\"\\n                            (change)=\\\"select(1)\\\"\\n                            [items]=\\\"limitOpts\\\"\\n                            [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                            [clearable]=\\\"false\\\"\\n                            [searchable]=\\\"false\\\"\\n                            required\\n                        >\\n                            <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                        </ng-select>\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"5\\\"\\n                            [ellipses]=\\\"false\\\"\\n                            [rotate]=\\\"true\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"table-responsive position-relative\\\">\\n                <table class=\\\"table table-hover table-bordered table-data\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.invoicer' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicer', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicer', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicer', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.invoicee' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.subject' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['subject']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['subject'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['subject']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.total' | translate }}</th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.due-date' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['dueDate']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['dueDate'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['dueDate']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">{{ 'common.actions' | translate }}</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <tr *ngFor=\\\"let invoice of items\\\">\\n                                <th scope=\\\"row\\\" [width]=\\\"'1%'\\\">\\n                                    <uuid [value]=\\\"invoice.id\\\"></uuid>\\n                                </th>\\n                                <td>\\n                                    <user-display [user]=\\\"invoice.invoicer\\\"> </user-display>\\n                                </td>\\n                                <td>\\n                                    <user-display [user]=\\\"invoice.invoicee\\\"> </user-display>\\n                                </td>\\n                                <td>{{ invoice.subject }}</td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize badge badge-lg\\\"\\n                                        [ngClass]=\\\"{\\n                                            'badge-success': invoice.status === 'completed',\\n                                            'badge-info': invoice.status === 'pending',\\n                                            'badge-danger': invoice.status === 'cancelled'\\n                                        }\\\"\\n                                        >{{ invoice.status }}</span\\n                                    >\\n                                </td>\\n                                <td class=\\\"text-right text-primary\\\">\\n                                    {{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}\\n                                </td>\\n                                <td>\\n                                    {{ invoice.dueDate | date: 'mediumDate' }}\\n                                </td>\\n                                <td class=\\\"action\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">\\n                                    <div class=\\\"btn-group w-100\\\">\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-primary-air btn-sm btn-block px-2\\\"\\n                                            (click)=\\\"$event.preventDefault(); viewInvoice(invoice)\\\"\\n                                        >\\n                                            {{ 'common.view' | translate }}\\n                                        </button>\\n                                        <div class=\\\"btn-group\\\" ngbDropdown container=\\\"body\\\" placement=\\\"bottom-right\\\">\\n                                            <button class=\\\"btn btn-primary-air btn-sm dropdown-toggle-split\\\" ngbDropdownToggle>\\n                                                <fa-icon [icon]=\\\"faCaretDown\\\"></fa-icon>\\n                                            </button>\\n                                            <div class=\\\"dropdown-menu dropdown-menu-sm\\\" ngbDropdownMenu>\\n                                                <a href ngbDropdownItem (click)=\\\"$event.preventDefault(); openInvoice(invoice)\\\">{{\\n                                                    'common.file' | translate\\n                                                }}</a>\\n                                                <ng-container *ngIf=\\\"invoice.status === 'pending'\\\">\\n                                                    <a href ngbDropdownItem (click)=\\\"$event.preventDefault(); cancel(invoice)\\\">{{\\n                                                        'common.cancel' | translate\\n                                                    }}</a>\\n                                                </ng-container>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"items.length === 0\\\">\\n                                <td colspan=\\\"8\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n                <ng-container *ngIf=\\\"isFetching | async\\\">\\n                    <circle-spinner></circle-spinner>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\";","import { HttpClient, HttpParams } from '@angular/common/http'\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faChevronLeft, faSave, faTrash } from '@fortawesome/pro-light-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { find } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, switchMap } from 'rxjs/operators'\nimport { IUser, Paginated } from '../../api-interfaces'\nimport { convertPercentage } from '../../common.mixin'\nimport { countriesSortedByName } from '../../countries'\nimport { percentageCurrencyMaskOptions } from '../../currency-mask.config'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { InvoiceItem } from '../../models/accounting/invoice-item.model'\nimport { Invoice } from '../../models/accounting/invoice.model'\nimport { User } from '../../models/core/user.model'\nimport { InvoiceService } from '../../services/accounting/invoice.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\nimport { InvoiceItemFormComponent } from '../invoice-item-form/invoice-item-form.component'\n\n@Component({\n    selector: 'invoice-form',\n    templateUrl: 'invoice-form.component.html',\n})\nexport class InvoiceFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public item: Invoice\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    public invoice: Invoice\n    public currencies: Currency[] = []\n    public items: InvoiceItem[] = [new InvoiceItem()]\n    public invoicee: string\n    public dueDate: string\n    @ViewChild('invoiceForm')\n    public form: NgForm\n    @ViewChildren('itemsForm')\n    public itemsForm: QueryList<InvoiceItemFormComponent>\n    public editorModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ align: [] as string[] }],\n            ['clean'],\n            ['link'],\n        ],\n    }\n\n    public user: User | undefined\n    public userAutocomplete = new EventEmitter<string>()\n    public legalEntitiesStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        )\n    )\n\n    public faChevronLeft = faChevronLeft\n    public faTrash = faTrash\n    public faSave = faSave\n    public isLoading = false\n    public isTermsCollapsed = true\n\n    public percentageCurrencyMaskOptions = percentageCurrencyMaskOptions\n    public convertPercentage = convertPercentage\n\n    public valueAddedTax: string\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private invoices: InvoiceService,\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.invoice = new Invoice()\n        this.invoice.items = this.items\n        this.invoice.valueAddedTax = '0.00'\n        this.valueAddedTax = this.invoice.valueAddedTax\n\n        this.http\n            .get<Paginated<Currency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                    'filter.type': 'or:fiat,crypto,metal',\n                },\n            })\n            .subscribe(response => {\n                this.currencies = response.data\n                const currency = find(this.currencies, { code: this.session.user.preferredCurrency.code })\n                if (currency) {\n                    this.invoice.currency = currency\n                } else if (this.currencies.length > 0) {\n                    this.invoice.currency = this.currencies[0]\n                }\n            })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        for (const form of this.itemsForm.toArray()) {\n            form.submit()\n        }\n        if (this.form.invalid || this.itemsForm.some(form => !form.isValid())) {\n            return\n        }\n        const body = {\n            subject: this.invoice.subject,\n            currency: {\n                code: this.invoice.currency.code,\n            } as Currency,\n            valueAddedTax: this.invoice.valueAddedTax,\n            dueDate: `${this.dueDate.slice(4)}-${this.dueDate.slice(2, 4)}-${this.dueDate.slice(0, 2)}`,\n            invoicer: null as null,\n            invoicee: { accountNumber: this.user?.accountNumber ?? '' },\n            items: this.items.map(item => Object.assign(item, { price: item.price.toString() })),\n            terms: !this.isTermsCollapsed ? this.invoice.terms : null,\n        }\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .create(body)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(invoice => {\n                    this.invoice = invoice\n                    this.toastr.success(this.translate.instant('common.invoice-created'))\n                    this.onSave.next()\n                })\n        )\n    }\n\n    public addItem(): void {\n        this.items.push(new InvoiceItem())\n    }\n\n    public mapToCountry(code: string): string {\n        if (!code) {\n            return ''\n        }\n        const country = find(countriesSortedByName, { alpha2: code })\n        return country ? country.name : ''\n    }\n}\n","import BigNumber from 'bignumber.js'\nimport { IInvoiceItem } from '../../api-interfaces'\n\nexport class InvoiceItem implements IInvoiceItem {\n    public id: string\n    public description: string\n    public quantity: number\n    public price: string\n\n    constructor(data?: IInvoiceItem) {\n        Object.assign(this, data)\n    }\n\n    public get total(): string {\n        const result = new BigNumber(this.quantity).times(new BigNumber(this.price))\n        return result.isFinite() ? result.toFixed(6, 1) : '0'\n    }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Operation } from 'fast-json-patch'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { RPCResult } from '../../api-interfaces'\nimport { Invoice } from '../../models/accounting/invoice.model'\n\nexport interface InvoiceCreatePayload {\n    subject: string\n    dueDate: string\n    invoicer: {\n        id: string\n    } | null\n    invoicee: {\n        accountNumber: string\n    }\n    valueAddedTax: string\n    currency: {\n        code: string\n    }\n    items: {\n        description: string\n        price: string\n        quantity: number\n    }[]\n    terms?: string | null\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class InvoiceService {\n    constructor(private http: HttpClient) {}\n\n    public fetchById(id: string): Observable<Invoice> {\n        return this.http.get<Invoice>(`/invoices/${id}`).pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public create(createPayload: InvoiceCreatePayload): Observable<Invoice> {\n        return this.http.post<Invoice>('/invoices', createPayload).pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public patch(id: string, operations: Operation[]): Observable<Invoice> {\n        return this.http\n            .patch<Invoice>(`/invoices/${id}`, operations, {\n                headers: new HttpHeaders({\n                    'Content-Type': 'application/json-patch+json',\n                }),\n            })\n            .pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public settle(id: string): Observable<Invoice> {\n        return this.http\n            .post<RPCResult<Invoice>>(\n                `/invoices/${id}`,\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'settle',\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(rpcResult => new Invoice(rpcResult.result)))\n    }\n\n    public countByUserId(id: string, where: any): Observable<number> {\n        return this.count(`/users/${id}/invoices`, where)\n    }\n\n    private count(url: string, where?: any): Observable<number> {\n        return this.http\n            .head(url, {\n                observe: 'response',\n                params: new HttpParams().set('where', JSON.stringify(where)),\n            })\n            .pipe(\n                map(response =>\n                    response.headers && response.headers.has('x-total-count')\n                        ? ~~response.headers.get('x-total-count')!\n                        : 0\n                )\n            )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { QuillEditorModule } from '../quill-editor/quill-editor.module'\nimport { InvoiceFormComponent } from './invoice-form/invoice-form.component'\nimport { InvoiceItemFormComponent } from './invoice-item-form/invoice-item-form.component'\nimport { InvoiceModalComponent } from './invoice-modal/invoice-modal.component'\nimport { InvoicesComponent } from './invoices.component'\n\n@NgModule({\n    declarations: [InvoicesComponent, InvoiceFormComponent, InvoiceItemFormComponent, InvoiceModalComponent],\n    exports: [InvoicesComponent, InvoiceFormComponent, InvoiceItemFormComponent, InvoiceModalComponent],\n    imports: [CommonModule, QuillEditorModule],\n})\nexport class InvoicesModule {}\n","export default \"<form\\n    class=\\\"form-validation\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': invoiceForm.submitted }\\\"\\n    #invoiceForm=\\\"ngForm\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.create-invoice' | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss(); $event.preventDefault()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body pb-0\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"user\\\">{{ 'common.invoicee' | translate }}</label>\\n            <ng-select\\n                id=\\\"user\\\"\\n                name=\\\"user\\\"\\n                [placeholder]=\\\"'common.enter-invoicee' | translate\\\"\\n                [(ngModel)]=\\\"user\\\"\\n                #userInput=\\\"ngModel\\\"\\n                [items]=\\\"legalEntitiesStream | async\\\"\\n                [typeahead]=\\\"userAutocomplete\\\"\\n                [clearable]=\\\"false\\\"\\n                required\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item.name }} <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                        <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                        <div class=\\\"w-100\\\">\\n                            <div>{{ item.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"userInput.invalid && (invoiceForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.subject' | translate }}</label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"invoice.subject\\\" id=\\\"subject\\\" name=\\\"subject\\\" #subject=\\\"ngModel\\\" required />\\n            <div *ngIf=\\\"subject.invalid && (invoiceForm.submitted || subject.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"subject?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"valueAddedTax\\\">VAT / GST</label>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"valueAddedTax\\\"\\n                name=\\\"valueAddedTax\\\"\\n                [(ngModel)]=\\\"valueAddedTax\\\"\\n                (ngModelChange)=\\\"valueAddedTax && (invoice.valueAddedTax = convertPercentage(valueAddedTax))\\\"\\n                currencyMask\\n                [options]=\\\"percentageCurrencyMaskOptions\\\"\\n                #valueAddedTaxField=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"valueAddedTaxField.invalid && (invoiceForm.submitted || valueAddedTaxField.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueAddedTaxField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n                <ng-select\\n                    id=\\\"currency\\\"\\n                    name=\\\"currency\\\"\\n                    [(ngModel)]=\\\"invoice.currency\\\"\\n                    bindLabel=\\\"code\\\"\\n                    [items]=\\\"currencies\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #currency=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"currency.invalid && (invoiceForm.submitted || currency.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currency?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate | sentenceCase }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"dueDate\\\"\\n                    name=\\\"dueDate\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    [(ngModel)]=\\\"dueDate\\\"\\n                    #dueDateInput=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"dueDateInput.invalid && (invoiceForm.submitted || dueDateInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"dueDateInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <label class=\\\"form-control-label\\\">{{ 'common.items' | translate }}</label>\\n        <invoice-item-form *ngFor=\\\"let item of items; index as i\\\" [item]=\\\"item\\\" (onDelete)=\\\"items.splice(i, 1)\\\" #itemsForm></invoice-item-form>\\n        <div class=\\\"form-group d-flex justify-content-end\\\">\\n            <a href (click)=\\\"addItem(); $event.preventDefault()\\\">+ {{ 'common.add-item' | translate }}</a>\\n        </div>\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>{{ 'common.subtotal' | translate }}</span>\\n                        <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                        <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between\\\">\\n                        <span class=\\\"font-weight-bold\\\">{{ 'common.total' | translate }}</span>\\n                        <span class=\\\"font-weight-bold\\\"\\n                            >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                        >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <a href class=\\\"d-block mb-2\\\" (click)=\\\"isTermsCollapsed = !isTermsCollapsed; $event.preventDefault()\\\"\\n            >{{ isTermsCollapsed ? '+ ' + ('common.add' | translate) : '- ' + ('common.remove' | translate) }}\\n            {{ 'common.terms' | translate | lowercase }}</a\\n        >\\n        <div class=\\\"mb-2\\\" [ngbCollapse]=\\\"isTermsCollapsed\\\">\\n            <label class=\\\"form-control-label font-md\\\">{{ 'common.terms' | translate }} ({{ 'common.optional' | translate }})</label>\\n            <quill-editor\\n                name=\\\"terms\\\"\\n                [(ngModel)]=\\\"invoice.terms\\\"\\n                [modules]=\\\"editorModules\\\"\\n                [placeholder]=\\\"'common.enter-your-terms' | translate\\\"\\n                [sanitize]=\\\"true\\\"\\n            ></quill-editor>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            {{ 'common.create' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.invoice' | translate }}: {{ invoice ? invoice.subject : 'Loading invoice' }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-invoice-modal\\\" *ngIf=\\\"invoice; else loading\\\">\\n    <div class=\\\"row mb-2\\\">\\n        <div class=\\\"col-sm-12\\\">\\n            <label class=\\\"form-control-label mr-1\\\">{{ 'common.invoicee' | translate }}</label>\\n            <user-display [user]=\\\"invoice.invoicee ? invoice.invoicee : undefined\\\"> </user-display>\\n        </div>\\n        <div class=\\\"col-sm-12\\\">\\n            <div class=\\\"d-flex justify-content-end\\\">\\n                <label class=\\\"form-control-label mr-1\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate }}</label>\\n                <div class=\\\"font-weight-bold\\\">{{ invoice.dueDate | formatDate: 'dd/MM/yyyy' }}</div>\\n            </div>\\n            <div class=\\\"d-flex justify-content-end\\\">\\n                <label class=\\\"form-control-label mr-1\\\" for=\\\"dueDate\\\">{{ 'common.status' | translate }}</label>\\n                <span\\n                    class=\\\"text-capitalize label\\\"\\n                    [ngClass]=\\\"{\\n                        'label-success': invoice.status === 'completed',\\n                        'label-info': invoice.status === 'pending',\\n                        'label-danger': invoice.status === 'cancelled'\\n                    }\\\"\\n                    >{{ invoice.status }}</span\\n                >\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"mb-3\\\">\\n        <label class=\\\"form-control-label mr-1\\\">{{ 'common.invoicer' | translate }}</label>\\n        <user-display [user]=\\\"invoice.invoicer ? invoice.invoicer : null\\\"> </user-display>\\n    </div>\\n    <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table table-striped\\\">\\n            <thead>\\n                <tr>\\n                    <th scope=\\\"col\\\">Description</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.price' | translate }}</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.quantity' | translate }}</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.total' | translate }}</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr *ngFor=\\\"let item of invoice.items\\\" class=\\\"bg-white\\\">\\n                    <th scope=\\\"row\\\">{{ item.description }}</th>\\n                    <td class=\\\"text-right\\\">{{ item.price | amount: invoice.currency.decimalPlaces }}</td>\\n                    <td class=\\\"text-right\\\">{{ item.quantity }}</td>\\n                    <td class=\\\"text-right\\\">{{ (item.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                <div class=\\\"d-flex justify-content-between mb-2\\\">\\n                    <span>Subtotal</span>\\n                    <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                </div>\\n                <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                    <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                    <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                </div>\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <span class=\\\"font-weight-bold\\\">Total</span>\\n                    <span class=\\\"font-weight-bold\\\"\\n                        >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                    >\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div *ngIf=\\\"invoice.terms\\\">\\n        <div [innerHTML]=\\\"invoice.terms\\\"></div>\\n    </div>\\n    <button\\n        (click)=\\\"settle()\\\"\\n        *ngIf=\\\"invoice.status === 'pending'\\\"\\n        class=\\\"btn btn-lg btn-block btn-primary mt-1 e2e-pay-invoice-btn\\\"\\n        [ngClass]=\\\"{ loading: isLoading }\\\"\\n        [disabled]=\\\"isLoading\\\"\\n    >\\n        {{ 'common.pay-now' | translate }}\\n    </button>\\n</div>\\n<ng-template #loading>\\n    <div class=\\\"modal-body py-5\\\">\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n    </div>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { toStartCase } from '../common.mixin'\nimport { ListComponent } from '../list.component'\nimport { Invoice } from '../models/accounting/invoice.model'\nimport { InvoiceService } from '../services/accounting/invoice.service'\nimport { ConfirmationService } from '../services/confirmation.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { InvoiceFormComponent } from './invoice-form/invoice-form.component'\nimport { InvoiceModalComponent } from './invoice-modal/invoice-modal.component'\n\n@Component({\n    selector: 'invoices',\n    templateUrl: 'invoices.component.html',\n})\nexport class InvoicesComponent extends ListComponent<Invoice> {\n    public toStartCase = toStartCase\n    @Input()\n    protected apiUrl = '/invoices'\n    protected formComponent = InvoiceFormComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        protected toastr: ToastrService,\n        protected invoices: InvoiceService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public viewInvoice(invoice: Invoice): void {\n        const modal = this.ngbModal.open(InvoiceModalComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n        })\n        const viewInvoiceModal = modal.componentInstance as InvoiceModalComponent\n        viewInvoiceModal.invoiceId = invoice.id\n        viewInvoiceModal.onSettle.subscribe(() => this.updateEvent.next())\n    }\n\n    public cancel(invoice: Invoice): void {\n        this.subscriptions.add(\n            this.invoices\n                .patch(invoice.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public openInvoice(invoice: Invoice): void {\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/invoices/${invoice.id}/file`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n\n    protected mapItem(item: any): Invoice {\n        return new Invoice(item)\n    }\n}\n","import { Component, EventEmitter, OnDestroy, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize } from 'rxjs/operators'\nimport { WalletsService } from '../../../store/wallets/wallets.service'\nimport { Invoice } from '../../models/accounting/invoice.model'\nimport { InvoiceService } from '../../services/accounting/invoice.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\n\n@Component({\n    selector: 'invoice-modal',\n    templateUrl: 'invoice-modal.component.html',\n})\nexport class InvoiceModalComponent implements OnInit, OnDestroy {\n    public invoiceId: string\n    public invoice: Invoice\n    public isLoading = false\n\n    public onSettle = new EventEmitter<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public activeModal: NgbActiveModal,\n        private invoices: InvoiceService,\n        private session: SessionService,\n        private toastr: ToastrService,\n        private walletsService: WalletsService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.invoices.fetchById(this.invoiceId).subscribe(invoice => {\n                this.invoice = invoice\n            })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public isInvoicee(): boolean {\n        return this.session.user.id === this.invoice.invoicee.id\n    }\n\n    public settle(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .settle(this.invoice.id)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-settled'))\n                    this.walletsService.fetch()\n                    this.onSettle.emit()\n                    this.activeModal.close(true)\n                })\n        )\n    }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faTrash } from '@fortawesome/pro-solid-svg-icons'\nimport { InvoiceItem } from '../../models/accounting/invoice-item.model'\n\n@Component({\n    selector: 'invoice-item-form',\n    templateUrl: 'invoice-item-form.component.html',\n})\nexport class InvoiceItemFormComponent {\n    @Input()\n    public item: InvoiceItem\n    @Input()\n    public size: 'lg' | undefined\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('form')\n    public form: NgForm\n    public submitted = false\n\n    public faTrash = faTrash\n\n    public submit(): void {\n        this.submitted = true\n    }\n\n    public isValid(): boolean {\n        return !!this.form.valid\n    }\n}\n","export default \"<form #form=\\\"ngForm\\\" class=\\\"form-validation\\\" [ngClass]=\\\"{ 'ng-submitted': submitted }\\\" novalidate>\\n    <div class=\\\"form-row align-items-baseline\\\">\\n        <div class=\\\"form-group col-12\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.description\\\"\\n                [placeholder]=\\\"'common.description' | translate\\\"\\n                type=\\\"text\\\"\\n                id=\\\"description\\\"\\n                name=\\\"description\\\"\\n                #description=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"description.invalid && (submitted || description.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"description?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col-4\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.quantity\\\"\\n                placeholder=\\\"Qty\\\"\\n                type=\\\"number\\\"\\n                step=\\\"1\\\"\\n                [min]=\\\"1\\\"\\n                id=\\\"quantity\\\"\\n                name=\\\"quantity\\\"\\n                #quantity=\\\"ngModel\\\"\\n                integerValidator\\n                required\\n            />\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.min\\\">{{ 'common.minimum-value-is-one' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.invalidInteger\\\">{{ 'common.value-must-be-integer' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col-6\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.price\\\"\\n                [placeholder]=\\\"'common.price' | translate\\\"\\n                type=\\\"number\\\"\\n                id=\\\"price\\\"\\n                [min]=\\\"0\\\"\\n                step=\\\"2\\\"\\n                name=\\\"price\\\"\\n                [decimal]=\\\"2\\\"\\n                #price=\\\"ngModel\\\"\\n                decimalValidator\\n                required\\n            />\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.min\\\">{{ 'common.minimum-value-is-zero' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.invalidDecimal\\\">{{ 'common.decimal-more-than-two' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-2\\\">\\n            <a href class=\\\"btn btn-danger-air\\\" (click)=\\\"onDelete.emit(); $event.preventDefault()\\\">\\n                <fa-icon [icon]=\\\"faTrash\\\"></fa-icon>\\n            </a>\\n        </div>\\n    </div>\\n</form>\\n\";"]}