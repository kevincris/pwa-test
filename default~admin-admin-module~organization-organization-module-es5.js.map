{"version":3,"sources":["webpack:///src/app/admin/users/user-form-modal/user-form-modal.component.html","webpack:///src/app/admin/users/user-form-modal/user-form-modal.component.ts"],"names":["UserFormModalComponent","http","activeModal","toastr","router","translate","type","details","firstName","lastName","birthday","nationality","business","name","onSave","onDelete","isSaving","countries","countriesSortedByName","form","valid","error","instant","body","item","post","undefined","pipe","subscribe","user","close","navigate","id","selector","template"],"mappings":"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","file":"default~admin-admin-module~organization-organization-module-es5.js","sourcesContent":["export default \"<form\\n    #form=\\\"ngForm\\\"\\n    class=\\\"form-validation e2e-user-form-modal\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': form.submitted }\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.create-user' | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <div class=\\\"custom-control custom-radio\\\">\\n                    <input\\n                        type=\\\"radio\\\"\\n                        id=\\\"typePersonal\\\"\\n                        name=\\\"type\\\"\\n                        value=\\\"personal\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        [(ngModel)]=\\\"type\\\"\\n                        (change)=\\\"onTypeChange()\\\"\\n                    />\\n                    <label class=\\\"custom-control-label font-md\\\" for=\\\"typePersonal\\\">{{ 'common.personal-account' | translate }}</label>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <div class=\\\"custom-control custom-radio\\\">\\n                    <input\\n                        type=\\\"radio\\\"\\n                        id=\\\"typeCorporate\\\"\\n                        name=\\\"type\\\"\\n                        value=\\\"business\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        [(ngModel)]=\\\"type\\\"\\n                        (change)=\\\"onTypeChange()\\\"\\n                    />\\n                    <label class=\\\"custom-control-label font-md\\\" for=\\\"typeCorporate\\\">{{ 'common.corporate-account' | translate }}</label>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"type === 'business'\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"form-group col\\\">\\n                    <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.entity-name' | translate }}</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"name\\\"\\n                        name=\\\"name\\\"\\n                        [(ngModel)]=\\\"business.name\\\"\\n                        #name=\\\"ngModel\\\"\\n                        autocomplete=\\\"given-name\\\"\\n                        required\\n                        emptyToNull\\n                    />\\n                    <div *ngIf=\\\"name.invalid && (form.submitted || name.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"name?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.first-name' | translate | sentenceCase }}</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"firstName\\\"\\n                    name=\\\"firstName\\\"\\n                    [(ngModel)]=\\\"details.firstName\\\"\\n                    #firstName=\\\"ngModel\\\"\\n                    autocomplete=\\\"given-name\\\"\\n                    required\\n                    emptyToNull\\n                />\\n                <div *ngIf=\\\"firstName.invalid && (form.submitted || firstName.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"firstName?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.last-name' | translate | sentenceCase }}</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"lastName\\\"\\n                    name=\\\"lastName\\\"\\n                    [(ngModel)]=\\\"details.lastName\\\"\\n                    #lastName=\\\"ngModel\\\"\\n                    autocomplete=\\\"family-name\\\"\\n                    required\\n                    emptyToNull\\n                />\\n                <div *ngIf=\\\"lastName.invalid && (form.submitted || lastName.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"lastName?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"birthday\\\">{{ 'common.birthday' | translate }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"birthday\\\"\\n                    name=\\\"birthday\\\"\\n                    [(ngModel)]=\\\"details.birthday\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    #birthdayField=\\\"ngModel\\\"\\n                    autocomplete=\\\"bday\\\"\\n                    required\\n                    birthdayValidator\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"birthdayField.invalid && birthdayField.dirty\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.invalidDate\\\">{{ 'common.invalid-date' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateLongAgo\\\">{{ 'common.date-should-be-1900' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateInFuture\\\">{{ 'common.you-should-18' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"nationality\\\">{{ 'common.nationality' | translate }}</label>\\n                <ng-select\\n                    id=\\\"nationality\\\"\\n                    name=\\\"nationality\\\"\\n                    [(ngModel)]=\\\"details.nationality\\\"\\n                    bindLabel=\\\"name\\\"\\n                    bindValue=\\\"alpha2\\\"\\n                    [items]=\\\"countriesSortedByName\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #nationality=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"nationality.invalid && nationality.dirty\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"nationality?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"font-md\\\" for=\\\"email\\\">{{ 'common.email' | translate }}</label>\\n                <input\\n                    type=\\\"email\\\"\\n                    id=\\\"email\\\"\\n                    name=\\\"email\\\"\\n                    class=\\\"form-control\\\"\\n                    [(ngModel)]=\\\"item.email\\\"\\n                    autocomplete=\\\"email\\\"\\n                    #email=\\\"ngModel\\\"\\n                    required\\n                    email\\n                />\\n                <div *ngIf=\\\"email.invalid && (form.submitted || email.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"font-md\\\" for=\\\"password\\\">{{ 'common.password' | translate }}</label>\\n                <input\\n                    type=\\\"password\\\"\\n                    id=\\\"password\\\"\\n                    name=\\\"password\\\"\\n                    class=\\\"form-control\\\"\\n                    [(ngModel)]=\\\"item.password\\\"\\n                    minlength=\\\"8\\\"\\n                    autocomplete=\\\"new-password\\\"\\n                    #password=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.min-length-8-char' | translate }}</small>\\n                <div *ngIf=\\\"password.invalid && (form.submitted || password.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.minlength\\\">{{ 'common.password-too-short' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isSaving }\\\" [disabled]=\\\"isSaving\\\">\\n            {{ 'common.create' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { pick } from 'lodash'\nimport { finalize } from 'rxjs/operators'\nimport { BusinessDetails, IUser, UserDetails, UserType } from '../../../common/api-interfaces'\nimport { convertToISODate, deepOmitEmptyProperties } from '../../../common/common.mixin'\nimport { countries, countriesSortedByName } from '../../../common/countries'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'user-form-modal',\n    templateUrl: 'user-form-modal.component.html',\n})\nexport class UserFormModalComponent {\n    @Input()\n    public item: Partial<IUser> & { password?: string }\n    public type: UserType = 'personal'\n    public details: Partial<UserDetails> = {\n        firstName: '',\n        lastName: '',\n        birthday: '',\n        nationality: '',\n    }\n\n    public business: Partial<BusinessDetails> = {\n        name: '',\n    }\n\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('form')\n    public form: NgForm\n\n    public isSaving = false\n    public countries = countries\n    public countriesSortedByName = countriesSortedByName\n\n    constructor(\n        private http: HttpClient,\n        public activeModal: NgbActiveModal,\n        private toastr: ToastrService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (!this.form.valid) {\n            this.toastr.error(this.translate.instant('common.form-invalid'))\n            return\n        }\n        this.isSaving = true\n        const body = pick(this.item, ['email', 'password'])\n        this.http\n            .post<IUser>(`/users`, {\n                ...body,\n                type: this.type,\n                details: deepOmitEmptyProperties({\n                    ...this.details,\n                    birthday: this.details.birthday ? convertToISODate(this.details.birthday) : undefined,\n                    business: {\n                        name: this.business.name,\n                    },\n                }),\n            })\n            .pipe(\n                finalize(() => {\n                    this.isSaving = false\n                })\n            )\n            .subscribe(user => {\n                this.activeModal.close()\n                return this.router.navigate(['/admin/accounts/users', user.id])\n            })\n    }\n\n    public onTypeChange(): void {\n        this.details = {\n            firstName: '',\n            lastName: '',\n            birthday: '',\n            nationality: '',\n        }\n        this.business = {\n            name: '',\n        }\n    }\n}\n"]}