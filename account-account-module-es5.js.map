{"version":3,"sources":["webpack:///src/app/account/account-security/two-factor/two-factor.component.html","webpack:///src/app/account/profile/email-form/email-form.component.html","webpack:///src/app/common/logged-in.auth-guard.ts","webpack:///src/app/account/account-security/change-password-form/change-password-form.component.ts","webpack:///src/app/account/account-security/account-security.component.ts","webpack:///src/app/account/profile/profile.component.html","webpack:///src/app/account/account-security/api-tokens/api-tokens.component.html","webpack:///src/app/account/account-security/change-password-form/change-password-form.component.html","webpack:///src/app/account/account-security/logout-all/logout-all.component.html","webpack:///src/app/account/account-security/two-factor/two-factor.component.ts","webpack:///src/app/account/account-billing/account-billing.resolver.ts","webpack:///src/app/account/account-security/api-tokens/api-tokens.component.ts","webpack:///src/app/account/account-billing/account-billing.component.html","webpack:///src/app/account/account.component.ts","webpack:///src/app/common/security-check/security-check.service.ts","webpack:///src/app/account/profile/profile.component.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/account-security/logout-all/logout-all.component.ts","webpack:///src/app/account/account-security/account-security.component.html","webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/common/services/account-billing.service.ts","webpack:///src/app/account/account-billing/account-billing.component.ts","webpack:///src/app/account/profile/email-form/email-form.component.ts"],"names":["LoggedInAuthGuard","session","router","_","state","isAuthenticated","parseUrl","url","providedIn","ChangePasswordFormComponent","securityCheckService","userService","alert","logoutService","translate","isLoading","requiredPasswordStrength","passwordStrength","subcriptions","unsubscribe","changePasswordForm","valid","add","getScopePermission","pipe","changePassword","user","id","password","refreshToken","undefined","message","instant","severity","logout","subscribe","selector","template","AccountSecurityComponent","faLockAlt","faShieldAlt","faMobile","faUsers","faKey","TwoFactorComponent","http","tokenService","post","Math","floor","random","jsonrpc","method","headers","response","twoFactor","result","status","changeTwoFactor","verificationCode","toString","refresh","AccountBillingResolver","accountBills","fetchAccountBills","fetchBillingCurrency","payments","billingCurrency","ApiTokensComponent","ngbModal","changeDetector","route","toastr","confirmation","defaultLimit","apiUrl","subscriptions","userStream","userId","apiToken","success","updateEvent","next","show","type","title","text","privateKey","confirmText","showCancel","confirmClass","CONFIRMED","publicKey","AccountComponent","SecurityCheckService","scope","hasTokenScope","modal","open","windowClass","componentInstance","observer","then","complete","ProfileComponent","token","avatar","intercom","currenciesQuery","fetchEvent","isUploading","avatarUploading","isEmailNotificationsUpdating","toCountryCallingCode","faCoin","faExclamationCircle","faEnvelope","faUserCheck","faFileAlt","faImage","faInfoCircle","faExclamationTriangle","faUniversity","faBell","preferredCurrency$","currencies$","selectAll","filterBy","currency","includes","get","navigate","request","body","encodeURIComponent","name","reload","previousState","sendEmailNotifications","changeSendEmailNotifications","preferredCurrency","code","changePreferredCurrency","AccountModule","declarations","imports","LogoutAllComponent","routes","path","component","canActivate","children","redirectTo","pathMatch","resolve","data","AccountRoutingModule","forChild","exports","providers","AccountBillsService","AccountBillingComponent","billingCurrencyChange","currencySymbolMap","faUserPlus","now","Date","length","invoiceDate","changeBillingCurrency","accountBill","amount","eq","transaction","payment","invoice","window","signedUrl","EmailFormComponent","Toastr","alertService","email","disposables","Set","clearAlerts","emailForm","Error","params","resetForm","error","disposable","dispose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKFA,iBAAiB;AAC1B,mCAAoBC,OAApB,EAAqDC,MAArD,EAAqE;AAAA;;AAAjD,eAAAD,OAAA,GAAAA,OAAA;AAAiC,eAAAC,MAAA,GAAAA,MAAA;AAAkB;;AAD7C;AAAA;AAAA,iBAEnB,qBAAYC,CAAZ,EAAuCC,KAAvC,EAAiE;AACpE,gBAAI,CAAC,KAAKH,OAAL,CAAaI,eAAb,EAAL,EAAqC;AACjC,qBAAO,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,qBAAqBF,KAAK,CAACG,GAAhD,CAAP;AACH;;AACD,mBAAO,IAAP;AACH;AAPyB;;AAAA;AAAA,S;;;;gBAHrB;;gBADqC;;;;AAIjCP,uBAAiB,6DAD7B,iEAAW;AAAEQ,kBAAU,EAAE;AAAd,OAAX,CAC6B,GAAjBR,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCUAS,2BAA2B;AAYpC,6CACWR,OADX,EAEYS,oBAFZ,EAGYC,WAHZ,EAIYC,KAJZ,EAKYC,aALZ,EAMWC,SANX,EAMsC;AAAA;;AAL3B,eAAAb,OAAA,GAAAA,OAAA;AACC,eAAAS,oBAAA,GAAAA,oBAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,aAAA,GAAAA,aAAA;AACD,eAAAC,SAAA,GAAAA,SAAA;AAbJ,eAAAC,SAAA,GAAY,KAAZ;AAEA,eAAAC,wBAAA,GAA2B,EAA3B;AACA,eAAAC,gBAAA,GAAmB,CAAnB;AAEC,eAAAC,YAAA,GAAe,IAAI,iDAAJ,EAAf;AASJ;;AAnBgC;AAAA;AAAA,iBAqB7B,uBAAW;AACd,iBAAKA,YAAL,CAAkBC,WAAlB;AACH;AAvBmC;AAAA;AAAA,iBAyB7B,8BAAkB;AAAA;;AACrB,gBAAI,CAAC,KAAKC,kBAAL,CAAwBC,KAA7B,EAAoC;AAChC;AACH;;AAED,iBAAKH,YAAL,CAAkBI,GAAlB,CACI,KAAKZ,oBAAL,CACKa,kBADL,CACwB,kBADxB,EAEKC,IAFL,CAGQ,+DAAQ,YAAM;AACV,mBAAI,CAACT,SAAL,GAAiB,IAAjB;AACA,qBAAO,KAAI,CAACJ,WAAL,CAAiBc,cAAjB,CAAgC,KAAI,CAACxB,OAAL,CAAayB,IAAb,CAAkBC,EAAlD,EAAsD,KAAI,CAACC,QAA3D,CAAP;AACH,aAHD,CAHR,EAOQ,gEAAS,YAAM;AACX,mBAAI,CAACb,SAAL,GAAiB,KAAjB;AACH,aAFD,CAPR,EAUQ,2DAAI,YAAM;AACN;AACA,mBAAI,CAACd,OAAL,CAAa4B,YAAb,GAA4BC,SAA5B;;AACA,mBAAI,CAAClB,KAAL,CAAWU,GAAX,CAAe;AACXS,uBAAO,EAAE,KAAI,CAACjB,SAAL,CAAekB,OAAf,CAAuB,oDAAvB,CADE;AAEXC,wBAAQ,EAAE;AAFC,eAAf;AAIH,aAPD,CAVR,EAkBQ,+DAAQ;AAAA,qBAAM,KAAI,CAACpB,aAAL,CAAmBqB,MAAnB,EAAN;AAAA,aAAR,CAlBR,EAoBKC,SApBL,EADJ;AAuBH;AArDmC;;AAAA;AAAA,S;;;;gBAN/B;;gBAJA;;gBAEA;;gBADA;;gBAEA;;gBANA;;;;;;gBAcJ,uD;AAAS,iBAAC,oBAAD;;;AADD1B,iCAA2B,6DAJvC,gEAAU;AACP2B,gBAAQ,EAAE,sBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIuC,GAA3B5B,2BAA2B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCPA6B,wBAAwB,6BAMjC,kCAAmBrC,OAAnB,EAA4C;AAAA;;AAAzB,aAAAA,OAAA,GAAAA,OAAA;AALZ,aAAAsC,SAAA,GAAY,0EAAZ;AACA,aAAAC,WAAA,GAAc,4EAAd;AACA,aAAAC,QAAA,GAAW,yEAAX;AACA,aAAAC,OAAA,GAAU,wEAAV;AACA,aAAAC,KAAA,GAAQ,sEAAR;AACuC,OANb,C;;;;gBAN5B;;;;AAMIL,8BAAwB,6DAJpC,gEAAU;AACPF,gBAAQ,EAAE,kBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIoC,GAAxBC,wBAAwB,CAAxB;;;;;;;;;;;;;;;;ACRb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCeFM,kBAAkB;AAU3B,oCACW3C,OADX,EAEY4C,IAFZ,EAGYnC,oBAHZ,EAIYoC,YAJZ,EAKYnC,WALZ,EAKoC;AAAA;;AAJzB,eAAAV,OAAA,GAAAA,OAAA;AACC,eAAA4C,IAAA,GAAAA,IAAA;AACA,eAAAnC,oBAAA,GAAAA,oBAAA;AACA,eAAAoC,YAAA,GAAAA,YAAA;AACA,eAAAnC,WAAA,GAAAA,WAAA;AATL,eAAAI,SAAA,GAAY,KAAZ;AAEC,eAAAG,YAAA,GAAe,IAAI,iDAAJ,EAAf;AAQJ;;AAhBuB;AAAA;AAAA,iBAkBpB,uBAAW;AACd,iBAAKA,YAAL,CAAkBC,WAAlB;AACH;AApB0B;AAAA;AAAA,iBAsBpB,6BAAiB;AAAA;;AACpB,iBAAKD,YAAL,CAAkBI,GAAlB,CACI,KAAKZ,oBAAL,CACKa,kBADL,CACwB,kBADxB,EAEKC,IAFL,CAGQ,2DAAI,YAAM;AACN,oBAAI,CAACT,SAAL,GAAiB,IAAjB;AACH,aAFD,CAHR,EAMQ,+DAAQ;AAAA,qBACJ,MAAI,CAAC8B,IAAL,CAAUE,IAAV,kBACc,MAAI,CAAC9C,OAAL,CAAayB,IAAb,CAAkBC,EADhC,GAEI;AACIA,kBAAE,EAAEqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADR;AAEIC,uBAAO,EAAE,KAFb;AAGIC,sBAAM,EAAE;AAHZ,eAFJ,EAOI;AACIC,uBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,kCAAgB;AAAlB,iBAAhB;AADb,eAPJ,CADI;AAAA,aAAR,CANR,EAmBQ,gEAAS,YAAM;AACX,oBAAI,CAACtC,SAAL,GAAiB,KAAjB;AACH,aAFD,CAnBR,EAuBKoB,SAvBL,CAuBe,UAAAmB,QAAQ,EAAI;AACnB,oBAAI,CAACC,SAAL,GAAiBD,QAAQ,CAACE,MAA1B;AACH,aAzBL,CADJ;AA4BH;AAnD0B;AAAA;AAAA,iBAqDpB,6BAAoBC,MAApB,EAAmC;AAAA;;AACtC,iBAAKvC,YAAL,CAAkBI,GAAlB,CACI,KAAKZ,oBAAL,CACKa,kBADL,CACwB,kBADxB,EAEKC,IAFL,CAGQ,2DAAI,YAAM;AACN,oBAAI,CAACT,SAAL,GAAiB,IAAjB;AACH,aAFD,CAHR,EAMQ,+DAAQ,YAAK;;;AACT,2BAAI,CAACJ,WAAL,CAAiB+C,eAAjB,CACI,MAAI,CAACzD,OAAL,CAAayB,IAAb,CAAkBC,EADtB,EAEI8B,MAFJ,EAGI,MAAI,CAACE,gBAAL,GACM;AACI,8BAAc,CAAF,KAAE,MAAI,CAACA,gBAAL,MAAqB,IAArB,IAAqB,aAArB,GAAqB,MAArB,GAAqB,GAAEC,QAAF;AADvC,eADN,GAIM,EAPV;AAQC,aATL,CANR,EAiBQ,+DAAQ;AAAA,qBAAM,MAAI,CAACd,YAAL,CAAkBe,OAAlB,EAAN;AAAA,aAAR,CAjBR,EAkBQ,gEAAS,YAAM;AACX,oBAAI,CAAC9C,SAAL,GAAiB,KAAjB;AACH,aAFD,CAlBR,EAsBKoB,SAtBL,CAsBe,YAAM;AACb,oBAAI,CAACwB,gBAAL,GAAwB,IAAxB;AACA,oBAAI,CAACJ,SAAL,GAAiB,IAAjB;AACH,aAzBL,CADJ;AA4BH;AAlF0B;;AAAA;AAAA,S;;;;gBAPtB;;gBARA;;gBAMA;;gBAGA;;gBAFA;;;;;;gBASJ,uD;AAAS,iBAAC,kBAAD;;;AADDX,wBAAkB,6DAJ9B,gEAAU;AACPR,gBAAQ,EAAE,YADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI8B,GAAlBO,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCDAkB,sBAAsB;AAC/B,wCAAoBC,YAApB,EAA+D9D,OAA/D,EAAwF;AAAA;;AAApE,eAAA8D,YAAA,GAAAA,YAAA;AAA2C,eAAA9D,OAAA,GAAAA,OAAA;AAA2B;;AAD3D;AAAA;AAAA,iBAGxB,mBAAO;AACV,mBAAO,sDAAS,CACZ,KAAK8D,YAAL,CAAkBC,iBAAlB,CAAoC,KAAK/D,OAAL,CAAayB,IAAb,CAAkBC,EAAtD,CADY,EAEZ,KAAKoC,YAAL,CAAkBE,oBAAlB,CAAuC,KAAKhE,OAAL,CAAayB,IAAb,CAAkBC,EAAzD,CAFY,CAAT,EAGJH,IAHI,CAIH,kEAAW;AAAA,qBAAM,0CAAN;AAAA,aAAX,CAJG,EAKH,2DAAI;AAAA;AAAA,kBAAE0C,QAAF;AAAA,kBAAYC,eAAZ;;AAAA,qBAAkC;AAClCD,wBAAQ,EAARA,QADkC;AAElCC,+BAAe,EAAfA;AAFkC,eAAlC;AAAA,aAAJ,CALG,CAAP;AAUH;AAd8B;;AAAA;AAAA,S;;;;gBAT1B;;gBACA;;;;AAQIL,4BAAsB,6DADlC,kEACkC,GAAtBA,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCEAM,kBAAkB;AAAA;;AAAA;;AAI3B,oCACIvB,IADJ,EAEIwB,QAFJ,EAGIC,cAHJ,EAIIC,KAJJ,EAKIrE,MALJ,EAMID,OANJ,EAOYuE,MAPZ,EAQYC,YARZ,EASW3D,SATX,EASsC;AAAA;;AAAA;;AAElC,qCAAM+B,IAAN,EAAYwB,QAAZ,EAAsBC,cAAtB,EAAsCC,KAAtC,EAA6CrE,MAA7C,EAAqDD,OAArD;AAJQ,iBAAAuE,MAAA,GAAAA,MAAA;AACA,iBAAAC,YAAA,GAAAA,YAAA;AACD,iBAAA3D,SAAA,GAAAA,SAAA;AAZJ,iBAAA4D,YAAA,GAAe,CAAf;AACA,iBAAA3D,SAAA,GAAY,KAAZ;AAW+B;AAGrC;;AAhB0B;AAAA;AAAA,iBAkBpB,oBAAQ;AACX,iBAAK4D,MAAL,oBAAwB,KAAK1E,OAAL,CAAayB,IAAb,CAAkBC,EAA1C;;AACA;AACH;AArB0B;AAAA;AAAA,iBAuBpB,oBAAQ;AAAA;;AACX,iBAAKZ,SAAL,GAAiB,IAAjB;AACA,iBAAK6D,aAAL,CAAmBtD,GAAnB,CACI,KAAKrB,OAAL,CAAa4E,UAAb,CACKrD,IADL,CAEQ,4DAAK,CAAL,CAFR,EAGQ,+DAAQ,UAAAE,IAAI;AAAA,qBACR,MAAI,CAACmB,IAAL,CAAUE,IAAV,gBAAiE;AAAE+B,sBAAM,EAAEpD,IAAI,CAACC;AAAf,eAAjE,CADQ;AAAA,aAAZ,CAHR,EAMQ,gEAAS,YAAM;AACX,oBAAI,CAACZ,SAAL,GAAiB,KAAjB;AACH,aAFD,CANR,EAUKoB,SAVL,CAUe,UAAA4C,QAAQ,EAAI;AACnB,oBAAI,CAACP,MAAL,CAAYQ,OAAZ,CAAoB,MAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,gCAAvB,CAApB;;AACA,oBAAI,CAACiD,WAAL,CAAiBC,IAAjB;;AACA,oBAAI,CAACT,YAAL,CACKU,IADL,CACU;AACFC,oBAAI,EAAE,SADJ;AAEFC,qBAAK,EAAE,MAAI,CAACvE,SAAL,CAAekB,OAAf,CAAuB,kBAAvB,CAFL;AAGFsD,oBAAI,sCACN,MAAI,CAACxE,SAAL,CAAekB,OAAf,CAAuB,qCAAvB,CADM,wEAGH+C,QAAQ,CAACQ,UAHN,+CAIF,MAAI,CAACzE,SAAL,CAAekB,OAAf,CAAuB,2CAAvB,CAJE,2BAHF;AASFwD,2BAAW,EAAE,YATX;AAUFC,0BAAU,EAAE;AAVV,eADV,EAaKtD,SAbL;AAcH,aA3BL,CADJ;AA8BH;AAvD0B;AAAA;AAAA,iBAyDpB,gBAAO4C,QAAP,EAAyB;AAAA;;AAC5B,iBAAKH,aAAL,CAAmBtD,GAAnB,CACI,KAAKmD,YAAL,CACKU,IADL,CACU;AACFC,kBAAI,EAAE,QADJ;AAEFC,mBAAK,EAAE,KAAKvE,SAAL,CAAekB,OAAf,CAAuB,yBAAvB,CAFL;AAGFsD,kBAAI,YAAK,KAAKxE,SAAL,CAAekB,OAAf,CACL,+CADK,CAAL,iBAEI,KAAKlB,SAAL,CAAekB,OAAf,CAAuB,4BAAvB,CAFJ,QAHF;AAMFwD,yBAAW,EAAE,KAAK1E,SAAL,CAAekB,OAAf,CAAuB,eAAvB,CANX;AAOF0D,0BAAY,EAAE,QAPZ;AAQFD,wBAAU,EAAE;AARV,aADV,EAWKjE,IAXL,CAYQ,8DAAO,UAAAgC,MAAM;AAAA,qBAAIA,MAAM,KAAK,gGAAmBmC,SAAlC;AAAA,aAAb,CAZR,EAaQ,+DAAQ;AAAA,qBAAM,MAAI,CAAC9C,IAAL,iCAAgCkC,QAAQ,CAACa,SAAzC,EAAN;AAAA,aAAR,CAbR,EAeKzD,SAfL,CAee,YAAM;AACb,oBAAI,CAACqC,MAAL,CAAYQ,OAAZ,CAAoB,MAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,0BAAvB,CAApB;;AACA,oBAAI,CAACiD,WAAL,CAAiBC,IAAjB;AACH,aAlBL,CADJ;AAqBH;AA/E0B;;AAAA;AAAA,QAAS,gFAAT,C;;;;gBAhBtB;;gBAGA;;gBAFA;;gBACA;;gBAAgB;;gBAOhB;;gBACA;;gBAFoB;;gBAJpB;;;;AAYId,wBAAkB,6DAJ9B,gEAAU;AACPhC,gBAAQ,EAAE,YADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI8B,GAAlB+B,kBAAkB,CAAlB;;;;;;;;;;;;;;;;AChBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCMFyB,gBAAgB;AAAA;AAAA,Q;;AAAhBA,sBAAgB,6DAJ5B,gEAAU;AACPzD,gBAAQ,EAAE,SADH;AAEPC,gBAAQ,EAAE;AAFH,OAAV,CAI4B,GAAhBwD,gBAAgB,CAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAC,oBAAoB;AAC7B,sCAAoBzB,QAApB,EAAgDpE,OAAhD,EAAyE;AAAA;;AAArD,eAAAoE,QAAA,GAAAA,QAAA;AAA4B,eAAApE,OAAA,GAAAA,OAAA;AAA2B;AAE3E;;;;;;;AAH6B;AAAA;AAAA,iBAQtB,4BAAmB8F,KAAnB,EAAoC;AACvC;AACA,gBAAI,KAAK9F,OAAL,CAAa+F,aAAb,CAA2BD,KAA3B,CAAJ,EAAuC;AACnC,qBAAO,gDAAGjE,SAAH,CAAP;AACH;;AACD,gBAAMmE,KAAK,GAAG,KAAK5B,QAAL,CAAc6B,IAAd,CAAmB,qFAAnB,EAAkD;AAC5DC,yBAAW,EAAE;AAD+C,aAAlD,CAAd;AAGEF,iBAAK,CAACG,iBAAN,CAA0DL,KAA1D,GAAkEA,KAAlE;AACF,mBAAO,IAAI,+CAAJ,CAAe,UAAAM,QAAQ,EAAI;AAC9BJ,mBAAK,CAACzC,MAAN,CACK8C,IADL,CACU,YAAM;AACRD,wBAAQ,CAACnB,IAAT;AACAmB,wBAAQ,CAACE,QAAT;AACH,eAJL,WAKW,YAAM;AACTF,wBAAQ,CAACE,QAAT;AACH,eAPL;AAQH,aATM,CAAP;AAUH;AA3B4B;;AAAA;AAAA,S;;;;gBARxB;;gBAEA;;;;AAMIT,0BAAoB,6DAHhC,iEAAW;AACRtF,kBAAU,EAAE;AADJ,OAAX,CAGgC,GAApBsF,oBAAoB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCuBAU,gBAAgB;AAyBzB,kCACY3D,IADZ,EAEY2B,MAFZ,EAGY7D,WAHZ,EAIY8F,KAJZ,EAKYC,MALZ,EAMYxG,MANZ,EAOWyG,QAPX,EAQW1G,OARX,EASY2G,eATZ,EAUY9D,YAVZ,EAWWhC,SAXX,EAWsC;AAAA;;AAV1B,eAAA+B,IAAA,GAAAA,IAAA;AACA,eAAA2B,MAAA,GAAAA,MAAA;AACA,eAAA7D,WAAA,GAAAA,WAAA;AACA,eAAA8F,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAxG,MAAA,GAAAA,MAAA;AACD,eAAAyG,QAAA,GAAAA,QAAA;AACA,eAAA1G,OAAA,GAAAA,OAAA;AACC,eAAA2G,eAAA,GAAAA,eAAA;AACA,eAAA9D,YAAA,GAAAA,YAAA;AACD,eAAAhC,SAAA,GAAAA,SAAA;AAlCJ,eAAA8D,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AACA,eAAAiC,UAAA,GAAa,IAAI,4CAAJ,EAAb;AAIA,eAAA9F,SAAA,GAAY,KAAZ;AACA,eAAA+F,WAAA,GAAc,KAAd;AACA,eAAAC,eAAA,GAAkB,KAAlB;AACA,eAAAC,4BAAA,GAA+B,KAA/B;AAEA,eAAAC,oBAAA,GAAuB,0EAAvB;AAEA,eAAAC,MAAA,GAAS,yEAAT;AACA,eAAAC,mBAAA,GAAsB,sFAAtB;AACA,eAAAC,UAAA,GAAa,6EAAb;AACA,eAAAC,WAAA,GAAc,8EAAd;AACA,eAAAC,SAAA,GAAY,4EAAZ;AACA,eAAAC,OAAA,GAAU,0EAAV;AACA,eAAAC,YAAA,GAAe,+EAAf;AACA,eAAAC,qBAAA,GAAwB,wFAAxB;AACA,eAAAC,YAAA,GAAe,+EAAf;AACA,eAAAC,MAAA,GAAS,uEAAT;AAcH;;AArCqB;AAAA;AAAA,iBAuClB,oBAAQ;AAAA;;AACX,iBAAKC,kBAAL,GAA0B,KAAKhB,eAAL,CAAqBgB,kBAA/C;AACA,iBAAKC,WAAL,GAAmB,KAAKjB,eAAL,CAAqBkB,SAArB,CAA+B;AAC9CC,sBAAQ,EAAE,kBAAAC,QAAQ;AAAA,uBAAI,CAAC,MAAD,EAAS,QAAT,EAAmBC,QAAnB,CAA4BD,QAAQ,CAAC5C,IAArC,CAAJ;AAAA;AAD4B,aAA/B,CAAnB;AAGA,iBAAKR,aAAL,CAAmBtD,GAAnB,EACI;AACA,iBAAKuF,UAAL,CACKrF,IADL,CACU,iEAAU;AAAA,qBAAM,MAAI,CAACqB,IAAL,CAAUqF,GAAV,kBAA+B,MAAI,CAACjI,OAAL,CAAayB,IAAb,CAAkBC,EAAjD,EAAN;AAAA,aAAV,CADV,EAEKQ,SAFL,CAEe,UAAAT,IAAI,EAAI;AACf,oBAAI,CAACA,IAAL,GAAYA,IAAZ;AACH,aAJL,CAFJ;AAQA,iBAAKmF,UAAL,CAAgB3B,IAAhB;AACH;AArDwB;AAAA;AAAA,iBAuDlB,uBAAW;AACd,iBAAKN,aAAL,CAAmBzD,WAAnB;AACH;AAzDwB;AAAA;AAAA,iBA2DZ,4BAAgB;;;;;;;AACzB,6BAAM,KAAKjB,MAAL,CAAYiI,QAAZ,CAAqB,CAAC,SAAD,CAArB,CAAN;;;;;;;;;AACH;AA7DwB;AAAA;AAAA,iBA+DlB,sBAAazB,MAAb,EAAyB;AAAA;;AAC5B,iBAAKK,eAAL,GAAuB,IAAvB;AACA,iBAAKlE,IAAL,CACKuF,OADL,CACa,MADb,mBAC+B,KAAK1G,IAAL,CAAUC,EADzC,cACsD;AAC9C0G,kBAAI,EAAE3B,MADwC;AAE9CrD,qBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,+BAAeiF,kBAAkB,CAAC5B,MAAM,CAAC6B,IAAR,CADZ;AAErB,gCAAgB7B,MAAM,CAACtB;AAFF,eAAhB;AAFqC,aADtD,EAQK5D,IARL,CASQ,+DAAQ;AAAA,qBAAM,MAAI,CAACiF,KAAL,CAAW5C,OAAX,EAAN;AAAA,aAAR,CATR,EAUQ,gEAAS,YAAM;AACX,oBAAI,CAACkD,eAAL,GAAuB,KAAvB;AACH,aAFD,CAVR,EAcK5E,SAdL,CAce,YAAM;AACb,oBAAI,CAACuE,MAAL,CAAY8B,MAAZ;;AACA,oBAAI,CAAC3B,UAAL,CAAgB3B,IAAhB;;AACA,oBAAI,CAACV,MAAL,CAAYQ,OAAZ,CAAoB,MAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,wBAAvB,CAApB;AACH,aAlBL;AAmBH;AApFwB;AAAA;AAAA,iBAsFlB,wBAAY;AAAA;;AACf,iBAAKa,IAAL,4BACsB,KAAKnB,IAAL,CAAUC,EADhC,cAEKH,IAFL,CAEU,+DAAQ;AAAA,qBAAM,MAAI,CAACiF,KAAL,CAAW5C,OAAX,EAAN;AAAA,aAAR,CAFV,EAGK1B,SAHL,CAGe,YAAM;AACb,oBAAI,CAACuE,MAAL,CAAY8B,MAAZ;;AACA,oBAAI,CAAC3B,UAAL,CAAgB3B,IAAhB;AACH,aANL;AAOH;AA9FwB;AAAA;AAAA,iBAgGlB,oCAAwB;AAAA;;AAC3B,gBAAMuD,aAAa,GAAG,CAAC,KAAK/G,IAAL,CAAUgH,sBAAjC;AACA,iBAAK1B,4BAAL,GAAoC,IAApC;AACA,iBAAKpC,aAAL,CAAmBtD,GAAnB,CACI,KAAKX,WAAL,CACKgI,4BADL,CACkC,KAAKjH,IAAL,CAAUC,EAD5C,EACiD,KAAKD,IAAL,CAAUgH,sBAD3D,EAEKlH,IAFL,CAGQ,gEAAS,YAAM;AACX,qBAAI,CAACwF,4BAAL,GAAoC,KAApC;AACH,aAFD,CAHR,EAOK7E,SAPL,CAQQ,YAAM;AACF,qBAAI,CAAC0E,UAAL,CAAgB3B,IAAhB;;AACA,qBAAI,CAACV,MAAL,CAAYQ,OAAZ,CAAoB,OAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,oCAAvB,CAApB;AACH,aAXT,EAYQ,YAAM;AACF,qBAAI,CAACN,IAAL,CAAUgH,sBAAV,GAAmCD,aAAnC;AACH,aAdT,CADJ;AAkBH;AArHwB;AAAA;AAAA,iBAuHlB,iCAAwBT,QAAxB,EAA2C;AAAA;;AAC9C,iBAAKpD,aAAL,CAAmBtD,GAAnB,CACI,KAAKrB,OAAL,CAAa4E,UAAb,CACKrD,IADL,CAEQ,4DAAK,CAAL,CAFR,EAGQ,8DAAO,UAAAE,IAAI;AAAA,qBAAIA,IAAI,CAACkH,iBAAL,CAAuBC,IAAvB,KAAgCb,QAAQ,CAACa,IAA7C;AAAA,aAAX,CAHR,EAIQ,iEAAU,UAAAnH,IAAI;AAAA,qBAAI,OAAI,CAACf,WAAL,CAAiBmI,uBAAjB,CAAyCpH,IAAI,CAACC,EAA9C,EAAkDqG,QAAlD,CAAJ;AAAA,aAAd,CAJR,EAKQ,+DAAQ;AAAA,qBAAM,OAAI,CAAClF,YAAL,CAAkBe,OAAlB,EAAN;AAAA,aAAR,CALR,EAOK1B,SAPL,CAOe,YAAM;AACb,qBAAI,CAACqC,MAAL,CAAYQ,OAAZ,CAAoB,OAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,mCAAvB,CAApB;AACH,aATL,CADJ;AAYH;AApIwB;;AAAA;AAAA,S;;;;gBAhCpB;;gBAwBA;;gBAHA;;gBAIA;;gBALA;;gBAlBA;;gBAoBA;;gBACA;;gBAGA;;gBADA;;gBAVA;;;;AAiBIwE,sBAAgB,6DAJ5B,gEAAU;AACPpE,gBAAQ,EAAE,SADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI4B,GAAhBmE,gBAAgB,CAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCLAuC,aAAa;AAAA;AAAA,Q;;AAAbA,mBAAa,6DAdzB,+DAAS;AACNC,oBAAY,EAAE,CACV,4EADU,EAEV,oGAFU,EAGV,4FAHU,EAIV,iIAJU,EAKV,oGALU,EAMV,qGANU,EAOV,kGAPU,EAQV,oEARU,EASV,oGATU,CADR;AAYNC,eAAO,EAAE,CAAC,kEAAD,EAAe,4EAAf;AAZH,OAAT,CAcyB,GAAbF,aAAa,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCZAG,kBAAkB;AAK3B,oCACWjJ,OADX,EAEY4C,IAFZ,EAGYnC,oBAHZ,EAIYG,aAJZ,EAKY2D,MALZ,EAMW1D,SANX,EAMsC;AAAA;;AAL3B,eAAAb,OAAA,GAAAA,OAAA;AACC,eAAA4C,IAAA,GAAAA,IAAA;AACA,eAAAnC,oBAAA,GAAAA,oBAAA;AACA,eAAAG,aAAA,GAAAA,aAAA;AACA,eAAA2D,MAAA,GAAAA,MAAA;AACD,eAAA1D,SAAA,GAAAA,SAAA;AAVJ,eAAAC,SAAA,GAAY,KAAZ;AAEC,eAAA6D,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AASJ;;AAZuB;AAAA;AAAA,iBAcpB,uBAAW;AACd,iBAAKA,aAAL,CAAmBzD,WAAnB;AACH;AAhB0B;AAAA;AAAA,iBAkBpB,4BAAgB;AAAA;;AACnB,iBAAKyD,aAAL,CAAmBtD,GAAnB,CACI,KAAKZ,oBAAL,CACKa,kBADL,CACwB,kBADxB,EAEKC,IAFL,CAGQ,+DAAQ,YAAM;AACV,qBAAI,CAACT,SAAL,GAAiB,IAAjB;AACA,qBAAO,OAAI,CAAC8B,IAAL,CAAUE,IAAV,kBACO,OAAI,CAAC9C,OAAL,CAAayB,IAAb,CAAkBC,EADzB,GAEH;AACIA,kBAAE,EAAEqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADR;AAEIC,uBAAO,EAAE,KAFb;AAGIC,sBAAM,EAAE;AAHZ,eAFG,EAOH;AACIC,uBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,kCAAgB;AAAlB,iBAAhB;AADb,eAPG,CAAP;AAWH,aAbD,CAHR,EAiBQ,gEAAS,YAAM;AACX,qBAAI,CAACtC,SAAL,GAAiB,KAAjB;AACH,aAFD,CAjBR,EAqBKoB,SArBL,CAqBe,YAAM;AACb,qBAAI,CAACqC,MAAL,CAAYQ,OAAZ,CAAoB,OAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,wCAAvB,CAApB;;AACA,qBAAI,CAACnB,aAAL,CAAmBqB,MAAnB,GAA4BC,SAA5B,CAAsC;AAAA,uBAAML,SAAN;AAAA,eAAtC;AACH,aAxBL,CADJ;AA2BH;AA9C0B;;AAAA;AAAA,S;;;;gBAPtB;;gBARA;;gBAMA;;gBACA;;gBAEA;;gBAPA;;;;AAaIoH,wBAAkB,6DAJ9B,gEAAU;AACP9G,gBAAQ,EAAE,YADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI8B,GAAlB6G,kBAAkB,CAAlB;;;;;;;;;;;;;;;;ACfb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,UAAMC,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE,mEAFf;AAGIC,mBAAW,EAAE,CAAC,8EAAD,CAHjB;AAIIC,gBAAQ,EAAE,CACN;AAAEH,cAAI,EAAE,EAAR;AAAYI,oBAAU,EAAE,SAAxB;AAAmCC,mBAAS,EAAE;AAA9C,SADM,EAEN;AAAEL,cAAI,EAAE,SAAR;AAAmBC,mBAAS,EAAE;AAA9B,SAFM,EAGN;AAAED,cAAI,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SAHM,EAIN;AACID,cAAI,EAAE,SADV;AAEIC,mBAAS,EAAE,kGAFf;AAGIK,iBAAO,EAAE;AAAEC,gBAAI,EAAE;AAAR;AAHb,SAJM;AAJd,OADmB,CAAvB;;UAuBaC,oBAAoB;AAAA;AAAA,Q;;AAApBA,0BAAoB,6DALhC,+DAAS;AACNX,eAAO,EAAE,CAAC,6DAAaY,QAAb,CAAsBV,MAAtB,CAAD,CADH;AAENW,eAAO,EAAE,CAAC,4DAAD,CAFH;AAGNC,iBAAS,EAAE,CAAC,gGAAD;AAHL,OAAT,CAKgC,GAApBH,oBAAoB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCvBAI,mBAAmB;AAC5B,qCAAoBnH,IAApB,EAAsC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AAAoB;;AADZ;AAAA;AAAA,iBAGrB,2BAAkBiC,MAAlB,EAAgC;AACnC,mBAAO,KAAKjC,IAAL,CAAUqF,GAAV,kBAAuCpD,MAAvC,oBAAP;AACH;AAL2B;AAAA;AAAA,iBAOrB,8BAAqBA,MAArB,EAAmC;AACtC,mBAAO,KAAKjC,IAAL,CAAUqF,GAAV,kBAA+BpD,MAA/B,GAAyCtD,IAAzC,CAA8C,2DAAI,UAAA8B,QAAQ;AAAA,qBAAIA,QAAQ,CAACa,eAAb;AAAA,aAAZ,CAA9C,CAAP;AACH;AAT2B;;AAAA;AAAA,S;;;;gBATvB;;;;AASI6F,yBAAmB,6DAH/B,iEAAW;AACRxJ,kBAAU,EAAE;AADJ,OAAX,CAG+B,GAAnBwJ,mBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCaAC,uBAAuB;AAehC,yCACWhK,OADX,EAEWa,SAFX,EAGYyD,KAHZ,EAIYC,MAJZ,EAKY7D,WALZ,EAKoC;AAAA;;AAJzB,eAAAV,OAAA,GAAAA,OAAA;AACA,eAAAa,SAAA,GAAAA,SAAA;AACC,eAAAyD,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAA7D,WAAA,GAAAA,WAAA;AAnBL,eAAAuD,QAAA,GAA0B,EAA1B;AAEA,eAAAgG,qBAAA,GAAwB,IAAI,6CAAJ,EAAxB;AAEA,eAAAC,iBAAA,GAAoB,qEAApB;AACA,eAAAC,UAAA,GAAa,2EAAb;AAMC,eAAAC,GAAA,GAAM,IAAIC,IAAJ,EAAN;AACA,eAAA1F,aAAA,GAAgB,IAAI,kDAAJ,EAAhB;AAQJ;;AArB4B;AAAA;AAAA,eAQhC,eAAyB;AACrB,mBAAO,KAAKV,QAAL,CAAcqG,MAAd,GAAuB,CAAvB,GAA2B,mEAAU,kEAAS,KAAKrG,QAAL,CAAc,CAAd,EAAiBsG,WAA1B,CAAV,EAAkD,CAAlD,CAA3B,GAAkF,KAAKH,GAA9F;AACH;AAV+B;AAAA;AAAA,iBAuBzB,oBAAQ;AAAA;;AACX,iBAAK9F,KAAL,CAAWoF,IAAX,CAAgBxH,SAAhB,CAA0B,iBAAqD;AAAA,kBAAlDwH,IAAkD,SAAlDA,IAAkD;;AAC3E,kBAAIA,IAAJ,EAAU;AACN,uBAAI,CAACzF,QAAL,GAAgByF,IAAI,CAACzF,QAArB;AACA,uBAAI,CAACC,eAAL,GAAuBwF,IAAI,CAACxF,eAA5B;AACH;AACJ,aALD;AAMA,iBAAKS,aAAL,CAAmBtD,GAAnB,CACI,KAAK4I,qBAAL,CACK1I,IADL,CACU,kEAAU,UAAAwG,QAAQ;AAAA,qBAAI,OAAI,CAACrH,WAAL,CAAiB8J,qBAAjB,CAAuC,OAAI,CAACxK,OAAL,CAAayB,IAAb,CAAkBC,EAAzD,EAA6DqG,QAA7D,CAAJ;AAAA,aAAlB,CADV,EAEK7F,SAFL,CAEe,YAAM;AACb,qBAAI,CAACqC,MAAL,CAAYQ,OAAZ,CAAoB,OAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,0CAAvB,CAApB;AACH,aAJL,CADJ;AAOH;AArC+B;AAAA;AAAA,iBAuCzB,uBAAW;AACd,iBAAK4C,aAAL,CAAmBzD,WAAnB;AACH;AAzC+B;AAAA;AAAA,iBA2CzB,yBAAgBuJ,WAAhB,EAAwC;AAC3C,gBAAI,IAAI,mDAAJ,CAAcA,WAAW,CAACC,MAA1B,EAAkCC,EAAlC,CAAqC,CAArC,CAAJ,EAA6C;AACzC,qBAAO,MAAP;AACH;;AACD,gBAAI,CAACF,WAAW,CAACG,WAAjB,EAA8B;AAC1B,qBAAO,QAAP;AACH;;AACD,mBAAO,MAAP;AACH;AAnD+B;AAAA;AAAA,iBAqDzB,0BAAiBC,OAAjB,EAAqC;AACxC,gBAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AAClB;AACH;;AACDC,kBAAM,CAAC9E,IAAP,CAAY4E,OAAO,CAACC,OAAR,CAAgBE,SAA5B,EAAuC,QAAvC,EAAiD,UAAjD;AACH;AA1D+B;;AAAA;AAAA,S;;;;gBAV3B;;gBATA;;gBAFA;;gBAYA;;gBAFA;;;;AAWIhB,6BAAuB,6DAJnC,gEAAU;AACP7H,gBAAQ,EAAE,iBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAImC,GAAvB4H,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCLAiB,kBAAkB;AAW3B,oCACYxK,oBADZ,EAEYyK,MAFZ,EAGWlL,OAHX,EAIY4C,IAJZ,EAKWuI,YALX,EAMWtK,SANX,EAMsC;AAAA;;AAL1B,eAAAJ,oBAAA,GAAAA,oBAAA;AACA,eAAAyK,MAAA,GAAAA,MAAA;AACD,eAAAlL,OAAA,GAAAA,OAAA;AACC,eAAA4C,IAAA,GAAAA,IAAA;AACD,eAAAuI,YAAA,GAAAA,YAAA;AACA,eAAAtK,SAAA,GAAAA,SAAA;AAZJ,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAsK,KAAA,GAAQ,EAAR;AACC,eAAAC,WAAA,GAAc,IAAIC,GAAJ,EAAd;AAEA,eAAA3G,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AASJ;;AAlBuB;AAAA;AAAA,iBAoBpB,uBAAW;AACd,iBAAKyG,KAAL,GAAa,KAAK3J,IAAL,CAAU2J,KAAV,IAAmB,EAAhC;AACH;AAtB0B;AAAA;AAAA,iBAwBpB,uBAAW;AACd,iBAAKG,WAAL;AACA,iBAAK5G,aAAL,CAAmBzD,WAAnB;AACH;AA3B0B;AAAA;AAAA,iBA6BpB,kBAAM;AAAA;;AACT,gBAAI,CAAC,KAAKsK,SAAL,CAAepK,KAApB,EAA2B;AACvB,oBAAM,IAAIqK,KAAJ,CAAU,KAAK5K,SAAL,CAAekB,OAAf,CAAuB,qBAAvB,CAAV,CAAN;AACH;;AACD,iBAAKwJ,WAAL;AACA,iBAAK5G,aAAL,CAAmBtD,GAAnB,CACI,KAAKZ,oBAAL,CACKa,kBADL,CACwB,kBADxB,EAEKC,IAFL,CAGQ,+DAAQ,YAAM;AACV,qBAAI,CAACT,SAAL,GAAiB,IAAjB;AACA,qBAAO,OAAI,CAAC8B,IAAL,CAAUE,IAAV,kBACO,OAAI,CAACrB,IAAL,CAAUC,EADjB,GAEH;AACIA,kBAAE,EAAEqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADR;AAEIC,uBAAO,EAAE,KAFb;AAGIC,sBAAM,EAAE,uBAHZ;AAIIuI,sBAAM,EAAE;AACJN,uBAAK,EAAE,OAAI,CAACA;AADR;AAJZ,eAFG,EAUH;AACIhI,uBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,kCAAgB;AAAlB,iBAAhB;AADb,eAVG,CAAP;AAcH,aAhBD,CAHR,EAoBQ,gEAAS,YAAM;AACX,qBAAI,CAACtC,SAAL,GAAiB,KAAjB;AACH,aAFD,CApBR,EAwBKoB,SAxBL,CAyBQ,YAAM;AACF,qBAAI,CAACgJ,MAAL,CAAYnG,OAAZ,CAAoB,OAAI,CAAClE,SAAL,CAAekB,OAAf,CAAuB,+CAAvB,CAApB;;AACA,qBAAI,CAACqJ,KAAL,GAAa,EAAb;;AACA,qBAAI,CAACI,SAAL,CAAeG,SAAf;AACH,aA7BT,EA8BQ,UAAAC,KAAK,EAAI;AACL,kBAAIA,KAAK,CAACpI,MAAN,KAAiB,GAArB,EAA0B;AACtB,uBAAI,CAAC6H,WAAL,CAAiBhK,GAAjB,CACI,OAAI,CAAC8J,YAAL,CAAkB9J,GAAlB,CAAsB;AAClBS,yBAAO,EAAE,OAAI,CAACjB,SAAL,CAAekB,OAAf,CACL,qDADK,CADS;AAIlBC,0BAAQ,EAAE;AAJQ,iBAAtB,CADJ;AAQH;AACJ,aAzCT,CADJ;AA6CH;AA/E0B;AAAA;AAAA,iBAiFnB,uBAAW;AAAA,uDACU,KAAKqJ,WADf;AAAA;;AAAA;AACf,kEAA2C;AAAA,oBAAhCQ,UAAgC;AACvCA,0BAAU,CAACC,OAAX;AACH;AAHc;AAAA;AAAA;AAAA;AAAA;AAIlB;AArF0B;;AAAA;AAAA,S;;;;gBATtB;;gBAGA;;gBADA;;gBAVA;;gBASA;;gBANA;;;;;;gBAeJ,uD;AAAS,iBAAC,WAAD;;;gBAET;;;AAHQb,wBAAkB,6DAJ9B,gEAAU;AACP9I,gBAAQ,EAAE,YADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI8B,GAAlB6I,kBAAkB,CAAlB","file":"account-account-module-es5.js","sourcesContent":["export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div *ngIf=\\\"user.twoFactor\\\">\\n        <div class=\\\"circle-loader load-complete\\\">\\n            <div class=\\\"checkmark draw\\\"></div>\\n        </div>\\n        <h3 class=\\\"text-center\\\">{{ 'two-factor.two-factor-authentication-has-been-enabled' | translate }}</h3>\\n    </div>\\n    <div *ngIf=\\\"!user.twoFactor && !twoFactor\\\">\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"btn btn-primary btn-w-sm e2e-generate-2fa-secret\\\"\\n            (click)=\\\"generate2FASecret()\\\"\\n            [ngClass]=\\\"{ loading: isLoading }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n        >\\n            {{ 'common.enable-2fa' | translate }}\\n        </button>\\n    </div>\\n    <form\\n        name=\\\"twoFactor\\\"\\n        #verificationForm=\\\"ngForm\\\"\\n        class=\\\"form-validation\\\"\\n        (ngSubmit)=\\\"toggleTwoFactorAuth(!user.twoFactor)\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n        *ngIf=\\\"(!user.twoFactor && !!twoFactor) || user.twoFactor\\\"\\n    >\\n        <div *ngIf=\\\"!user.twoFactor\\\">\\n            <img [src]=\\\"twoFactor!.qrCode\\\" class=\\\"mx-auto d-block img-thumbnail p-0 mb-2 e2e-2fa-qr\\\" />\\n            <p class=\\\"text-center e2e-2fa-secret\\\">\\n                {{ 'common.or-enter-this-code' | translate }} <b class=\\\"text-info\\\">{{ twoFactor!.secret }}</b>\\n            </p>\\n            <div class=\\\"alert alert-info\\\">\\n                {{ 'common.scan-this-code-with-your-auth-app' | translate }}\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"user.twoFactor\\\" class=\\\"callout callout-info bg-white\\\">\\n            {{ 'two-factor.to-disable-two-factor-authentication' | translate }}\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"!user.twoFactor\\\">\\n            <label for=\\\"verificationCode\\\">{{ 'common.verification-code' | translate }}</label>\\n            <input type=\\\"type\\\" id=\\\"verificationCode\\\" name=\\\"verificationCode\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"verificationCode\\\" number />\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            <span>{{ (user.twoFactor ? 'common.disable-2fa' : 'common.verify-code') | translate }}</span>\\n        </button>\\n    </form>\\n</ng-container>\\n\";","export default \"<form\\n    #emailForm=\\\"ngForm\\\"\\n    class=\\\"form-validation e2e-email-form\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': emailForm.submitted }\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"alert alert-{{ alert.severity || 'danger' }} alert-dismissible\\\" role=\\\"alert\\\" *ngFor=\\\"let alert of alertService.alerts\\\">\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"alertService.remove(alert)\\\">\\n            <span>&times;</span>\\n        </button>\\n        {{ alert.message }}\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">{{ 'common.email' | translate }}</label>\\n        <input\\n            type=\\\"email\\\"\\n            id=\\\"email\\\"\\n            name=\\\"email\\\"\\n            class=\\\"form-control\\\"\\n            [placeholder]=\\\"'common.enter-email' | translate\\\"\\n            [(ngModel)]=\\\"email\\\"\\n            #emailInput=\\\"ngModel\\\"\\n            email\\n            required\\n        />\\n        <div *ngIf=\\\"emailInput.invalid && (emailForm.submitted || emailInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.change-email' | translate }}\\n    </button>\\n</form>\\n\";","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Component, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap, tap } from 'rxjs/operators'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { AlertService } from '../../../common/services/alert.service'\nimport { UserService } from '../../../common/services/core/user.service'\nimport { LogoutService } from '../../../common/services/logout.service'\nimport { SessionService } from '../../../common/services/session.service'\n\n@Component({\n    selector: 'change-password-form',\n    templateUrl: 'change-password-form.component.html',\n})\nexport class ChangePasswordFormComponent implements OnDestroy {\n    @ViewChild('changePasswordForm')\n    public changePasswordForm: NgForm\n    public password: string\n    public repeatedPassword: string\n    public isLoading = false\n\n    public requiredPasswordStrength = 60\n    public passwordStrength = 0\n\n    private subcriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private securityCheckService: SecurityCheckService,\n        private userService: UserService,\n        private alert: AlertService,\n        private logoutService: LogoutService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subcriptions.unsubscribe()\n    }\n\n    public submitSecurityForm(): void {\n        if (!this.changePasswordForm.valid) {\n            return\n        }\n\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.userService.changePassword(this.session.user.id, this.password)\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    }),\n                    tap(() => {\n                        // the refreshtoken is invalidated on password change\n                        this.session.refreshToken = undefined\n                        this.alert.add({\n                            message: this.translate.instant('common.your-password-has-been-successfully-changed'),\n                            severity: 'success',\n                        })\n                    }),\n                    flatMap(() => this.logoutService.logout())\n                )\n                .subscribe()\n        )\n    }\n}\n","import { Component } from '@angular/core'\nimport { faLockAlt, faMobile, faShieldAlt, faUsers, faKey } from '@fortawesome/pro-light-svg-icons'\nimport { SessionService } from '../../common/services/session.service'\n\n@Component({\n    selector: 'account-security',\n    templateUrl: 'account-security.component.html',\n})\nexport class AccountSecurityComponent {\n    public faLockAlt = faLockAlt\n    public faShieldAlt = faShieldAlt\n    public faMobile = faMobile\n    public faUsers = faUsers\n    public faKey = faKey\n    constructor(public session: SessionService) {}\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.profile' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.profile' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container pb-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"headline\\\">{{ 'common.email-address' | translate }}</div>\\n            <div class=\\\"row e2e-email-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'common.change-email' | translate }}</h6>\\n                            <p>{{ 'profile.you-have-to-confirm-your-new-email-address' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <email-form *ngIf=\\\"user\\\" [user]=\\\"user\\\"></email-form>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.preferred-currency' | translate }}</div>\\n            <div class=\\\"row e2e-currency-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faCoin\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <p>{{ 'profile.preselect-your-balance' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"currency\\\">{{ 'common.preferred-currency' | translate }}</label>\\n                            <ng-select\\n                                [items]=\\\"currencies$ | async\\\"\\n                                [placeholder]=\\\"'common.select-currency' | translate\\\"\\n                                name=\\\"currency\\\"\\n                                id=\\\"currency\\\"\\n                                [clearable]=\\\"false\\\"\\n                                [ngModel]=\\\"preferredCurrency$ | async\\\"\\n                                (ngModelChange)=\\\"changePreferredCurrency($event)\\\"\\n                                required\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\"> {{ item.code }} - {{ item.name }} </ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\"> {{ item.code }} - {{ item.name }} </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.information' | translate }}</div>\\n            <div class=\\\"row e2e-information-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faUserCheck\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.update-details' | translate }}</h6>\\n                            <p>{{ 'profile.to-update-any-of-your-account-details' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\" *ngIf=\\\"user\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"name\\\">{{ 'common.name' | translate }}</label>\\n                            <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" class=\\\"form-control\\\" [value]=\\\"user.name\\\" disabled />\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"phoneNumber\\\">{{ 'common.phone-number' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                id=\\\"phoneNumber\\\"\\n                                name=\\\"phoneNumber\\\"\\n                                class=\\\"form-control\\\"\\n                                [value]=\\\"user.phoneNumber ? toCountryCallingCode(user.phoneCountryCode!) + ' ' + user.phoneNumber : '-'\\\"\\n                                disabled\\n                            />\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label>{{ 'common.address' | translate }}</label>\\n                            <postal-address [address]=\\\"user.address\\\" theme=\\\"input\\\"></postal-address>\\n                        </div>\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"btn btn-primary\\\"\\n                            (click)=\\\"\\n                                user.approvedAt\\n                                    ? intercom.startConversation(translate.instant('common.update-my-personal-profile-details'))\\n                                    : goToVerification()\\n                            \\\"\\n                        >\\n                            {{ 'profile.update-details' | translate }}\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.avatar' | translate }}</div>\\n            <div class=\\\"row e2e-avatar-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faImage\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.upload-avatar' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.when-not-providing-an-avatar' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <user-avatar [user]=\\\"user\\\" size=\\\"xl\\\" elementClass=\\\"d-block mb-2\\\"></user-avatar>\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"btn btn-primary mr-1 e2e-upload-avatar\\\"\\n                            ngfSelect\\n                            (fileChange)=\\\"!avatarUploading && uploadAvatar($event)\\\"\\n                            [fileDropDisabled]=\\\"!user?.id\\\"\\n                            [disabled]=\\\"avatarUploading\\\"\\n                            [ngClass]=\\\"{ loading: avatarUploading }\\\"\\n                        >\\n                            {{ 'profile.choose-file' | translate }}\\n                        </button>\\n                        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"deleteAvatar()\\\" [disabled]=\\\"avatarUploading\\\" *ngIf=\\\"!!user?.avatar?.id\\\">\\n                            {{ 'profile.remove-avatar' | translate }}\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.notifications' | translate }}</div>\\n            <div class=\\\"row e2e-notifications-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.receive-notifications' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.receive-email-notifications-on-various-activities' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <div *ngIf=\\\"user\\\" class=\\\"custom-controls-stacked\\\">\\n                            <label class=\\\"custom-control custom-checkbox\\\">\\n                                <input\\n                                    type=\\\"checkbox\\\"\\n                                    class=\\\"custom-control-input\\\"\\n                                    name=\\\"sendEmailNotifications\\\"\\n                                    [(ngModel)]=\\\"user.sendEmailNotifications\\\"\\n                                    (ngModelChange)=\\\"updateEmailNotifications()\\\"\\n                                    [disabled]=\\\"isEmailNotificationsUpdating\\\"\\n                                />\\n                                <span class=\\\"custom-control-label font-md\\\"> {{ 'common.receive-email-notifications' | translate }} </span>\\n                            </label>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <ng-container>\\n                <div class=\\\"headline\\\">{{ 'profile.close-account' | translate }}</div>\\n                <div class=\\\"row e2e-close-account-section\\\">\\n                    <div class=\\\"col-lg-9\\\">\\n                        <div class=\\\"media media-info pr-2\\\">\\n                            <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faExclamationTriangle\\\"></fa-icon>\\n                            <div class=\\\"media-body pt-0\\\">\\n                                <h6 class=\\\"mt-0\\\">{{ 'common.important-notice' | translate }}</h6>\\n                                <p>{{ 'common.write-us-a-message-if-you-wish' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-15\\\">\\n                        <div class=\\\"form-block max-width-md\\\">\\n                            <button\\n                                type=\\\"button\\\"\\n                                class=\\\"btn btn-danger\\\"\\n                                (click)=\\\"intercom.startConversation(translate.instant('common.i-would-like-to-close-my-account'))\\\"\\n                            >\\n                                {{ 'profile.request-account-closing' | translate }}\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </ng-container>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <ng-container *ngIf=\\\"user.twoFactor; else noAccess\\\">\\n        <div class=\\\"d-flex justify-content-end mb-3\\\">\\n            <ngb-pagination\\n                [(page)]=\\\"page\\\"\\n                [collectionSize]=\\\"count\\\"\\n                (pageChange)=\\\"select()\\\"\\n                [pageSize]=\\\"limit\\\"\\n                [maxSize]=\\\"5\\\"\\n                [ellipses]=\\\"false\\\"\\n                [rotate]=\\\"true\\\"\\n                [boundaryLinks]=\\\"true\\\"\\n            >\\n            </ngb-pagination>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-bordered table-data\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">{{ 'common.public-key' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'common.created-at' | translate | titlecase }}</th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody class=\\\"bg-white\\\">\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <tr *ngFor=\\\"let apiToken of items\\\">\\n                            <th scope=\\\"row\\\">\\n                                {{ apiToken.publicKey }}\\n                            </th>\\n                            <td scope=\\\"row\\\">{{ apiToken.createdAt | date: 'medium' }}</td>\\n                            <td class=\\\"action\\\">\\n                                <a href class=\\\"btn btn-danger-air btn-sm\\\" (click)=\\\"revoke(apiToken); $event.preventDefault()\\\">{{\\n                                    'common.revoke' | translate\\n                                }}</a>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"items.length === 0\\\">\\n                            <td colspan=\\\"3\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                        </tr>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n        <button class=\\\"btn btn-primary\\\" [ngClass]=\\\"{ loading: isLoading }\\\" (click)=\\\"generate()\\\">{{ 'common.generate' | translate }}</button>\\n    </ng-container>\\n</ng-container>\\n<ng-template #noAccess>\\n    <div class=\\\"text-center\\\">\\n        <h4 class=\\\"m-0\\\">{{ 'common.you-dont-have-access-to-this-feature' | translate }}</h4>\\n        <img src=\\\"/img/icons/lock.svg\\\" class=\\\"img-sm my-3\\\" />\\n        <p class=\\\"text-body\\\">{{ 'common.please-enable-2fa-to-access-this-feature' | translate }}</p>\\n    </div>\\n</ng-template>\\n\";","export default \"<form\\n    #changePasswordForm=\\\"ngForm\\\"\\n    class=\\\"form-validation\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': changePasswordForm.submitted }\\\"\\n    (ngSubmit)=\\\"submitSecurityForm()\\\"\\n    novalidate\\n>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">{{ 'change-password-form.new-password' | translate }}</label>\\n        <input\\n            type=\\\"password\\\"\\n            id=\\\"password\\\"\\n            name=\\\"password\\\"\\n            class=\\\"form-control\\\"\\n            [(ngModel)]=\\\"password\\\"\\n            #passwordInput=\\\"ngModel\\\"\\n            [passwordStrength]=\\\"requiredPasswordStrength\\\"\\n            (onEntropyChange)=\\\"passwordStrength = $event\\\"\\n            autocomplete=\\\"off\\\"\\n            required\\n        />\\n        <div class=\\\"mt-2\\\">\\n            <password-strength-bar [requiredStrength]=\\\"requiredPasswordStrength\\\" [strength]=\\\"passwordStrength\\\"></password-strength-bar>\\n        </div>\\n        <div *ngIf=\\\"passwordInput.invalid && (changePasswordForm.submitted || passwordInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.weakPassword\\\">{{ 'common.password-is-too-weak' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"repeatedPassword\\\">{{ 'change-password-form.repeat-password' | translate }}</label>\\n        <input\\n            type=\\\"password\\\"\\n            id=\\\"repeatedPassword\\\"\\n            name=\\\"repeatedPassword\\\"\\n            class=\\\"form-control\\\"\\n            [(ngModel)]=\\\"repeatedPassword\\\"\\n            #repeatedPasswordInput=\\\"ngModel\\\"\\n            [matchPassword]=\\\"password\\\"\\n            autocomplete=\\\"off\\\"\\n            required\\n        />\\n        <div *ngIf=\\\"repeatedPasswordInput.invalid && (changePasswordForm.submitted || repeatedPasswordInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.matchPassword\\\">\\n                {{ 'common.password-do-not-match' | translate }}\\n            </div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.change-password' | translate }}\\n    </button>\\n</form>\\n\";","export default \"<button class=\\\"btn btn-danger\\\" (click)=\\\"logoutAllDevices()\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n    {{ 'logout-all.logged-out-from-all-devices' | translate }}\\n</button>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap, tap } from 'rxjs/operators'\nimport { RPCResult, TwoFactorRPCResult } from '../../../common/api-interfaces'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { UserService } from '../../../common/services/core/user.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { TokenService } from '../../../common/services/token.service'\n\n@Component({\n    selector: 'two-factor',\n    templateUrl: 'two-factor.component.html',\n})\nexport class TwoFactorComponent implements OnDestroy {\n    @ViewChild('verificationForm')\n    public verificationForm: NgForm\n    public twoFactor: TwoFactorRPCResult | null\n    public verificationCode: number | null\n\n    public isLoading = false\n\n    private subcriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private http: HttpClient,\n        private securityCheckService: SecurityCheckService,\n        private tokenService: TokenService,\n        private userService: UserService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subcriptions.unsubscribe()\n    }\n\n    public generate2FASecret(): void {\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    flatMap(() =>\n                        this.http.post<RPCResult<TwoFactorRPCResult>>(\n                            `/users/${this.session.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'generate2FASecret',\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    ),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(response => {\n                    this.twoFactor = response.result\n                })\n        )\n    }\n\n    public toggleTwoFactorAuth(status: boolean): void {\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    flatMap(() =>\n                        this.userService.changeTwoFactor(\n                            this.session.user.id,\n                            status,\n                            this.verificationCode\n                                ? {\n                                      'X-2FA-Code': this.verificationCode?.toString(),\n                                  }\n                                : {}\n                        )\n                    ),\n                    flatMap(() => this.tokenService.refresh()),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.verificationCode = null\n                    this.twoFactor = null\n                })\n        )\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { Resolve } from '@angular/router'\nimport { EMPTY, forkJoin, Observable } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { AccountBill, ICurrency } from '../../common/api-interfaces'\nimport { AccountBillsService } from '../../common/services/account-billing.service'\nimport { SessionService } from '../../common/services/session.service'\n\nexport interface AccountBillingResolvedData {\n    payments: AccountBill[]\n    billingCurrency: ICurrency\n}\n\n@Injectable()\nexport class AccountBillingResolver implements Resolve<AccountBillingResolvedData> {\n    constructor(private accountBills: AccountBillsService, private session: SessionService) {}\n\n    public resolve(): Observable<AccountBillingResolvedData> {\n        return forkJoin([\n            this.accountBills.fetchAccountBills(this.session.user.id),\n            this.accountBills.fetchBillingCurrency(this.session.user.id),\n        ]).pipe(\n            catchError(() => EMPTY),\n            map(([payments, billingCurrency]) => ({\n                payments,\n                billingCurrency,\n            }))\n        )\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { filter, finalize, flatMap, take } from 'rxjs/operators'\nimport { ApiToken } from 'src/app/common/api-interfaces'\nimport { ListV2Component } from 'src/app/common/list-v2.component'\nimport { ConfirmationResult, ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { ToastrService } from 'src/app/common/services/toastr.service'\n\n@Component({\n    selector: 'api-tokens',\n    templateUrl: 'api-tokens.component.html',\n})\nexport class ApiTokensComponent extends ListV2Component<ApiToken> implements OnInit, OnDestroy {\n    public defaultLimit = 5\n    public isLoading = false\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session)\n    }\n\n    public ngOnInit(): void {\n        this.apiUrl = `/users/${this.session.user.id}/api-tokens`\n        super.ngOnInit()\n    }\n\n    public generate(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    flatMap(user =>\n                        this.http.post<ApiToken & { privateKey: string }>(`/api-tokens`, { userId: user.id })\n                    ),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(apiToken => {\n                    this.toastr.success(this.translate.instant('api-tokens.api-token-generated'))\n                    this.updateEvent.next()\n                    this.confirmation\n                        .show({\n                            type: 'warning',\n                            title: this.translate.instant('common.important'),\n                            text: `\n                        ${this.translate.instant('common.please-keep-this-private-key')}\n                        <br>\n                        <b>${apiToken.privateKey}</b>\n                        <br>${this.translate.instant('common.this-cannot-be-retrieved-once-lost')}\n                    `,\n                            confirmText: 'Understood',\n                            showCancel: false,\n                        })\n                        .subscribe()\n                })\n        )\n    }\n\n    public revoke(apiToken: ApiToken): void {\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    title: this.translate.instant('common.revoke-api-token'),\n                    text: `${this.translate.instant(\n                        'common.are-you-sure-want-to-revoke-this-token'\n                    )} <b>${this.translate.instant('common.it-cannot-be-undone')}<b>`,\n                    confirmText: this.translate.instant('common.revoke'),\n                    confirmClass: 'danger',\n                    showCancel: false,\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.http.delete(`/api-tokens/${apiToken.publicKey}`))\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.api-token-revoked'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.billing' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.billing' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pb-4 e2e-account-billing\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"headline\\\">{{ 'account-billing.account-billing' | translate }}</div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-lg-9\\\">\\n                        <div class=\\\"media media-info pr-2\\\">\\n                            <div class=\\\"media-body pt-0\\\">\\n                                <h6 class=\\\"mt-0\\\">{{ 'common.payment' | translate }}</h6>\\n                                <p>{{ 'account-billing.manage-account-fee-payments' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-15\\\">\\n                        <table class=\\\"table\\\">\\n                            <tr>\\n                                <td class=\\\"b-t-0\\\">{{ 'account-billing.next-payment-amount' | translate }}</td>\\n                                <td class=\\\"b-t-0\\\">\\n                                    <b\\n                                        ><fee-preview\\n                                            [currency]=\\\"billingCurrency\\\"\\n                                            [type]=\\\"'account-fee'\\\"\\n                                            [method]=\\\"'internal'\\\"\\n                                            [amount]=\\\"'0.0'\\\"\\n                                            [prefix]=\\\"true\\\"\\n                                        ></fee-preview\\n                                    ></b>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{ 'account-billing.next-payment-due' | translate }}</td>\\n                                <td>\\n                                    <b>{{ !!session.user.approvedAt ? (nextPaymentDue | date: 'mediumDate') : '-' }}</b>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{ 'account-billing.billing-currency' | translate }}</td>\\n                                <td>\\n                                    <currency-select\\n                                        [currencyTypes]=\\\"['fiat', 'crypto']\\\"\\n                                        [(currency)]=\\\"billingCurrency\\\"\\n                                        [user]=\\\"user\\\"\\n                                        (currencyChange)=\\\"billingCurrencyChange.next($event)\\\"\\n                                    ></currency-select>\\n                                </td>\\n                            </tr>\\n                        </table>\\n                    </div>\\n                </div>\\n                <div class=\\\"headline\\\">{{ 'account-billing.previous-statements' | translate }}</div>\\n                <table class=\\\"table mb-0 account-bills-table\\\" *ngIf=\\\"payments.length > 0; else noEntries\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>\\n                                <b>{{ 'common.id' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.date' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.amount' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.settled-amount' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.receipt' | translate }}</b>\\n                            </th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr\\n                            *ngFor=\\\"let payment of payments\\\"\\n                            class=\\\"e2e-account-bill\\\"\\n                            [ngClass]=\\\"{ 'table-danger': determineStatus(payment) === 'unpaid' }\\\"\\n                        >\\n                            <td\\n                                [ngClass]=\\\"{\\n                                    'text-danger': determineStatus(payment) === 'unpaid',\\n                                    'text-monospace': determineStatus(payment) !== 'unpaid'\\n                                }\\\"\\n                            >\\n                                {{ determineStatus(payment) !== 'unpaid' ? (payment.id | truncate: false:8:'') : 'Outstanding' }}\\n                            </td>\\n                            <td>{{ payment.invoiceDate | date: 'mediumDate' }}</td>\\n                            <td>\\n                                <b *ngIf=\\\"determineStatus(payment) !== 'free'; else freeCharge\\\"\\n                                    >{{ payment.amount | amount: payment.currency.decimalPlaces }} {{ payment.currency.code }}</b\\n                                >\\n                            </td>\\n                            <td>\\n                                <span class=\\\"font-weight-bold\\\" *ngIf=\\\"determineStatus(payment) === 'paid'; else unsettled\\\">\\n                                    {{ payment.transaction.fixedFee | amount: payment.transaction.currency.decimalPlaces }}\\n                                    {{ payment.transaction.currency.code }}</span\\n                                >\\n                                <ng-template #unsettled>\\n                                    <span *ngIf=\\\"determineStatus(payment) === 'unpaid'; else freeCharge\\\" class=\\\"text-muted\\\">{{\\n                                        'common.unpaid' | translate\\n                                    }}</span>\\n                                </ng-template>\\n                            </td>\\n                            <td>\\n                                <a\\n                                    href\\n                                    (click)=\\\"payment.invoice && openInvoiceModal(payment); $event.preventDefault()\\\"\\n                                    [ngClass]=\\\"{ 'text-muted': !payment.invoice }\\\"\\n                                    [ngbTooltip]=\\\"!payment.invoice ? 'Not available' : undefined\\\"\\n                                    >{{ 'common.download' | translate }}</a\\n                                >\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <ng-template #noEntries>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col d-flex justify-content-center align-items-center h-100\\\">\\n                            <div class=\\\"px-sm-3 w-100 max-width-sm text-center mb-0\\\">\\n                                <img src=\\\"/img/icons/refresh.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                <h4 class=\\\"mb-1\\\">{{ 'common.no-previous-bills' | translate }}</h4>\\n                                <p class=\\\"mb-0 text-gray\\\">{{ 'common.account-bills-are-charged-per-month' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\\n<ng-template #freeCharge>\\n    <b class=\\\"text-success text-uppercase\\\">{{ 'common.free' | translate }}</b>\\n</ng-template>\\n\";","import { Component } from '@angular/core'\n\n@Component({\n    selector: 'account',\n    template: '<router-outlet></router-outlet>',\n})\nexport class AccountComponent {}\n","import { Injectable } from '@angular/core'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { SessionService, TokenScope } from '../services/session.service'\nimport { ConfirmPasswordModalComponent } from './confirm-password.modal'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SecurityCheckService {\n    constructor(private ngbModal: NgbModal, private session: SessionService) {}\n\n    /**\n     * Asks the user for permission to do something that requires a higher scope than basic\n     * Resolves if the check was successful or the permission is still granted from another request\n     * @param scope The required scope\n     */\n    public getScopePermission(scope: TokenScope): Observable<void> {\n        // Resolve if token has already the correct scope\n        if (this.session.hasTokenScope(scope)) {\n            return of(undefined)\n        }\n        const modal = this.ngbModal.open(ConfirmPasswordModalComponent, {\n            windowClass: 'modal-primary security-check-modal',\n        })\n        ;(modal.componentInstance as ConfirmPasswordModalComponent).scope = scope\n        return new Observable(observer => {\n            modal.result\n                .then(() => {\n                    observer.next()\n                    observer.complete()\n                })\n                .catch(() => {\n                    observer.complete()\n                })\n        })\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { faBell } from '@fortawesome/pro-light-svg-icons'\nimport {\n    faCoin,\n    faEnvelope,\n    faExclamationCircle,\n    faExclamationTriangle,\n    faFileAlt,\n    faImage,\n    faInfoCircle,\n    faUniversity,\n    faUserCheck,\n} from '@fortawesome/pro-regular-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable, Subject, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, switchMap, take } from 'rxjs/operators'\nimport { ICurrency, IUser } from '../../common/api-interfaces'\nimport { toCountryCallingCode } from '../../common/common.mixin'\nimport { AvatarService } from '../../common/services/avatar.service'\nimport { UserService } from '../../common/services/core/user.service'\nimport { IntercomService } from '../../common/services/intercom.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { TokenService } from '../../common/services/token.service'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\n\n@Component({\n    selector: 'profile',\n    templateUrl: 'profile.component.html',\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n    public user: Partial<IUser>\n    public subscriptions = new Subscription()\n    public fetchEvent = new Subject<void>()\n    public currencies$: Observable<ICurrency[]>\n    public preferredCurrency$: Observable<ICurrency>\n\n    public isLoading = false\n    public isUploading = false\n    public avatarUploading = false\n    public isEmailNotificationsUpdating = false\n\n    public toCountryCallingCode = toCountryCallingCode\n\n    public faCoin = faCoin\n    public faExclamationCircle = faExclamationCircle\n    public faEnvelope = faEnvelope\n    public faUserCheck = faUserCheck\n    public faFileAlt = faFileAlt\n    public faImage = faImage\n    public faInfoCircle = faInfoCircle\n    public faExclamationTriangle = faExclamationTriangle\n    public faUniversity = faUniversity\n    public faBell = faBell\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private userService: UserService,\n        private token: TokenService,\n        private avatar: AvatarService,\n        private router: Router,\n        public intercom: IntercomService,\n        public session: SessionService,\n        private currenciesQuery: CurrenciesQuery,\n        private tokenService: TokenService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.preferredCurrency$ = this.currenciesQuery.preferredCurrency$\n        this.currencies$ = this.currenciesQuery.selectAll({\n            filterBy: currency => ['fiat', 'crypto'].includes(currency.type),\n        })\n        this.subscriptions.add(\n            // todo: might need a reloader here?\n            this.fetchEvent\n                .pipe(switchMap(() => this.http.get<IUser>(`/users/${this.session.user.id}`)))\n                .subscribe(user => {\n                    this.user = user\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public async goToVerification(): Promise<void> {\n        await this.router.navigate(['/verify'])\n    }\n\n    public uploadAvatar(avatar: File): void {\n        this.avatarUploading = true\n        this.http\n            .request('POST', `/users/${this.user.id}/avatar`, {\n                body: avatar,\n                headers: new HttpHeaders({\n                    'X-File-Name': encodeURIComponent(avatar.name),\n                    'Content-Type': avatar.type,\n                }),\n            })\n            .pipe(\n                flatMap(() => this.token.refresh()),\n                finalize(() => {\n                    this.avatarUploading = false\n                })\n            )\n            .subscribe(() => {\n                this.avatar.reload()\n                this.fetchEvent.next()\n                this.toastr.success(this.translate.instant('profile.avatar-updated'))\n            })\n    }\n\n    public deleteAvatar(): void {\n        this.http\n            .delete(`/users/${this.user.id}/avatar`)\n            .pipe(flatMap(() => this.token.refresh()))\n            .subscribe(() => {\n                this.avatar.reload()\n                this.fetchEvent.next()\n            })\n    }\n\n    public updateEmailNotifications(): void {\n        const previousState = !this.user.sendEmailNotifications\n        this.isEmailNotificationsUpdating = true\n        this.subscriptions.add(\n            this.userService\n                .changeSendEmailNotifications(this.user.id!, this.user.sendEmailNotifications!)\n                .pipe(\n                    finalize(() => {\n                        this.isEmailNotificationsUpdating = false\n                    })\n                )\n                .subscribe(\n                    () => {\n                        this.fetchEvent.next()\n                        this.toastr.success(this.translate.instant('common.email-notifications-updated'))\n                    },\n                    () => {\n                        this.user.sendEmailNotifications = previousState\n                    }\n                )\n        )\n    }\n\n    public changePreferredCurrency(currency: ICurrency): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    filter(user => user.preferredCurrency.code !== currency.code),\n                    switchMap(user => this.userService.changePreferredCurrency(user.id, currency)),\n                    flatMap(() => this.tokenService.refresh())\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.preferred-currency-changed'))\n                })\n        )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { AccountBillingComponent } from './account-billing/account-billing.component'\nimport { AccountRoutingModule } from './account-routing.module'\nimport { AccountSecurityComponent } from './account-security/account-security.component'\nimport { ApiTokensComponent } from './account-security/api-tokens/api-tokens.component'\nimport { ChangePasswordFormComponent } from './account-security/change-password-form/change-password-form.component'\nimport { LogoutAllComponent } from './account-security/logout-all/logout-all.component'\nimport { TwoFactorComponent } from './account-security/two-factor/two-factor.component'\nimport { AccountComponent } from './account.component'\nimport { EmailFormComponent } from './profile/email-form/email-form.component'\nimport { ProfileComponent } from './profile/profile.component'\n\n@NgModule({\n    declarations: [\n        ProfileComponent,\n        TwoFactorComponent,\n        EmailFormComponent,\n        ChangePasswordFormComponent,\n        LogoutAllComponent,\n        AccountSecurityComponent,\n        AccountBillingComponent,\n        AccountComponent,\n        ApiTokensComponent,\n    ],\n    imports: [CommonModule, AccountRoutingModule],\n})\nexport class AccountModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy } from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap } from 'rxjs/operators'\nimport { RPCResult } from '../../../common/api-interfaces'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { LogoutService } from '../../../common/services/logout.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'logout-all',\n    templateUrl: 'logout-all.component.html',\n})\nexport class LogoutAllComponent implements OnDestroy {\n    public isLoading = false\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private http: HttpClient,\n        private securityCheckService: SecurityCheckService,\n        private logoutService: LogoutService,\n        private toastr: ToastrService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public logoutAllDevices(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.http.post<RPCResult<void>>(\n                            `/users/${this.session.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'logoutAllDevices',\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('logout-all.logged-out-from-all-devices'))\n                    this.logoutService.logout().subscribe(() => undefined)\n                })\n        )\n    }\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.security' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.security' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container pb-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"headline\\\">{{ 'common.password' | translate }}</div>\\n            <div class=\\\"row e2e-reset-password\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'common.change-password' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.your-password-passphrases' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <change-password-form></change-password-form>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'account-security.2-factor-authentication' | translate }}</div>\\n            <div class=\\\"row e2e-two-factor\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faMobile\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'account-security.increase-security' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.we-recommend-using-2-factor-authentication' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <two-factor></two-factor>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.logout-from-all-devices' | translate }}</div>\\n            <div class=\\\"row e2e-logout-all-devices\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faShieldAlt\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'account-security.clear-all-sessions' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.use-this-feature' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <logout-all></logout-all>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { AccountBillingComponent } from './account-billing/account-billing.component'\nimport { AccountBillingResolver } from './account-billing/account-billing.resolver'\nimport { AccountSecurityComponent } from './account-security/account-security.component'\nimport { AccountComponent } from './account.component'\nimport { ProfileComponent } from './profile/profile.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AccountComponent,\n        canActivate: [LoggedInAuthGuard],\n        children: [\n            { path: '', redirectTo: 'profile', pathMatch: 'full' },\n            { path: 'profile', component: ProfileComponent },\n            { path: 'security', component: AccountSecurityComponent },\n            {\n                path: 'billing',\n                component: AccountBillingComponent,\n                resolve: { data: AccountBillingResolver },\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [AccountBillingResolver],\n})\nexport class AccountRoutingModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { AccountBill, ICurrency, IUser } from '../../common/api-interfaces'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccountBillsService {\n    constructor(private http: HttpClient) {}\n\n    public fetchAccountBills(userId: string): Observable<AccountBill[]> {\n        return this.http.get<AccountBill[]>(`/users/${userId}/account-bills`)\n    }\n\n    public fetchBillingCurrency(userId: string): Observable<ICurrency> {\n        return this.http.get<IUser>(`/users/${userId}`).pipe(map(response => response.billingCurrency))\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { faUserPlus } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { currencySymbolMap } from 'currency-symbol-map'\nimport addMonths from 'date-fns/addMonths'\nimport parseISO from 'date-fns/parseISO'\nimport { Subject, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { AccountBill, ICurrency } from '../../common/api-interfaces'\nimport { UserService } from '../../common/services/core/user.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { AccountBillingResolvedData } from './account-billing.resolver'\n\ntype AccountBillStatus = 'free' | 'unpaid' | 'paid'\n\n@Component({\n    selector: 'account-billing',\n    templateUrl: 'account-billing.component.html',\n})\nexport class AccountBillingComponent implements OnInit, OnDestroy {\n    public payments: AccountBill[] = []\n    public billingCurrency: ICurrency\n    public billingCurrencyChange = new Subject<ICurrency>()\n\n    public currencySymbolMap = currencySymbolMap\n    public faUserPlus = faUserPlus\n\n    public get nextPaymentDue(): Date {\n        return this.payments.length > 0 ? addMonths(parseISO(this.payments[0].invoiceDate), 1) : this.now\n    }\n\n    private now = new Date()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        public translate: TranslateService,\n        private route: ActivatedRoute,\n        private toastr: ToastrService,\n        private userService: UserService\n    ) {}\n\n    public ngOnInit(): void {\n        this.route.data.subscribe(({ data }: { data?: AccountBillingResolvedData }) => {\n            if (data) {\n                this.payments = data.payments\n                this.billingCurrency = data.billingCurrency\n            }\n        })\n        this.subscriptions.add(\n            this.billingCurrencyChange\n                .pipe(switchMap(currency => this.userService.changeBillingCurrency(this.session.user.id, currency)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('account-billing.billing-currency-updated'))\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public determineStatus(accountBill: AccountBill): AccountBillStatus {\n        if (new BigNumber(accountBill.amount).eq(0)) {\n            return 'free'\n        }\n        if (!accountBill.transaction) {\n            return 'unpaid'\n        }\n        return 'paid'\n    }\n\n    public openInvoiceModal(payment: AccountBill): void {\n        if (!payment.invoice) {\n            return\n        }\n        window.open(payment.invoice.signedUrl, '_blank', 'noopener')\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap } from 'rxjs/operators'\nimport { IUser, RPCResult } from '../../../common/api-interfaces'\nimport { Disposable } from '../../../common/disposable'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { AlertService } from '../../../common/services/alert.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'email-form',\n    templateUrl: 'email-form.component.html',\n})\nexport class EmailFormComponent implements OnDestroy, OnChanges {\n    @ViewChild('emailForm')\n    public emailForm: NgForm\n    @Input()\n    public user: IUser\n    public isLoading = false\n    public email = ''\n    private disposables = new Set<Disposable>()\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private securityCheckService: SecurityCheckService,\n        private Toastr: ToastrService,\n        public session: SessionService,\n        private http: HttpClient,\n        public alertService: AlertService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnChanges(): void {\n        this.email = this.user.email || ''\n    }\n\n    public ngOnDestroy(): void {\n        this.clearAlerts()\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (!this.emailForm.valid) {\n            throw new Error(this.translate.instant('common.form-invalid'))\n        }\n        this.clearAlerts()\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.http.post<RPCResult<void>>(\n                            `/users/${this.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'sendEmailConfirmation',\n                                params: {\n                                    email: this.email!,\n                                },\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(\n                    () => {\n                        this.Toastr.success(this.translate.instant('email-form.email-sent-please-check-your-inbox'))\n                        this.email = ''\n                        this.emailForm.resetForm()\n                    },\n                    error => {\n                        if (error.status === 409) {\n                            this.disposables.add(\n                                this.alertService.add({\n                                    message: this.translate.instant(\n                                        'common.the-email-is-already-used-by-another-account'\n                                    ),\n                                    severity: 'danger',\n                                })\n                            )\n                        }\n                    }\n                )\n        )\n    }\n\n    private clearAlerts(): void {\n        for (const disposable of this.disposables) {\n            disposable.dispose()\n        }\n    }\n}\n"]}