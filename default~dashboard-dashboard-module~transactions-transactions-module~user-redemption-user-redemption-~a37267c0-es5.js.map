{"version":3,"sources":["webpack:///src/app/common/user-transactions/user-transactions.module.ts","webpack:///src/app/common/user-transactions/user-transactions.component.html","webpack:///src/app/common/user-transactions/user-transactions.component.ts"],"names":["UserTransactionsModule","declarations","exports","imports","UserTransactionsComponent","http","ngbModal","changeDetector","route","router","session","confirmation","transactionService","toastr","calendar","translate","statuses","methods","types","appName","typeMap","conversion","trade","deposit","investment","transfer","withdrawal","reverse","redeem","mint","payment","invoice","currencies","displayName","transactionsLoading","Set","faPlus","faMinus","faCalendarAlt","faEllipsisV","appColor","getComputedStyle","document","body","getPropertyValue","trim","lighten","min","Math","toStartCase","calculateFee","calculateDeductableAmount","apiQuery","defaultLimit","limitOpts","model","fromDate","year","Date","getFullYear","month","day","toDate","getToday","get","params","limit","subscribe","response","data","subscriptions","add","paramMap","pipe","has","transaction","modal","viewTransaction","closeHook","navigate","result","then","searchEvent","selectSearchInput","queryParamMap","searchElement","nativeElement","focus","select","userStream","user","apiUrl","id","type","isReceiver","instant","method","currency","code","beautifyMethod","buildAccountHolder","baseWallet","isPlatformTransfer","counterWallet","beneficiary","accountHolder","accountNumber","maskedPan","card","slice","options","open","windowClass","transactionView","componentInstance","activeTab","onCancel","dismiss","updateEvent","next","onUpdate","item","changeStatus","success","show","text","confirmText","cancelText","cancelClass","CONFIRMED","toUpperCase","baseTransactionId","counterTransactionId","q","fileType","createSignedUrl","signedUrl","window","parseNgbdate","price","times","quantity","toFixed","changeEvent","date","allocationsStream","fetchAllocation","conversionsStream","fetchConversion","tradeStream","fetchTrade","wallet","name","selector","template"],"mappings":"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","file":"default~dashboard-dashboard-module~transactions-transactions-module~user-redemption-user-redemption-~a37267c0-es5.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { TransactionModule } from '../transaction/transaction.module'\nimport { UserTransactionsComponent } from './user-transactions.component'\n\n@NgModule({\n    declarations: [UserTransactionsComponent],\n    exports: [UserTransactionsComponent],\n    imports: [CommonModule, TransactionModule],\n})\nexport class UserTransactionsModule {}\n","export default \"<ng-container *ngIf=\\\"!router.isActive('/dashboard', false)\\\">\\n    <div class=\\\"container pt-page\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.transactions' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.transactions' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"mb-3\\\">\\n            <div class=\\\"row align-items-center\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            #searchElement\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-7 d-flex align-items-center\\\">\\n                    <div>\\n                        <span>{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span>\\n                        <span class=\\\"ml-3\\\"\\n                            ><a href (click)=\\\"isFilterOptionsCollapsed = !isFilterOptionsCollapsed; $event.preventDefault()\\\"\\n                                >{{ isFilterOptionsCollapsed ? '+' : '-' }} {{ 'common.filter-options' | translate }}</a\\n                            ></span\\n                        >\\n                    </div>\\n                </div>\\n                <div class=\\\"col pt-3 pt-md-0 d-flex justify-content-end\\\">\\n                    <div ngbDropdown class=\\\"d-inline-block mr-2\\\" container=\\\"body\\\">\\n                        <button class=\\\"btn btn-primary-air\\\" id=\\\"dropdownReport\\\" ngbDropdownToggle>{{ 'common.export-statement' | translate }}</button>\\n                        <div ngbDropdownMenu aria-labelledby=\\\"dropdownReport\\\">\\n                            <div class=\\\"px-2 py-1\\\">\\n                                <p class=\\\"mb-1\\\">{{ 'common.select-date-range' | translate }}</p>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"fromDate\\\">{{ 'common.from' | translate }}</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input\\n                                            class=\\\"form-control\\\"\\n                                            placeholder=\\\"yyyy-mm-dd\\\"\\n                                            name=\\\"fromDate\\\"\\n                                            [(ngModel)]=\\\"fromDate\\\"\\n                                            ngbDatepicker\\n                                            #dfromDate=\\\"ngbDatepicker\\\"\\n                                        />\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <button class=\\\"btn btn-default calendar\\\" (click)=\\\"dfromDate.toggle()\\\" type=\\\"button\\\">\\n                                                <fa-icon [icon]=\\\"faCalendarAlt\\\"></fa-icon>\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"toDate\\\">{{ 'common.to' | translate | lowercase }}</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input\\n                                            class=\\\"form-control\\\"\\n                                            placeholder=\\\"yyyy-mm-dd\\\"\\n                                            name=\\\"toDate\\\"\\n                                            [(ngModel)]=\\\"toDate\\\"\\n                                            ngbDatepicker\\n                                            #dtoDate=\\\"ngbDatepicker\\\"\\n                                        />\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <button class=\\\"btn btn-default calendar\\\" (click)=\\\"dtoDate.toggle()\\\" type=\\\"button\\\">\\n                                                <fa-icon [icon]=\\\"faCalendarAlt\\\"></fa-icon>\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"btn-group w-100\\\">\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-primary-air\\\" (click)=\\\"downloadReport('pdf')\\\">.PDF</button>\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-secondary-air\\\" (click)=\\\"downloadReport('xls')\\\">.XLS</button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <a class=\\\"btn btn-secondary-air mr-2\\\" [routerLink]=\\\"['/deposit']\\\">\\n                        <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.deposit' | translate }}\\n                    </a>\\n                    <a class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                        <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faMinus\\\"></fa-icon> {{ 'common.withdraw' | translate }}\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div [ngbCollapse]=\\\"isFilterOptionsCollapsed\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\" *ngIf=\\\"!getDefaultQuery().type?.eq\\\">\\n                        <label for=\\\"type\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.type' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"type\\\"\\n                                name=\\\"type\\\"\\n                                [items]=\\\"types\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-type' | translate\\\"\\n                                [ngModel]=\\\"queryParams['type']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['type']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\">{{ $any(typeMap)[item] }}</ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span>{{ $any(typeMap)[item] }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n                        <label for=\\\"method\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.method' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"method\\\"\\n                                name=\\\"method\\\"\\n                                [items]=\\\"methods\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-method' | translate\\\"\\n                                [ngModel]=\\\"queryParams['method']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['method']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span class=\\\"text-uppercase\\\">{{ toStartCase(item) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label for=\\\"currency\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.currency' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"currencyCode\\\"\\n                                name=\\\"currencyCode\\\"\\n                                bindLabel=\\\"code\\\"\\n                                bindValue=\\\"code\\\"\\n                                [items]=\\\"currencies\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-currency' | translate\\\"\\n                                [ngModel]=\\\"queryParams['currencyCode']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['currencyCode']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span class=\\\"text-uppercase\\\">{{ toStartCase(item.code) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\">\\n                        <label for=\\\"status\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.status' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"status\\\"\\n                                name=\\\"status\\\"\\n                                [items]=\\\"statuses\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-status' | translate\\\"\\n                                [ngModel]=\\\"queryParams['status']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['status']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span>{{ toStartCase(item) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.amount' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"amountFrom\\\"\\n                                        name=\\\"amountFrom\\\"\\n                                        [placeholder]=\\\"'common.from' | translate\\\"\\n                                        [ngModel]=\\\"queryParams['amount']['gte']\\\"\\n                                        (ngModelChange)=\\\"queryParams['amount']['gte'] = $event; searchEvent.next()\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"amountTo\\\"\\n                                        name=\\\"amountTo\\\"\\n                                        [placeholder]=\\\"'common.to' | translate\\\"\\n                                        [ngModel]=\\\"queryParams['amount']['lte']\\\"\\n                                        (ngModelChange)=\\\"queryParams['amount']['lte'] = $event; searchEvent.next()\\\"\\n                                    />\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.created-at' | translate | titlecase }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"createdAtFrom\\\"\\n                                        name=\\\"createdAtFrom\\\"\\n                                        [placeholder]=\\\"queryParams['createdAt']['gte'] || ('common.from' | translate)\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['createdAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"createdAtFrom\\\"\\n                                        [owlDateTimeTrigger]=\\\"createdAtFrom\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"createdAtTo\\\"\\n                                        name=\\\"createdAtTo\\\"\\n                                        [placeholder]=\\\"queryParams['createdAt']['lte'] || 'To'\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['createdAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"createdAtTo\\\"\\n                                        [owlDateTimeTrigger]=\\\"createdAtTo\\\"\\n                                    />\\n                                </div>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtFrom></owl-date-time>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtTo></owl-date-time>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.settled-at' | translate | titlecase }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"settledAtFrom\\\"\\n                                        name=\\\"settledAtFrom\\\"\\n                                        [placeholder]=\\\"queryParams['settledAt']['gte'] || ('common.from' | translate)\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['settledAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"settledAtFrom\\\"\\n                                        [owlDateTimeTrigger]=\\\"settledAtFrom\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"settledAtTo\\\"\\n                                        name=\\\"settledAtTo\\\"\\n                                        [placeholder]=\\\"queryParams['settledAt']['lte'] || 'To'\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['settledAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"settledAtTo\\\"\\n                                        [owlDateTimeTrigger]=\\\"settledAtTo\\\"\\n                                    />\\n                                </div>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #settledAtFrom></owl-date-time>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #settledAtTo></owl-date-time>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n<div class=\\\"container\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">\\n            {{ 'common.transactions' | translate }}\\n            <div class=\\\"card-menu\\\" *ngIf=\\\"router.isActive('/dashboard', false)\\\">\\n                <a class=\\\"font-lg\\\" [routerLink]=\\\"['/transactions']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n            </div>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.subject' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['counterWallet', 'id']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['counterWallet', 'id'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['counterWallet', 'id']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                            {{ 'common.amount' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['amount']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/wallet.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.get-started' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">\\n                                            {{ 'common.load-funds' | translate }} {{ displayName }} {{ 'common.account' | translate | lowercase }}.\\n                                        </p>\\n                                        <a class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/deposit']\\\">\\n                                            {{ 'common.make-deposit' | translate }}\\n                                        </a>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr\\n                                *ngFor=\\\"let transaction of items\\\"\\n                                class=\\\"clickable bg-white e2e-user-transaction transaction-row\\\"\\n                                (click)=\\\"viewTransaction(transaction)\\\"\\n                                [ngClass]=\\\"{ 'text-muted': transaction.status !== 'completed' }\\\"\\n                            >\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <ng-container\\n                                            *ngIf=\\\"\\n                                                transaction.type === 'deposit' ||\\n                                                    transaction.type === 'withdrawal' ||\\n                                                    transaction.type === 'card-order' ||\\n                                                    transaction.type === 'conversion' ||\\n                                                    transaction.type === 'trade' ||\\n                                                    transaction.type === 'account-fee' ||\\n                                                    transaction.type === 'investment';\\n                                                else avatar\\n                                            \\\"\\n                                        >\\n                                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                            <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                                <svg\\n                                                    class=\\\"img-avatar\\\"\\n                                                    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                    xml:space=\\\"preserve\\\"\\n                                                    text-rendering=\\\"geometricPrecision\\\"\\n                                                    style=\\\"\\n                                                        shape-rendering: geometricPrecision;\\n                                                        image-rendering: optimizeQuality;\\n                                                        fill-rule: evenodd;\\n                                                        clip-rule: evenodd;\\n                                                    \\\"\\n                                                    viewBox=\\\"0 0 120 120\\\"\\n                                                >\\n                                                    <g>\\n                                                        <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                        <text\\n                                                            font-weight=\\\"500\\\"\\n                                                            font-size=\\\"3.25em\\\"\\n                                                            font-family=\\\"sans-serif\\\"\\n                                                            fill=\\\"#ffffff\\\"\\n                                                            x=\\\"50%\\\"\\n                                                            y=\\\"50%\\\"\\n                                                            text-anchor=\\\"middle\\\"\\n                                                            dy=\\\"0.35em\\\"\\n                                                        >\\n                                                            {{ formatType(transaction.type) }}\\n                                                        </text>\\n                                                    </g>\\n                                                </svg>\\n                                            </div>\\n                                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        </ng-container>\\n                                        <ng-template #avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"!isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.counterWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.baseWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                        </ng-template>\\n                                        <div>\\n                                            <div>{{ buildBeautifiedType(transaction) }}</div>\\n                                            <ng-container *ngIf=\\\"!['conversion', 'investment', 'trade'].includes(transaction.type); else addon\\\">\\n                                                <span\\n                                                    [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\"\\n                                                    [innerHtml]=\\\"determineSubject(transaction)\\\"\\n                                                ></span>\\n                                            </ng-container>\\n                                            <ng-template #addon>\\n                                                <ng-container *ngIf=\\\"$any(transaction).allocationsStream | async; let allocations\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{ allocations[0]?.product?.name }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ allocations[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).conversionsStream | async; let conversions\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? conversions[0]?.baseTransaction?.currency?.name\\n                                                                : conversions[0]?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ conversions[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).tradeStream | async; let trades\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? trades[0]?.counterTransaction?.currency?.name\\n                                                                : trades[0]?.baseTransaction?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ trades[0]?.id | truncate: false:7:'' }}</span>\\n                                                        <span\\n                                                            [ngClass]=\\\"\\n                                                                !queryParams['currencyCode']['or']?.length\\n                                                                    ? isReceiver(transaction)\\n                                                                        ? 'tx-marker down'\\n                                                                        : 'tx-marker up'\\n                                                                    : ''\\n                                                            \\\"\\n                                                        ></span>\\n                                                    </span>\\n                                                </ng-container>\\n                                            </ng-template>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td class=\\\"text-right\\\">\\n                                    <span\\n                                        [ngClass]=\\\"\\n                                            transaction.status !== 'completed' ? 'text-muted' : isReceiver(transaction) ? 'text-green' : 'text-danger'\\n                                        \\\"\\n                                        >{{ isReceiver(transaction) ? '' : '-'\\n                                        }}{{\\n                                            (isReceiver(transaction) ? transaction.settledAmount : calculateDeductableAmount(transaction))\\n                                                | amount: transaction.currency.decimalPlaces\\n                                        }}\\n                                        {{ transaction.currency.code }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label\\\"\\n                                        [ngClass]=\\\"{\\n                                            'label-success': transaction.status === 'completed',\\n                                            'label-info': transaction.status === 'pending',\\n                                            'label-warning': transaction.status === 'processing',\\n                                            'label-danger': ['cancelled', 'failed'].indexOf(transaction.status) !== -1\\n                                        }\\\"\\n                                        >{{ transaction.status }}</span\\n                                    >\\n                                </td>\\n                                <td>{{ transaction.createdAt | date: 'medium' }}</td>\\n                                <td class=\\\"action pr-4 text-right\\\">\\n                                    <button\\n                                        type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-success\\\"\\n                                        [ngClass]=\\\"{ loading: transactionsLoading.has(transaction.id) }\\\"\\n                                        [disabled]=\\\"transactionsLoading.has(transaction.id)\\\"\\n                                        *ngIf=\\\"transaction.type === 'deposit' && transaction.status === 'pending'\\\"\\n                                        (click)=\\\"$event.stopPropagation(); markAsPaid(transaction)\\\"\\n                                    >\\n                                        {{ 'common.mark-as-paid' | translate }}\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                        >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                    >\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\";","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faCalendarAlt, faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { faMinus, faPlus } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbDateStruct, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbCalendar } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport * as Color from 'color'\nimport { capitalize } from 'lodash'\nimport { merge, Observable } from 'rxjs'\nimport { delay, filter, finalize, flatMap, map, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport {\n    Allocation,\n    ICurrency,\n    IUser,\n    Paginated,\n    Trade,\n    TransactionMethod,\n    TransactionType,\n    Wallet,\n} from '../api-interfaces'\nimport { toStartCase } from '../common.mixin'\nimport { ListComponent } from '../list.component'\nimport { Conversion } from '../models/accounting/conversion.model'\nimport { Transaction } from '../models/accounting/transaction.model'\nimport { User } from '../models/core/user.model'\nimport { ConfirmationResult, ConfirmationService } from '../services/confirmation.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { TransactionService } from '../services/transaction.service'\nimport { TransactionViewComponent } from '../transaction/transaction-view/transaction-view.component'\nimport { buildWalletOwnerAccountNumber, calculateDeductableAmount, calculateFee } from '../transactions.mixins'\n\n@Component({\n    selector: 'user-transactions',\n    templateUrl: 'user-transactions.component.html',\n})\nexport class UserTransactionsComponent extends ListComponent<Transaction> implements OnInit, AfterViewInit {\n    public user: IUser | null\n    public statuses = ['pending', 'processing', 'completed', 'cancelled', 'failed']\n    public methods: TransactionMethod[] = ['card', 'crypto', 'internal', 'local', 'swift']\n    public types: TransactionType[] =\n        environment.appName === 'sgpmx'\n            ? ['card-order', 'trade', 'deposit', 'payment', 'transfer', 'withdrawal']\n            : [\n                  'card-order',\n                  'conversion',\n                  'trade',\n                  'deposit',\n                  'investment',\n                  'payment',\n                  'account-fee',\n                  'transfer',\n                  'withdrawal',\n              ]\n    public typeMap: { [K in TransactionType]: string } = {\n        'card-order': 'Card Order',\n        conversion: 'Conversion',\n        trade: 'Buy & Sell',\n        deposit: 'Deposit',\n        investment: 'Investment',\n        'account-fee': 'Account Fee',\n        transfer: 'Transfer',\n        withdrawal: 'Withdrawal',\n        reverse: 'Reverse',\n        redeem: 'Redemption',\n        mint: 'Mint',\n        payment: 'Payment',\n        'invoice-p2p': 'Invoice P2P',\n        invoice: 'Invoice',\n    }\n    public currencies: ICurrency[] = []\n\n    public appName = environment.appName\n    public displayName = environment.displayName\n    public transactionsLoading = new Set<string>()\n    public faPlus = faPlus\n    public faMinus = faMinus\n    public faCalendarAlt = faCalendarAlt\n    public faEllipsisV = faEllipsisV\n\n    public fromDate: NgbDateStruct\n    public toDate: NgbDateStruct\n\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n    public min = Math.min\n    public toStartCase = toStartCase\n    public calculateFee = calculateFee\n    public calculateDeductableAmount = calculateDeductableAmount\n\n    @ViewChild('searchElement') public searchElement: ElementRef\n\n    protected apiQuery = ['amount', 'type', 'method', 'currencyCode', 'status', 'settledAt', 'createdAt']\n    protected defaultLimit = this.limitOpts[1]\n    protected model = Transaction\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private transactionService: TransactionService,\n        private toastr: ToastrService,\n        public calendar: NgbCalendar,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n        this.fromDate = { year: new Date().getFullYear(), month: 1, day: 1 }\n        this.toDate = this.calendar.getToday()\n        this.http.get<Paginated<ICurrency>>('/currencies', { params: { limit: 100 + '' } }).subscribe(response => {\n            this.currencies = response.data\n        })\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.subscriptions.add(\n            this.route.paramMap\n                .pipe(\n                    filter(params => params.has('transactionId')),\n                    flatMap(params => this.http.get<Transaction>(`/transactions/${params.get('transactionId')}`))\n                )\n                .subscribe(transaction => {\n                    const modal = this.viewTransaction(transaction)\n                    const closeHook = () => this.router.navigate(['/transactions'])\n                    modal.result.then(closeHook, closeHook)\n                })\n        )\n    }\n\n    public ngAfterViewInit(): void {\n        this.subscriptions.add(\n            this.transactionService.searchEvent.subscribe(() => {\n                this.selectSearchInput()\n            })\n        )\n        this.subscriptions.add(\n            this.route.queryParamMap.subscribe(params => {\n                if (params.has('searchFocus')) {\n                    this.selectSearchInput()\n                }\n            })\n        )\n    }\n\n    public selectSearchInput(): void {\n        if (this.searchElement) {\n            this.searchElement.nativeElement.focus()\n            this.searchElement.nativeElement.select()\n        }\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            delay(0),\n            take(1),\n            tap(user => {\n                this.user = new User(user)\n                this.apiUrl = `/users/${user.id}/transactions`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public buildBeautifiedType(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'transfer':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.transfer-from')\n                }\n                return this.translate.instant('common.transfer-to')\n            case 'deposit':\n                return transaction.method === 'card'\n                    ? this.translate.instant('common.unload-from')\n                    : this.translate.instant('common.deposit-from')\n            case 'withdrawal':\n                if (transaction.method === 'card') {\n                    return this.translate.instant('common.topup-to')\n                }\n                return this.translate.instant('common.withdrawal-to')\n            case 'card-order':\n            case 'account-fee':\n            case 'payment':\n                return this.translate.instant('common.payment-to')\n            case 'conversion':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.conversion-from')\n                }\n                return this.translate.instant('common.conversion-to')\n            case 'trade':\n                if (this.isReceiver(transaction)) {\n                    return transaction.currency.code === 'USD'\n                        ? this.translate.instant('common.credit')\n                        : this.translate.instant('common.buy')\n                }\n                return transaction.currency.code === 'USD'\n                    ? this.translate.instant('common.debit')\n                    : this.translate.instant('common.sell')\n            case 'investment':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.investment-from')\n                }\n                return this.translate.instant('common.investment-to')\n            case 'invoice-p2p':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.invoice-to')\n                }\n                return this.translate.instant('common.invoice-from')\n            case 'invoice':\n                return this.translate.instant('common.invoice-from')\n            default:\n                return capitalize(transaction.type)\n        }\n    }\n\n    public determineSubject(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'card-order':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.card'\n                )}</span>`\n            case 'account-fee':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.account-fee'\n                )}</span>`\n            case 'deposit':\n            case 'withdrawal':\n                return this.beautifyMethod(transaction)\n            case 'payment':\n                return environment.displayName\n            case 'invoice-p2p':\n                return this.buildAccountHolder(transaction.baseWallet!)\n            case 'transfer':\n                if (transaction.isPlatformTransfer()) {\n                    return environment.displayName\n                } else if (this.isReceiver(transaction)) {\n                    return this.buildAccountHolder(transaction.baseWallet!)\n                }\n            // eslint-disable-next-line no-fallthrough\n            default:\n                return this.buildAccountHolder(transaction.counterWallet!)\n        }\n    }\n\n    public beautifyMethod(transaction: Transaction): string {\n        switch (transaction.method) {\n            case 'local':\n            case 'swift':\n                if (\n                    transaction.type === 'withdrawal' &&\n                    transaction.beneficiary &&\n                    transaction.beneficiary.accountHolder &&\n                    transaction.beneficiary.accountNumber\n                ) {\n                    return `${transaction.beneficiary.accountHolder} <span class=\"text-muted\">/ ${transaction.beneficiary.accountNumber}</span>`\n                }\n                return `${\n                    this.user?.type === 'business'\n                        ? this.translate.instant('common.corporate')\n                        : this.translate.instant('common.personal')\n                } ${this.translate.instant('common.bank-account')}`\n            case 'card':\n                const maskedPan = transaction.card?.maskedPan\n                return (\n                    'Card' +\n                    (maskedPan\n                        ? ` <span class=\"text-muted\">/ ${maskedPan.slice(0, 4)} ${maskedPan.slice(\n                              4,\n                              8\n                          )} ${maskedPan.slice(8, 12)} ${maskedPan.slice(12)} </span>`\n                        : '')\n                )\n            default:\n                return capitalize(transaction.method)\n        }\n    }\n\n    public isReceiver(transaction: Transaction): boolean {\n        return (\n            !!transaction.counterWallet &&\n            !!transaction.counterWallet.user &&\n            !!this.user &&\n            transaction.counterWallet.user.id === this.user.id\n        )\n    }\n\n    public viewTransaction(\n        transaction: Transaction,\n        options: { activeTab?: 'overview' | 'beneficiary' | 'attachments' } = {}\n    ): NgbModalRef {\n        const modal = this.ngbModal.open(TransactionViewComponent, {\n            windowClass: 'modal-primary',\n        })\n        const transactionView = modal.componentInstance as TransactionViewComponent\n        transactionView.transaction = { ...transaction }\n        if (!!options.activeTab) {\n            transactionView.activeTab = options.activeTab\n        }\n\n        transactionView.onCancel.subscribe(() => {\n            modal.dismiss()\n            this.updateEvent.next()\n        })\n\n        transactionView.onUpdate.subscribe(() => {\n            this.updateEvent.next()\n        })\n\n        return modal\n    }\n\n    public markAsPaid(item: Transaction): void {\n        if (item.method === 'crypto') {\n            this.viewTransaction(item)\n            return\n        }\n        this.transactionsLoading.add(item.id)\n        this.transactionService\n            .changeStatus(item.id, 'processing')\n            .pipe(\n                finalize(() => {\n                    this.transactionsLoading.delete(item.id)\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.deposit-mark-as-paid'))\n                this.updateEvent.next()\n\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'success',\n                            text: this.translate.instant('common.thank-you-for-notifying'),\n                            confirmText: this.translate.instant('common.i-will-upload-a-receipt'),\n                            cancelText: this.translate.instant('common.i-will-do-it-later'),\n                            cancelClass: 'warning',\n                        })\n                        .subscribe(result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.viewTransaction(item, { activeTab: 'attachments' })\n                            }\n                        })\n                )\n            })\n    }\n\n    public formatType(type: TransactionType): string {\n        return type.slice(0, 1).toUpperCase()\n    }\n\n    public fetchAllocation(transaction: Transaction): Observable<Allocation[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Allocation[]>(`/users/${user!.id}/allocations`, {\n                    params: {\n                        baseTransactionId: transaction.id,\n                        counterTransactionId: transaction.id,\n                        q: 'or',\n                    },\n                })\n            )\n        )\n    }\n\n    public fetchConversion(transaction: Transaction): Observable<Conversion[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Conversion[]>(`/users/${user!.id}/conversions`, {\n                    params: {\n                        baseTransactionId: transaction.id,\n                        counterTransactionId: transaction.id,\n                        q: 'or',\n                    },\n                })\n            )\n        )\n    }\n\n    public fetchTrade(transaction: Transaction): Observable<Trade[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Paginated<Trade>>(\n                    `/users/${user.id}/${environment.appName === 'sgpmx' ? 'trades' : 'spot-trades'}`,\n                    {\n                        params: {\n                            'filter.baseTransactionId': transaction.id,\n                            'filter.counterTransactionId': transaction.id,\n                            'filter.q': 'or',\n                        },\n                    }\n                )\n            ),\n            map(response => response.data)\n        )\n    }\n\n    public downloadReport(fileType: string): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(flatMap(user => this.session.createSignedUrl(`/users/${user.id}/transactions/statement`)))\n                .subscribe(signedUrl => {\n                    window.open(\n                        `${signedUrl}&from=${this.parseNgbdate(this.fromDate)}&to=${this.parseNgbdate(\n                            this.toDate\n                        )}&type=${fileType}`,\n                        '_blank',\n                        'noopener'\n                    )\n                })\n        )\n    }\n\n    public usdValue(trade: Trade): string {\n        return new BigNumber(trade.price).times(trade.quantity).toFixed(2, 1)\n    }\n\n    protected mergeFindEvents(): Observable<void> {\n        return merge(super.mergeFindEvents(), this.transactionService.changeEvent)\n    }\n\n    protected parseNgbdate(date: NgbDateStruct | null): string {\n        return `${date?.year}-${date?.month}-${date?.day}`\n    }\n\n    protected mapItem(item: any): Transaction {\n        if (item.type === 'investment') {\n            item.allocationsStream = this.fetchAllocation(item)\n        }\n        if (item.type === 'conversion') {\n            item.conversionsStream = this.fetchConversion(item)\n        }\n        if (item.type === 'trade') {\n            item.tradeStream = this.fetchTrade(item)\n        }\n        return new Transaction(item)\n    }\n\n    private buildAccountHolder(wallet: Wallet): string {\n        return `${\n            wallet.user ? `${wallet.user!.name}` : this.displayName\n        } <span class=\"text-muted\">/ ${buildWalletOwnerAccountNumber(wallet, environment.appName)}</span>`\n    }\n}\n"]}