{"version":3,"sources":["webpack:///src/app/common/models/accounting/fee.model.ts","webpack:///src/app/deposit/deposit-form/deposit-form.component.ts","webpack:///src/app/deposit/deposit-form/deposit-form.component.html","webpack:///src/app/deposit/deposit-routing.module.ts","webpack:///src/app/deposit/deposit.component.html","webpack:///src/app/deposit/deposit.component.ts","webpack:///src/app/deposit/deposit.module.ts","webpack:///src/app/common/services/accounting/fee.service.ts"],"names":["feeTypeMap","deposit","withdrawal","transfer","conversion","investment","trade","redeem","service","gst","payment","feeMethodMap","internal","card","crypto","local","swift","Fee","data","Object","assign","currency","user","beneficiary","code","id","includes","type","getFeeType","transactionType","feeMap","invoice","DepositFormComponent","session","ngbModal","http","walletsService","feeService","beneficiaryService","translate","files","isUploadCollapsed","faQuestionCircle","appName","purposeItems","sourceOfFundItems","subscriptions","fetchEvent","add","userStream","pipe","_","transaction","counterWallet","fetch","method","fetchDepositInstruction","subscribe","fee","depositInstruction","determineFee","minValue","minAmount","convert","accountNumber","cryptoDepositAddresses","changes","reset","unsubscribe","depositForm","invalid","accessErrors","length","modal","open","windowClass","backdrop","component","componentInstance","onConfirm","createTransaction","err","isSubmitted","close","transactionView","transactionViewModal","activeTab","next","post","map","file","headers","encodeURIComponent","name","undefined","resetForm","amount","purpose","sourceOfFunds","comment","selector","template","routes","path","redirectTo","canActivate","DepositRoutingModule","imports","forChild","exports","DepositComponent","route","snapshot","queryParamMap","has","resetTransaction","get","params","baseWallet","DepositModule","declarations","FeeService","Math","round","random","jsonrpc","response","result","currentTransaction","fixedFee","fixed","relativeFee","relative","min","minFee","isLessThan","max","maxFee","isGreaterThan","providedIn"],"mappings":"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","file":"deposit-deposit-module-es5.js","sourcesContent":["import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { pick } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, throwError } from 'rxjs'\nimport { catchError, map, mergeMap, switchMap, tap } from 'rxjs/operators'\nimport {\n    BeneficiaryMethod,\n    IBeneficiary,\n    ICurrency,\n    IFee,\n    IUser,\n    Transaction,\n    TransactionMethod,\n    Wallet,\n} from 'src/app/common/api-interfaces'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { openNoAccessModal } from 'src/app/common/no-access-modal/no-access-modal.component'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from 'src/app/common/services/accounting/fee.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { TransactionViewComponent } from 'src/app/common/transaction/transaction-view/transaction-view.component'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { environment } from 'src/environments/environment'\nimport { BeneficiaryService } from '../../common/services/accounting/beneficiary.service'\n\n@Component({\n    selector: 'deposit-form',\n    templateUrl: 'deposit-form.component.html',\n})\nexport class DepositFormComponent implements OnInit, OnDestroy, OnChanges {\n    @Input()\n    public transaction: Partial<Transaction>\n    public files: File[] = []\n    public minAmount: string | number | undefined\n    public isUploadCollapsed = true\n\n    public faQuestionCircle = faQuestionCircle\n    public appName = environment.appName\n\n    public purposeItems = [\n        'Pre Funding Remittance Account',\n        'Pre Funding Card Top Up',\n        'Pre Funding Foreign Exchange Account',\n        'Purchase Sale of Goods',\n        'Payment of Interest/Fees/Charges',\n        'Refund/Rebate',\n    ]\n\n    public sourceOfFundItems = [\n        'Business/Partnership Income',\n        'Employment Income',\n        'Social Security or Government Payments ',\n        'Retirement Income (Super Pensions or Annuities) ',\n        'Crowd Funding',\n        'Investment Income (Interest, Dividend, Rent)',\n        'Trust Fund Income',\n        'Foreign Income ',\n        'Prizes & Awards',\n        'Compensation or Insurance',\n        'Investment/Securities',\n    ]\n\n    @ViewChild('depositForm')\n    public depositForm: NgForm\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n    private fee: IFee | null\n\n    constructor(\n        public session: SessionService,\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private walletsService: WalletsService,\n        private feeService: FeeService,\n        private beneficiaryService: BeneficiaryService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest([this.fetchEvent, this.session.userStream])\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.counterWallet = {\n                            user: pick(user, ['id', 'accountNumber', 'name']),\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        forkJoin([\n                            this.feeService.fetch({\n                                type: 'deposit',\n                                method: this.transaction.method as TransactionMethod,\n                                user: { id: user.id } as IUser,\n                                currency: { code: this.transaction.currency?.code } as ICurrency,\n                            }),\n                            this.beneficiaryService.fetchDepositInstruction(\n                                this.transaction.method as BeneficiaryMethod,\n                                this.transaction.currency?.code!,\n                                user.id\n                            ),\n                        ])\n                    )\n                )\n                .subscribe(([fee, depositInstruction]) => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                    if (this.transaction.method === 'crypto') {\n                        this.transaction.beneficiary = {\n                            accountNumber: (environment.cryptoDepositAddresses as any)[\n                                this.transaction.currency?.code as any\n                            ],\n                            currency: {\n                                code: this.transaction.currency?.code,\n                            } as ICurrency,\n                            method: 'crypto',\n                            type: 'crypto-address',\n                        } as IBeneficiary\n                    } else {\n                        this.transaction.beneficiary = depositInstruction\n                    }\n                })\n        )\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.reset()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.depositForm && this.depositForm.invalid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction()\n                .pipe(\n                    catchError(err => {\n                        component.isSubmitted = false\n                        component.reset()\n                        return throwError(err)\n                    })\n                )\n                .subscribe(async transaction => {\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    transactionViewModal.activeTab = 'beneficiary'\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                })\n        })\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        return this.http.post<Transaction>('/transactions', this.transaction).pipe(\n            mergeMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    private reset(): void {\n        this.files = []\n        this.minAmount = undefined\n        if (this.depositForm) {\n            this.depositForm.resetForm({\n                amount: undefined,\n                purpose: undefined,\n                sourceOfFunds: undefined,\n                comment: undefined,\n                'currency-select': this.transaction.currency,\n            })\n        }\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <form\\n        class=\\\"form-validation\\\"\\n        #depositForm=\\\"ngForm\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': depositForm.submitted }\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"transaction.method === 'crypto' ? ['crypto'] : ['fiat']\\\"\\n                [required]=\\\"true\\\"\\n                [depositable]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                #currencySelect\\n            >\\n            </currency-select>\\n        </div>\\n        <div *ngIf=\\\"currencySelect.currencyInput.invalid && (depositForm.submitted || currencySelect.currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                {{ 'common.this-is-required' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"amount\\\">{{ 'common.amount' | translate }}</label>\\n            <fa-icon\\n                class=\\\"text-primary ml-1\\\"\\n                [icon]=\\\"faQuestionCircle\\\"\\n                [ngbPopover]=\\\"'common.in-case-receiving' | translate\\\"\\n                triggers=\\\"hover\\\"\\n                container=\\\"body\\\"\\n            >\\n            </fa-icon>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (depositForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    Minimum amount is\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.source-of-funds' | translate }}</label>\\n                <ng-select\\n                    class=\\\"ng-select-lg\\\"\\n                    name=\\\"sourceOfFunds\\\"\\n                    [(ngModel)]=\\\"transaction.sourceOfFunds\\\"\\n                    [items]=\\\"sourceOfFundItems\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    [required]=\\\"true\\\"\\n                    dropdownPosition=\\\"bottom\\\"\\n                    #sourceOfFundInput=\\\"ngModel\\\"\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                </ng-select>\\n                <div *ngIf=\\\"sourceOfFundInput.invalid && (depositForm.submitted || sourceOfFundInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"sourceOfFundInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n                <ng-select\\n                    class=\\\"ng-select-lg\\\"\\n                    name=\\\"purpose\\\"\\n                    [(ngModel)]=\\\"transaction.purpose\\\"\\n                    [items]=\\\"purposeItems\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [required]=\\\"true\\\"\\n                    [addTag]=\\\"true\\\"\\n                    addTagText=\\\"Use\\\"\\n                    dropdownPosition=\\\"bottom\\\"\\n                    #purposeInput=\\\"ngModel\\\"\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                </ng-select>\\n                <div *ngIf=\\\"purposeInput.invalid && (depositForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ Attach' : '- Remove' }} {{ 'common.file' | translate | lowercase }}\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <access-errors [errors]=\\\"['VerificationRequiredError']\\\"></access-errors>\\n        <div *ngIf=\\\"!transaction.beneficiary\\\" class=\\\"callout callout-danger e2e-deposit-not-config\\\">\\n            {{ 'deposit-form.deposit-method-is-not-configured' | translate }}\\n        </div>\\n\\n        <button\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-lg btn-block btn-primary mb-2\\\"\\n            [disabled]=\\\"!transaction.beneficiary || user.accessErrors.includes('VerificationRequiredError')\\\"\\n        >\\n            {{ (transaction.method === 'crypto' ? 'common.request-address' : 'common.submit') | translate }}\\n        </button>\\n        <div *ngIf=\\\"transaction.method === 'crypto'\\\" class=\\\"small text-muted mb-2\\\">\\n            <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n            Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n        </div>\\n        <div class=\\\"small text-muted\\\">\\n            {{ 'common.by-clicking-the-submit-button' | translate }} <br />\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.\\n        </div>\\n    </form>\\n</ng-container>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { PaymentGuard } from '../common/payment/payment.guard'\nimport { DepositComponent } from './deposit.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DepositComponent,\n        data: {\n            redirectTo: '/deposit',\n        },\n        canActivate: [LoggedInAuthGuard, PaymentGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class DepositRoutingModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page e2e-deposit\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"payment-methods\\\">\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-swift')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: null }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                        [routerLinkActiveOptions]=\\\"{ exact: true }\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/swift.svg\\\" />\\n                        </figure>\\n                        <span>Intl. {{ 'common.wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-local')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: 'local' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/local.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'deposit.local-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-crypto')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: 'crypto' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/crypto.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.crypto-currencies' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.deposit' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"callout callout-info mt-0\\\" *ngIf=\\\"['swift', 'local'].includes(transaction.method!)\\\">\\n                            <h6 class=\\\"text-info mb-0\\\">{{ 'common.deposit-instructions' | translate }}</h6>\\n                            <p>{{ 'deposit.choose-your-desired-amount' | translate }}</p>\\n                        </div>\\n                        <div class=\\\"callout callout-info mt-0\\\" *ngIf=\\\"transaction.method === 'crypto'\\\">\\n                            <h6 class=\\\"text-info mb-0\\\">{{ 'common.wallet-address' | translate }}</h6>\\n                            <p>{{ 'common.enter-the-following' | translate }}</p>\\n                        </div>\\n                        <deposit-form [(transaction)]=\\\"transaction\\\"></deposit-form>\\n                        <p class=\\\"small text-muted mt-2\\\" *ngIf=\\\"['swift'].includes(transaction.method!)\\\">\\n                            {{ 'common.if-you-send' | translate }}\\n                        </p>\\n                    </div>\\n                </section>\\n                <p class=\\\"text-center text-muted\\\">\\n                    <a [routerLink]=\\\"['/withdraw']\\\">{{ 'deposit.go-to-withdraw' | translate }} &#x203A;</a>\\n                </p>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs'\nimport { Transaction, TransactionMethod, Wallet } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'deposit',\n    templateUrl: 'deposit.component.html',\n})\nexport class DepositComponent implements OnInit, OnDestroy {\n    public transaction: Partial<Transaction>\n    private subscriptions = new Subscription()\n\n    constructor(private route: ActivatedRoute, public session: SessionService) {}\n\n    public async ngOnInit(): Promise<void> {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') || 'swift') as TransactionMethod)\n        })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    private resetTransaction(method: TransactionMethod): void {\n        this.transaction = {\n            type: 'deposit',\n            method,\n            baseWallet: {\n                user: null,\n            } as Wallet,\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { DepositFormComponent } from './deposit-form/deposit-form.component'\nimport { DepositRoutingModule } from './deposit-routing.module'\nimport { DepositComponent } from './deposit.component'\n\n@NgModule({\n    declarations: [DepositComponent, DepositFormComponent],\n    imports: [CommonModule, DepositRoutingModule, PaymentFormModule, TransactionModule],\n})\nexport class DepositModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n"]}