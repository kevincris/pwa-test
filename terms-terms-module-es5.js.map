{"version":3,"sources":["webpack:///src/app/common/logged-in.auth-guard.ts","webpack:///src/app/common/services/compliance/term.service.ts","webpack:///src/app/terms/terms.component.ts","webpack:///src/app/terms/terms-routing.module.ts","webpack:///src/app/terms/terms.module.ts","webpack:///src/app/terms/terms.component.html"],"names":["LoggedInAuthGuard","session","router","_","state","isAuthenticated","parseUrl","url","providedIn","TermService","http","term","post","terms","privacy","userId","getTermsAcceptance","pipe","termsAcceptance","get","accepted","user","id","TermsComponent","termService","isLoading","subscriptions","add","userStream","getApplicableTerm","subscribe","unsubscribe","selector","template","routes","path","component","canActivate","TermsRoutingModule","imports","forChild","exports","TermsModule","declarations"],"mappings":"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","file":"terms-terms-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { Term, TermsAcceptance } from '../../api-interfaces'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TermService {\n    constructor(private http: HttpClient) {}\n\n    public create(term: Term): Observable<Term> {\n        return this.http.post<Term>('/admin/terms', { terms: term.terms, privacy: term.privacy })\n    }\n\n    public getApplicableTerm(userId?: string): Observable<Term> {\n        return userId\n            ? this.getTermsAcceptance(userId).pipe(map(termsAcceptance => termsAcceptance.term))\n            : this.http.get<Term>(`/terms`)\n    }\n\n    public getTermsAcceptance(userId: string): Observable<TermsAcceptance> {\n        return this.http.get<TermsAcceptance>(`/users/${userId}/terms-acceptance`)\n    }\n\n    public accept(termsAcceptance: TermsAcceptance, accepted = true): Observable<TermsAcceptance> {\n        return this.http.post<TermsAcceptance>(`/users/${termsAcceptance.user.id}/terms-acceptance`, {\n            termsAcceptance: {\n                id: termsAcceptance.id,\n            },\n            accepted,\n        })\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Subscription } from 'rxjs'\nimport { flatMap, tap } from 'rxjs/operators'\nimport { Term } from '../common/api-interfaces'\nimport { TermService } from '../common/services/compliance/term.service'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'terms',\n    templateUrl: 'terms.component.html',\n})\nexport class TermsComponent implements OnInit, OnDestroy {\n    public term: Term\n    public isLoading = false\n    private subscriptions = new Subscription()\n\n    constructor(public session: SessionService, private termService: TermService) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    flatMap(user => this.termService.getApplicableTerm(user.id))\n                )\n                .subscribe(term => {\n                    this.term = term\n                    this.isLoading = false\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { TermsComponent } from './terms.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TermsComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TermsRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { TermsRoutingModule } from './terms-routing.module'\nimport { TermsComponent } from './terms.component'\n\n@NgModule({\n    declarations: [TermsComponent],\n    imports: [CommonModule, TermsRoutingModule],\n})\nexport class TermsModule {}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"pt-1 pb-3 terms-content-outlet\\\" [innerHTML]=\\\"term?.terms | safeHtml\\\" *ngIf=\\\"!isLoading; else loadingContent\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #loadingContent>\\n    <div>\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n        <p class=\\\"mb-0 mt-5 text-center\\\">{{ 'common.loading-terms-and-conditions' | translate }}</p>\\n    </div>\\n</ng-template>\\n\";"]}