{"version":3,"sources":["webpack:///src/app/login/restore-password/restore-password.auth-guard.ts","webpack:///src/app/login/restore-password/restore-password.component.ts","webpack:///src/app/login/login-alerts.service.ts","webpack:///src/app/login/login.auth-guard.ts","webpack:///src/app/login/forgot-password/forgot-password.component.ts","webpack:///src/app/common/services/login-redirect.service.ts","webpack:///src/app/common/services/activation.service.ts","webpack:///src/app/login/forgot-password/forgot-password.component.html","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login-form/login-form.component.html","webpack:///src/app/login/restore-password/restore-password.component.html","webpack:///src/app/login/login-form/login-form.component.ts","webpack:///src/app/login/login.component.ts"],"names":["RestorePasswordAuthGuard","router","route","queryParamMap","has","parseUrl","RestorePasswordComponent","http","userService","toastr","loginAlerts","alerts","translate","isLoading","requiredPasswordStrength","passwordStrength","faSyncAlt","faLockAlt","subscribe","params","token","get","activation","activated","expiryDate","Date","disposables","add","message","instant","severity","navigate","error","status","passwordForm","invalid","changePassword","user","id","password","pipe","success","selector","template","LoginAlertsService","Set","LoginAuthGuard","session","activationService","redirectService","activate","isAuthenticated","redirect","toPromise","then","ForgotPasswordComponent","faEnvelope","forgotPasswordForm","post","Math","floor","random","jsonrpc","method","email","headers","RedirectStrategy","LoginRedirectService","ngbModal","ignoreWelcome","approvedAt","DASHBOARD","includes","PREVIOUS_STATE","strategy","targetState","open","windowClass","undefined","providedIn","ActivationService","alertService","logoutService","tokenService","userId","activationToken","logout","hasValidRefreshToken","refresh","events","event","disposable","dispose","LoginModule","declarations","imports","providers","routes","path","component","canActivate","children","LoginRoutingModule","forChild","exports","LoginFormComponent","loginService","credentials","faUser","faMobile","displayName","login","twoFactorCode","trim","snapshot","name","showTwoFactorForm","window","SENTRY_DSN","category","level","Info","LoginComponent","appName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAIaA,wBAAwB;AACjC,0CAAoBC,MAApB,EAAoC;AAAA;;AAAhB,eAAAA,MAAA,GAAAA,MAAA;AAAkB;;AADL;AAAA;AAAA,iBAE1B,qBAAYC,KAAZ,EAAyC;AAC5C,mBAAOA,KAAK,CAACC,aAAN,CAAoBC,GAApB,CAAwB,OAAxB,IAAmC,IAAnC,GAA0C,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,QAArB,CAAjD;AACH;AAJgC;;AAAA;AAAA,S;;;;gBAHS;;;;AAGjCL,8BAAwB,6DADpC,kEACoC,GAAxBA,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCeAM,wBAAwB;AAajC,0CACYC,IADZ,EAEYC,WAFZ,EAGYC,MAHZ,EAIYC,WAJZ,EAKYC,MALZ,EAMYT,KANZ,EAOYD,MAPZ,EAQWW,SARX,EAQsC;AAAA;;AAP1B,eAAAL,IAAA,GAAAA,IAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAT,KAAA,GAAAA,KAAA;AACA,eAAAD,MAAA,GAAAA,MAAA;AACD,eAAAW,SAAA,GAAAA,SAAA;AAhBJ,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,wBAAA,GAA2B,EAA3B;AACA,eAAAC,gBAAA,GAAmB,CAAnB;AACA,eAAAC,SAAA,GAAY,0EAAZ;AACA,eAAAC,SAAA,GAAY,0EAAZ;AAaH;;AAtB6B;AAAA;AAAA,iBAwB1B,oBAAQ;AAAA;;AACX,iBAAKf,KAAL,CAAWC,aAAX,CAAyBe,SAAzB,CAAmC,UAAMC,MAAN;AAAA,qBAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC/C;AACA,6BAAKC,KAAL,GAAaD,MAAM,CAACE,GAAP,CAAW,OAAX,CAAb;AACA,6BAAKd,IAAL,CAAUc,GAAV,wBAA0C,KAAKD,KAA/C,GAAwDF,SAAxD,CACI,UAAAI,UAAU,EAAI;AACV,gCAAI,CAACA,UAAL,GAAkBA,UAAlB;;AACA,8BAAI,MAAI,CAACA,UAAL,CAAgBC,SAAhB,IAA6B,kEAAS,kEAAS,MAAI,CAACD,UAAL,CAAgBE,UAAzB,CAAT,EAA+C,IAAIC,IAAJ,EAA/C,CAAjC,EAA6F;AACzF,kCAAI,CAACf,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CACI,MAAI,CAAChB,MAAL,CAAYgB,GAAZ,CAAgB;AACZC,qCAAO,EAAE,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,qCAAvB,CADG;AAEZC,sCAAQ,EAAE;AAFE,6BAAhB,CADJ,EADyF,CAOzF;;;AACA,kCAAI,CAAC7B,MAAL,CAAY8B,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH;AACJ,yBAbL,EAcI,UAAAC,KAAK,EAAI;AACL,8BAAIA,KAAK,CAACC,MAAN,KAAiB,GAArB,EAA0B;AACtB,kCAAI,CAACvB,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CACI,MAAI,CAAChB,MAAL,CAAYgB,GAAZ,CAAgB;AACZC,qCAAO,EAAE,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,uCAAvB,CADG;AAEZC,sCAAQ,EAAE;AAFE,6BAAhB,CADJ,EADsB,CAOtB;;;AACA,kCAAI,CAAC7B,MAAL,CAAY8B,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH;AACJ,yBAzBL;;AAH+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhB;AAAA,aAAnC;AA+BH;AAxDgC;AAAA;AAAA,iBA0D1B,kBAAM;AAAA;;AACT,gBAAI,KAAKG,YAAL,CAAkBC,OAAtB,EAA+B;AAC3B;AACH;;AACD,iBAAKtB,SAAL,GAAiB,IAAjB;AACA,iBAAKL,WAAL,CACK4B,cADL,CACoB,KAAKd,UAAL,CAAgBe,IAAhB,CAAqBC,EADzC,EAC6C,KAAKC,QADlD,EAC4D;AAAE,oCAAsB,KAAKnB;AAA7B,aAD5D,EAEKoB,IAFL,CAGQ,gEAAS,YAAM;AACX,oBAAI,CAAC3B,SAAL,GAAiB,KAAjB;AACH,aAFD,CAHR,EAOKK,SAPL,CAQQ,YAAM;AACF,oBAAI,CAACT,MAAL,CAAYgC,OAAZ,CACI,MAAI,CAAC7B,SAAL,CAAeiB,OAAf,CAAuB,4DAAvB,CADJ,EAEI,MAAI,CAACjB,SAAL,CAAeiB,OAAf,CAAuB,uBAAvB,CAFJ;;AAIA,oBAAI,CAACnB,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CACI,MAAI,CAAChB,MAAL,CAAYgB,GAAZ,CAAgB;AACZC,uBAAO,YAAK,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,uBAAvB,CAAL,eAAyD,MAAI,CAACjB,SAAL,CAAeiB,OAAf,CAC5D,4DAD4D,CAAzD,CADK;AAIZC,wBAAQ,EAAE;AAJE,eAAhB,CADJ;;AAQA,qBAAO,MAAI,CAAC7B,MAAL,CAAY8B,QAAZ,CAAqB,CAAC,QAAD,CAArB,CAAP;AACH,aAtBT,EAuBQ,YAAM;AACF,oBAAI,CAACrB,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CACI,MAAI,CAAChB,MAAL,CAAYgB,GAAZ,CAAgB;AACZC,uBAAO,EAAE,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,iCAAvB,CADG;AAEZC,wBAAQ,EAAE;AAFE,eAAhB,CADJ;AAMH,aA9BT;AAgCH;AA/FgC;;AAAA;AAAA,S;;;;gBAnB5B;;gBAWA;;gBACA;;gBACA;;gBAHA;;gBAPA;;gBAAgB;;gBAEhB;;;;;;gBAeJ,uD;AAAS,iBAAC,cAAD;;;AADDxB,8BAAwB,6DAJpC,gEAAU;AACPoC,gBAAQ,EAAE,kBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIoC,GAAxBrC,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCfAsC,kBAAkB,6B;;;AACpB,aAAAlB,WAAA,GAAc,IAAImB,GAAJ,EAAd;AACV,OAF8B,C;;AAAlBD,wBAAkB,6DAD9B,kEAC8B,GAAlBA,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAE,cAAc;AACvB,gCACYC,OADZ,EAEYC,iBAFZ,EAGYC,eAHZ,EAIYhD,MAJZ,EAI0B;AAAA;;AAHd,eAAA8C,OAAA,GAAAA,OAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,eAAA,GAAAA,eAAA;AACA,eAAAhD,MAAA,GAAAA,MAAA;AACR;;AANmB;AAAA;AAAA,iBAOhB,qBAAYC,KAAZ,EAAyC;AAAA;;AAC5C,gBAAIA,KAAK,CAACC,aAAN,CAAoBC,GAApB,CAAwB,QAAxB,KAAqCF,KAAK,CAACC,aAAN,CAAoBC,GAApB,CAAwB,iBAAxB,CAAzC,EAAqF;AACjF,mBAAK4C,iBAAL,CAAuBE,QAAvB,CACIhD,KAAK,CAACC,aAAN,CAAoBkB,GAApB,CAAwB,QAAxB,CADJ,EAEInB,KAAK,CAACC,aAAN,CAAoBkB,GAApB,CAAwB,iBAAxB,CAFJ,EAGInB,KAAK,CAACC,aAAN,CAAoBkB,GAApB,CAAwB,OAAxB,CAHJ;;AAKA,kBAAI,KAAK0B,OAAL,CAAaI,eAAb,EAAJ,EAAoC;AAChC,uBAAO,KAAKlD,MAAL,CAAYI,QAAZ,CAAqB,YAArB,CAAP;AACH,eAFD,MAEO;AACH;AACA,uBAAO,KAAKJ,MAAL,CAAYI,QAAZ,CAAqB,QAArB,CAAP;AACH;AACJ,aAZD,MAYO,IAAI,KAAK0C,OAAL,CAAaI,eAAb,EAAJ,EAAoC;AACvC,qBACI,KAAKF,eAAL,CACKG,QADL,CACclD,KADd,EACqB,IADrB,EAEKmD,SAFL,GAGI;AAHJ,wBAIW;AAAA,uBAAM,IAAN;AAAA,eAJX,EAKKC,IALL,CAKU;AAAA,uBAAM,MAAI,CAACrD,MAAL,CAAYI,QAAZ,CAAqB,YAArB,CAAN;AAAA,eALV,CADJ;AAQH;;AACD,mBAAO,IAAP;AACH;AA/BsB;;AAAA;AAAA,S;;;;gBAHlB;;gBAFA;;gBACA;;gBAFqC;;;;AAMjCyC,oBAAc,6DAD1B,kEAC0B,GAAdA,cAAc,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSAS,uBAAuB;AAOhC,yCACYhD,IADZ,EAEYE,MAFZ,EAGYE,MAHZ,EAIYD,WAJZ,EAKYT,MALZ,EAMWW,SANX,EAMsC;AAAA;;AAL1B,eAAAL,IAAA,GAAAA,IAAA;AACA,eAAAE,MAAA,GAAAA,MAAA;AACA,eAAAE,MAAA,GAAAA,MAAA;AACA,eAAAD,WAAA,GAAAA,WAAA;AACA,eAAAT,MAAA,GAAAA,MAAA;AACD,eAAAW,SAAA,GAAAA,SAAA;AATJ,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAA2C,UAAA,GAAa,2EAAb;AASH;;AAd4B;AAAA;AAAA,iBAgBzB,kBAAM;AAAA;;AACT,gBAAI,KAAKC,kBAAL,CAAwBtB,OAA5B,EAAqC;AACjC;AACH;;AACD,iBAAKtB,SAAL,GAAiB,IAAjB;AACA,iBAAKN,IAAL,CACKmD,IADL,CAEQ,QAFR,EAGQ;AACIpB,gBAAE,EAAEqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADR;AAEIC,qBAAO,EAAE,KAFb;AAGIC,oBAAM,EAAE,eAHZ;AAII5C,oBAAM,EAAE;AAAE6C,qBAAK,EAAE,KAAKA;AAAd;AAJZ,aAHR,EASQ;AAAEC,qBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,gCAAgB;AAAlB,eAAhB;AAAX,aATR,EAWKzB,IAXL,CAYQ,gEAAS,YAAM;AACX,oBAAI,CAAC3B,SAAL,GAAiB,KAAjB;AACH,aAFD,CAZR,EAgBKK,SAhBL,CAgBe,YAAM;AACb,oBAAI,CAACT,MAAL,CAAYgC,OAAZ,CAAoB,MAAI,CAAC7B,SAAL,CAAeiB,OAAf,CAAuB,0BAAvB,CAApB;;AACA,oBAAI,CAACnB,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CACI,MAAI,CAAChB,MAAL,CAAYgB,GAAZ,CAAgB;AACZG,wBAAQ,EAAE,SADE;AAEZF,uBAAO,EAAE,MAAI,CAAChB,SAAL,CAAeiB,OAAf,CAAuB,2BAAvB;AAFG,eAAhB,CADJ;;AAMA,qBAAO,MAAI,CAAC5B,MAAL,CAAY8B,QAAZ,CAAqB,CAAC,QAAD,CAArB,CAAP;AACH,aAzBL;AA0BH;AA/C+B;;AAAA;AAAA,S;;;;gBAhB3B;;gBASA;;gBADA;;gBAEA;;gBAPA;;gBAEA;;;;;;gBAYJ,uD;AAAS,iBAAC,oBAAD;;;AADDwB,6BAAuB,6DAJnC,gEAAU;AACPb,gBAAQ,EAAE,iBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAImC,GAAvBY,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPb,UAAYW,gBAAZ;;AAAA,iBAAYA,gBAAZ,EAA4B;AACxB;AACA;AACA;AACH,OAJD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;;UASaC,oBAAoB;AAC7B,sCACclE,MADd,EAEc8C,OAFd,EAGYqB,QAHZ,EAIc7D,IAJd,EAI8B;AAAA;;AAHhB,eAAAN,MAAA,GAAAA,MAAA;AACA,eAAA8C,OAAA,GAAAA,OAAA;AACF,eAAAqB,QAAA,GAAAA,QAAA;AACE,eAAA7D,IAAA,GAAAA,IAAA;AACV;;AANyB;AAAA;AAAA,iBAQtB,kBAASL,KAAT,EAA6D;AAAA;;AAAA,gBAArBmE,aAAqB,uEAAL,KAAK;AAChE,mBAAO,gDAAG,IAAH,EAAS7B,IAAT,CACH,2DAAI;AAAA,qBACA,CAAC,MAAI,CAACO,OAAL,CAAaV,IAAb,CAAkBiC,UAAnB,GACMJ,gBAAgB,CAACK,SADvB,GAEMrE,KAAK,IACLA,KAAK,CAACC,aAAN,CAAoBC,GAApB,CAAwB,UAAxB,CADA,IAEA,CAAC,CAAC,GAAD,EAAM,QAAN,EAAgBoE,QAAhB,CAAyBtE,KAAK,CAACC,aAAN,CAAoBkB,GAApB,CAAwB,UAAxB,CAAzB,CAFD,GAGA6C,gBAAgB,CAACO,cAHjB,GAIAP,gBAAgB,CAACK,SAPvB;AAAA,aAAJ,CADG,EAUH,+DAAQ,UAAAG,QAAQ,EAAI;AAChB,sBAAQA,QAAR;AACI,qBAAKR,gBAAgB,CAACO,cAAtB;AACI,sBAAME,WAAW,GAAGzE,KAAK,CAACC,aAAN,CAAoBkB,GAApB,CAAwB,UAAxB,CAApB;AACA,yBAAO,kDAAK,MAAI,CAACpB,MAAL,CAAY8B,QAAZ,CAAqB,CAAC4C,WAAD,CAArB,CAAL,CAAP;;AACJ;AACI,yBAAO,kDAAK,MAAI,CAAC1E,MAAL,CAAY8B,QAAZ,CAAqB,CAAC,YAAD,CAArB,CAAL,EAA2CS,IAA3C,CACH,2DAAI,YAAM;AACN,wBACI,CAAC6B,aAAD,KACC,CAAC,MAAI,CAACtB,OAAL,CAAaV,IAAb,CAAkBiC,UAAnB,IAAiC,MAAI,CAACvB,OAAL,CAAaV,IAAb,CAAkBJ,MAAlB,KAA6B,SAD/D,CADJ,EAGE;AACE,4BAAI,CAACmC,QAAL,CAAcQ,IAAd,CAAmB,2EAAnB,EAAqC;AACjCC,mCAAW,EAAE;AADoB,uBAArC;AAGH;AACJ,mBATD,CADG,CAAP;AALR;AAkBH,aAnBD,CAVG,EA8BH,2DAAI;AAAA,qBAAMC,SAAN;AAAA,aAAJ,CA9BG,CAAP;AAgCH;AAzC4B;;AAAA;AAAA,S;;;;gBAhBA;;gBAKxB;;gBAJA;;gBAHA;;;;AAkBIX,0BAAoB,6DAHhC,iEAAW;AACRY,kBAAU,EAAE;AADJ,OAAX,CAGgC,GAApBZ,oBAAoB,CAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCJAa,iBAAiB;AAC1B,mCACYzE,IADZ,EAEY0E,YAFZ,EAGYhF,MAHZ,EAIY8C,OAJZ,EAKYmC,aALZ,EAMYC,YANZ,EAMsC;AAAA;;AAL1B,eAAA5E,IAAA,GAAAA,IAAA;AACA,eAAA0E,YAAA,GAAAA,YAAA;AACA,eAAAhF,MAAA,GAAAA,MAAA;AACA,eAAA8C,OAAA,GAAAA,OAAA;AACA,eAAAmC,aAAA,GAAAA,aAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACR;;AARsB;AAAA;AAAA,iBAUnB,kBAASC,MAAT,EAAgCC,eAAhC,EAAyDrB,KAAzD,EAAuE;AAAA;;AAC1E,gBAAMtC,WAAW,GAAG,IAAImB,GAAJ,EAApB;AAEC,aAAC,KAAKE,OAAL,CAAaI,eAAb,MAAkCiC,MAAlC,IAA4C,KAAKrC,OAAL,CAAaV,IAAb,CAAkBC,EAAlB,KAAyB8C,MAArE,GACI,KAAKF,aAAL,CAAmBI,MAAnB,EADJ,GAEI,gDAAGR,SAAH,CAFL,EAIItC,IAJJ,CAKO,+DAAQ;AAAA,qBACJ,MAAI,CAACjC,IAAL,CACKmD,IADL,CAEQM,KAAK,oBAAaoB,MAAb,sCAA+CA,MAA/C,mBAFb,EAGQpB,KAAK,GAAG;AAAEA,qBAAK,EAALA;AAAF,eAAH,GAAe;AAAE/B,sBAAM,EAAE;AAAV,eAH5B,EAIQ;AACIgC,uBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,wCAAsBoB,eADD;AAErB,kCAAgB;AAFK,iBAAhB;AADb,eAJR,EAWK7C,IAXL,CAYQ,+DAAQ;AAAA,uBACJ4C,MAAM,IAAI,MAAI,CAACrC,OAAL,CAAawC,oBAAb,EAAV,GACM,MAAI,CAACJ,YAAL,CAAkBK,OAAlB,CAA0B;AAAExB,uBAAK,EAALA;AAAF,iBAA1B,EAAqCxB,IAArC,CAA0C,2DAAI;AAAA,yBAAMsC,SAAN;AAAA,iBAAJ,CAA1C,CADN,GAEM,gDAAGA,SAAH,CAHF;AAAA,eAAR,CAZR,EAiBQ,2DAAI,YAAM;AACNpD,2BAAW,CAACC,GAAZ,CACI,MAAI,CAACsD,YAAL,CAAkBtD,GAAlB,CAAsB;AAClBG,0BAAQ,EAAE,SADQ;AAElBF,yBAAO,EAAEoC,KAAK,GACR,mDADQ,GAER;AAJY,iBAAtB,CADJ;AAQH,eATD,CAjBR,EA2BQ,kEAAW,UAAAhC,KAAK,EAAI;AAChBN,2BAAW,CAACC,GAAZ,CACI,MAAI,CAACsD,YAAL,CAAkBtD,GAAlB,CAAsB;AAClBG,0BAAQ,EAAE,QADQ;AAElBF,yBAAO,EAAEI,KAAK,CAACJ;AAFG,iBAAtB,CADJ;AAMA,uBAAO,gDAAGkD,SAAH,CAAP;AACH,eARD,CA3BR,CADI;AAAA,aAAR,CALP,EA6CI5D,SA7CJ,CA6Cc,YAAM;AACb;AACA,oBAAI,CAACjB,MAAL,CAAYwF,MAAZ,CACKjD,IADL,CAEQ,8DAAO,UAAAkD,KAAK;AAAA,uBAAIA,KAAK,YAAY,+DAArB;AAAA,eAAZ,CAFR,EAGQ,4DAAK,CAAL,CAHR,EAKKxE,SALL,CAKe,YAAM;AAAA,2DACYQ,WADZ;AAAA;;AAAA;AACb,sEAAsC;AAAA,wBAA3BiE,UAA2B;AAClCA,8BAAU,CAACC,OAAX;AACH;AAHY;AAAA;AAAA;AAAA;AAAA;AAIhB,eATL;AAUH,aAzDJ;AA0DJ;AAvEyB;;AAAA;AAAA,S;;;;gBAdrB;;gBAMA;;gBAJiB;;gBAMjB;;gBADA;;gBAEA;;;;AAKIZ,uBAAiB,6DAH7B,iEAAW;AACRD,kBAAU,EAAE;AADJ,OAAX,CAG6B,GAAjBC,iBAAiB,CAAjB;;;;;;;;;;;;;;;;ACdb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCcFa,WAAW;AAAA;AAAA,Q;;AAAXA,iBAAW,6DALvB,+DAAS;AACNC,oBAAY,EAAE,CAAC,mFAAD,EAAqB,+DAArB,EAAqC,kGAArC,EAA8D,qGAA9D,CADR;AAENC,eAAO,EAAE,CAAC,kEAAD,EAAe,wEAAf,CAFH;AAGNC,iBAAS,EAAE,CAAC,wEAAD;AAHL,OAAT,CAKuB,GAAXH,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLb,UAAMI,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE,+DAFf;AAGIC,mBAAW,EAAE,CAAC,gEAAD,CAHjB;AAIIC,gBAAQ,EAAE,CACN;AACIH,cAAI,EAAE,EADV;AAEIC,mBAAS,EAAE;AAFf,SADM,EAKN;AACID,cAAI,EAAE,iBADV;AAEIC,mBAAS,EAAE;AAFf,SALM,EASN;AACID,cAAI,EAAE,kBADV;AAEIC,mBAAS,EAAE,qGAFf;AAGIC,qBAAW,EAAE,CAAC,sGAAD;AAHjB,SATM;AAJd,OADmB,CAAvB;;UA4BaE,kBAAkB;AAAA;AAAA,Q;;AAAlBA,wBAAkB,6DAL9B,+DAAS;AACNP,eAAO,EAAE,CAAC,6DAAaQ,QAAb,CAAsBN,MAAtB,CAAD,CADH;AAENO,eAAO,EAAE,CAAC,4DAAD,CAFH;AAGNR,iBAAS,EAAE,CAAC,gEAAD,EAAiB,sGAAjB;AAHL,OAAT,CAK8B,GAAlBM,kBAAkB,CAAlB;;;;;;;;;;;;;;;;ACrCb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCyBFG,kBAAkB;AAY3B,oCACYhG,MADZ,EAEWwE,YAFX,EAGYyB,YAHZ,EAIYhG,WAJZ,EAKYuC,eALZ,EAMY/C,KANZ,EAOWU,SAPX,EAOsC;AAAA;;AAN1B,eAAAH,MAAA,GAAAA,MAAA;AACD,eAAAwE,YAAA,GAAAA,YAAA;AACC,eAAAyB,YAAA,GAAAA,YAAA;AACA,eAAAhG,WAAA,GAAAA,WAAA;AACA,eAAAuC,eAAA,GAAAA,eAAA;AACA,eAAA/C,KAAA,GAAAA,KAAA;AACD,eAAAU,SAAA,GAAAA,SAAA;AAlBJ,eAAA+F,WAAA,GAA2B,EAA3B;AAIA,eAAA9F,SAAA,GAAY,KAAZ;AAEA,eAAAI,SAAA,GAAY,0EAAZ;AACA,eAAA2F,MAAA,GAAS,uEAAT;AACA,eAAAC,QAAA,GAAW,yEAAX;AACA,eAAAC,WAAA,GAAc,yEAAYA,WAA1B;AAUH;;AApBuB;AAAA;AAAA,iBAsBpB,kBAAM;AAAA;;;;AACT,iBAAKjG,SAAL,GAAiB,IAAjB;AACA,iBAAK6F,YAAL,CACKK,KADL,CACW,MAAD,OAAC,CAAD;AAAGC,2BAAa,EAAE,KAAKA;AAAvB,eAAyC,KAAKL,WAA9C,CAAC,EAAwD;AAAE3C,mBAAK,EAAE,CAAF,KAAE,KAAK2C,WAAL,CAAiB3C,KAAjB,MAAsB,IAAtB,IAAsB,aAAtB,GAAsB,MAAtB,GAAsB,GAAEiD,IAAF;AAA/B,aAAxD,CADX,EAEKzE,IAFL,CAGQ,+DAAQ;AAAA,qBAAM,MAAI,CAACS,eAAL,CAAqBG,QAArB,CAA8B,MAAI,CAAClD,KAAL,CAAWgH,QAAzC,EAAmD,IAAnD,CAAN;AAAA,aAAR,CAHR,EAIQ,kEAAW,UAAAlF,KAAK,EAAI;AAAA,0DACS,MAAI,CAACtB,WAAL,CAAiBgB,WAD1B;AAAA;;AAAA;AAChB,uEAAuD;AAAA,sBAA5CiE,UAA4C;AACnDA,4BAAU,CAACC,OAAX;AACH,iBAHe,CAIhB;;AAJgB;AAAA;AAAA;AAAA;AAAA;;AAKhB,kBAAI5D,KAAK,CAACC,MAAN,KAAiB,GAAjB,IAAwBD,KAAK,CAACmF,IAAN,KAAe,qBAA3C,EAAkE;AAC9D;AACA,sBAAI,CAACC,iBAAL,GAAyB,IAAzB;AACH,eAHD,MAGO;AACH,oBAAI,CAAC,MAAI,CAACA,iBAAV,EAA6B;AACzB,wBAAI,CAACT,WAAL,CAAiBpE,QAAjB,GAA4B,EAA5B;AACH;;AACD,sBAAI,CAAC7B,WAAL,CAAiBgB,WAAjB,CAA6BC,GAA7B,CAAiC,MAAI,CAACsD,YAAL,CAAkBtD,GAAlB,CAAsBK,KAAtB,CAAjC;AACH;;AACD,oBAAI,CAACnB,SAAL,GAAiB,KAAjB;AACA,qBAAO,wDAAWmB,KAAX,CAAP;AACH,aAhBD,CAJR,EAsBKd,SAtBL,CAsBe,YAAM;AACb,oBAAI,CAACT,MAAL,CAAYgC,OAAZ,WACO,MAAI,CAAC7B,SAAL,CAAeiB,OAAf,CAAuB,yCAAvB,CADP,aAEO,MAAI,CAACjB,SAAL,CAAeiB,OAAf,CAAuB,kCAAvB,CAFP;;AAIA,kBAAIwF,MAAM,CAACC,UAAX,EAAuB;AACnB,8EAAqB;AACjBC,0BAAQ,EAAE,MADO;AAEjB3F,yBAAO,EAAE,wBAAwB,MAAI,CAAC+E,WAAL,CAAiB3C,KAFjC;AAGjBwD,uBAAK,EAAE,yDAAgBC;AAHN,iBAArB;AAKH;AACJ,aAlCL;AAmCH;AAED;;AA7D2B;AAAA;AAAA,iBA8DpB,kBAAM;AACT,gBAAI,KAAK5G,SAAT,EAAoB;AAChB;AACH;;AACD,iBAAK8F,WAAL,GAAmB,EAAnB;AACA,iBAAKS,iBAAL,GAAyB,KAAzB;AACH;AApE0B;;AAAA;AAAA,S;;;;gBAbtB;;gBAHA;;gBAEA;;gBAEA;;gBAHA;;gBARA;;gBAEA;;;;;;gBAwBJ,uD;AAAS,iBAAC,WAAD;;;AAHDX,wBAAkB,6DAJ9B,gEAAU;AACP/D,gBAAQ,EAAE,YADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI8B,GAAlB8D,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCjBAiB,cAAc;AAGvB,gCAAoBhH,WAApB,EAAqD;AAAA;;AAAjC,eAAAA,WAAA,GAAAA,WAAA;AAFb,eAAAiH,OAAA,GAAU,yEAAYA,OAAtB;AAEgD;;AAHhC;AAAA;AAAA,iBAKhB,uBAAW;AAAA,wDACW,KAAKjH,WAAL,CAAiBgB,WAD5B;AAAA;;AAAA;AACd,qEAAuD;AAAA,oBAA5CiE,UAA4C;AACnDA,0BAAU,CAACC,OAAX;AACA,qBAAKlF,WAAL,CAAiBgB,WAAjB,WAAoCiE,UAApC;AACH;AAJa;AAAA;AAAA;AAAA;AAAA;AAKjB;AAVsB;AAAA;AAAA,iBAYhB,mBAAO;AACV,oBAAQ,yEAAYgC,OAApB;AACI,mBAAK,OAAL;AACI,uBAAO,oCAAP;;AACJ;AACI,uBAAO,sCAAP;AAJR;AAMH;AAnBsB;;AAAA;AAAA,S;;;;gBANlB;;;;AAMID,oBAAc,6DAJ1B,gEAAU;AACPhF,gBAAQ,EAAE,OADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI0B,GAAd+E,cAAc,CAAd","file":"login-login-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'\n\n@Injectable()\nexport class RestorePasswordAuthGuard implements CanActivate {\n    constructor(private router: Router) {}\n    public canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree {\n        return route.queryParamMap.has('token') ? true : this.router.parseUrl('/login')\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faLockAlt, faSyncAlt } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport isBefore from 'date-fns/isBefore'\nimport parseISO from 'date-fns/parseISO'\nimport { finalize } from 'rxjs/operators'\nimport { Activation } from '../../common/api-interfaces'\nimport { AlertService } from '../../common/services/alert.service'\nimport { UserService } from '../../common/services/core/user.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\n@Component({\n    selector: 'restore-password',\n    templateUrl: 'restore-password.component.html',\n})\nexport class RestorePasswordComponent implements OnInit {\n    @ViewChild('passwordForm')\n    public passwordForm: NgForm\n    public password: string\n    public repeatedPassword: string\n    public isLoading = false\n    public requiredPasswordStrength = 60\n    public passwordStrength = 0\n    public faSyncAlt = faSyncAlt\n    public faLockAlt = faLockAlt\n    public activation: Activation\n    private token: string\n\n    constructor(\n        private http: HttpClient,\n        private userService: UserService,\n        private toastr: ToastrService,\n        private loginAlerts: LoginAlertsService,\n        private alerts: AlertService,\n        private route: ActivatedRoute,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.route.queryParamMap.subscribe(async params => {\n            // this state can only be activated if the token is set, so we can assume it's set\n            this.token = params.get('token')!\n            this.http.get<Activation>(`/activations/${this.token}`).subscribe(\n                activation => {\n                    this.activation = activation\n                    if (this.activation.activated || isBefore(parseISO(this.activation.expiryDate), new Date())) {\n                        this.loginAlerts.disposables.add(\n                            this.alerts.add({\n                                message: this.translate.instant('common.invalid-password-reset-token'),\n                                severity: 'danger',\n                            })\n                        )\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this.router.navigate(['/login'])\n                    }\n                },\n                error => {\n                    if (error.status === 404) {\n                        this.loginAlerts.disposables.add(\n                            this.alerts.add({\n                                message: this.translate.instant('common.password-reset-token-not-found'),\n                                severity: 'danger',\n                            })\n                        )\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this.router.navigate(['/login'])\n                    }\n                }\n            )\n        })\n    }\n\n    public submit(): void {\n        if (this.passwordForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.userService\n            .changePassword(this.activation.user.id, this.password, { 'X-Activation-Token': this.token })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(\n                () => {\n                    this.toastr.success(\n                        this.translate.instant('restore-password.you-can-now-login-using-your-new-password'),\n                        this.translate.instant('common.password-reset')\n                    )\n                    this.loginAlerts.disposables.add(\n                        this.alerts.add({\n                            message: `${this.translate.instant('common.password-reset')}. ${this.translate.instant(\n                                'restore-password.you-can-now-login-using-your-new-password'\n                            )}`,\n                            severity: 'success',\n                        })\n                    )\n                    return this.router.navigate(['/login'])\n                },\n                () => {\n                    this.loginAlerts.disposables.add(\n                        this.alerts.add({\n                            message: this.translate.instant('common.could-not-reset-password'),\n                            severity: 'danger',\n                        })\n                    )\n                }\n            )\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { Disposable } from '../common/disposable'\n\n@Injectable()\nexport class LoginAlertsService {\n    public disposables = new Set<Disposable>()\n}\n","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'\nimport { ActivationService } from '../common/services/activation.service'\nimport { LoginRedirectService } from '../common/services/login-redirect.service'\nimport { SessionService } from '../common/services/session.service'\n\n@Injectable()\nexport class LoginAuthGuard implements CanActivate {\n    constructor(\n        private session: SessionService,\n        private activationService: ActivationService,\n        private redirectService: LoginRedirectService,\n        private router: Router\n    ) {}\n    public canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree | Promise<UrlTree> {\n        if (route.queryParamMap.has('userId') && route.queryParamMap.has('activationToken')) {\n            this.activationService.activate(\n                route.queryParamMap.get('userId'),\n                route.queryParamMap.get('activationToken')!,\n                route.queryParamMap.get('email')!\n            )\n            if (this.session.isAuthenticated()) {\n                return this.router.parseUrl('/dashboard')\n            } else {\n                // // clear state params\n                return this.router.parseUrl('/login')\n            }\n        } else if (this.session.isAuthenticated()) {\n            return (\n                this.redirectService\n                    .redirect(route, true)\n                    .toPromise()\n                    // errors are handled before, don't pass the error to router but proceed with app flow\n                    .catch(() => true)\n                    .then(() => this.router.parseUrl('/dashboard'))\n            )\n        }\n        return true\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faEnvelope } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { finalize } from 'rxjs/operators'\nimport { RPCResult } from '../../common/api-interfaces'\nimport { AlertService } from '../../common/services/alert.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\n@Component({\n    selector: 'forgot-password',\n    templateUrl: 'forgot-password.component.html',\n})\nexport class ForgotPasswordComponent {\n    @ViewChild('forgotPasswordForm')\n    public forgotPasswordForm: NgForm\n    public email: string\n    public isLoading = false\n    public faEnvelope = faEnvelope\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private alerts: AlertService,\n        private loginAlerts: LoginAlertsService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (this.forgotPasswordForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.http\n            .post<RPCResult<void>>(\n                '/users',\n                {\n                    id: Math.floor(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'resetPassword',\n                    params: { email: this.email },\n                },\n                { headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }) }\n            )\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.instructions-sent'))\n                this.loginAlerts.disposables.add(\n                    this.alerts.add({\n                        severity: 'success',\n                        message: this.translate.instant('common.check-your-mailbox'),\n                    })\n                )\n                return this.router.navigate(['/login'])\n            })\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { from, Observable, of } from 'rxjs'\nimport { flatMap, map, tap } from 'rxjs/operators'\nimport { WelcomeComponent } from '../welcome/welcome.component'\nimport { SessionService } from './session.service'\n\nexport enum RedirectStrategy {\n    DASHBOARD = 'dashboard',\n    PREVIOUS_STATE = 'previous-state',\n    VERIFICATION = 'verification',\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoginRedirectService {\n    constructor(\n        protected router: Router,\n        protected session: SessionService,\n        private ngbModal: NgbModal,\n        protected http: HttpClient\n    ) {}\n\n    public redirect(route: ActivatedRouteSnapshot, ignoreWelcome = false): Observable<void> {\n        return of(true).pipe(\n            map(() =>\n                !this.session.user.approvedAt\n                    ? RedirectStrategy.DASHBOARD\n                    : route &&\n                      route.queryParamMap.has('redirect') &&\n                      !['/', '/login'].includes(route.queryParamMap.get('redirect')!)\n                    ? RedirectStrategy.PREVIOUS_STATE\n                    : RedirectStrategy.DASHBOARD\n            ),\n            flatMap(strategy => {\n                switch (strategy) {\n                    case RedirectStrategy.PREVIOUS_STATE:\n                        const targetState = route.queryParamMap.get('redirect')!\n                        return from(this.router.navigate([targetState]))\n                    default:\n                        return from(this.router.navigate(['/dashboard'])).pipe(\n                            tap(() => {\n                                if (\n                                    !ignoreWelcome &&\n                                    (!this.session.user.approvedAt || this.session.user.status === 'pending')\n                                ) {\n                                    this.ngbModal.open(WelcomeComponent, {\n                                        windowClass: 'modal-primary',\n                                    })\n                                }\n                            })\n                        )\n                }\n            }),\n            map(() => undefined)\n        )\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { NavigationStart, Router } from '@angular/router'\nimport { of } from 'rxjs'\nimport { catchError, filter, flatMap, map, take, tap } from 'rxjs/operators'\nimport { Disposable } from '../disposable'\nimport { AlertService } from './alert.service'\nimport { LogoutService } from './logout.service'\nimport { SessionService } from './session.service'\nimport { TokenService } from './token.service'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ActivationService {\n    constructor(\n        private http: HttpClient,\n        private alertService: AlertService,\n        private router: Router,\n        private session: SessionService,\n        private logoutService: LogoutService,\n        private tokenService: TokenService\n    ) {}\n\n    public activate(userId: string | null, activationToken: string, email?: string): void {\n        const disposables = new Set<Disposable>()\n        // check if the activation is for a different user, in that case, we are logging the user out first\n        ;(this.session.isAuthenticated() && userId && this.session.user.id !== userId\n            ? this.logoutService.logout()\n            : of(undefined)\n        )\n            .pipe(\n                flatMap(() =>\n                    this.http\n                        .post(\n                            email ? `/users/${userId}/change-email` : `/users/${userId}/change-status`,\n                            email ? { email } : { status: 'active' },\n                            {\n                                headers: new HttpHeaders({\n                                    'X-Activation-Token': activationToken,\n                                    'Content-Type': 'application/json',\n                                }),\n                            }\n                        )\n                        .pipe(\n                            flatMap(() =>\n                                userId && this.session.hasValidRefreshToken()\n                                    ? this.tokenService.refresh({ email }).pipe(map(() => undefined))\n                                    : of(undefined)\n                            ),\n                            tap(() => {\n                                disposables.add(\n                                    this.alertService.add({\n                                        severity: 'success',\n                                        message: email\n                                            ? 'You have successfully changed your email address.'\n                                            : 'Your email is confirmed, please <b>login to continue</b> the account opening process.',\n                                    })\n                                )\n                            }),\n                            catchError(error => {\n                                disposables.add(\n                                    this.alertService.add({\n                                        severity: 'danger',\n                                        message: error.message,\n                                    })\n                                )\n                                return of(undefined)\n                            })\n                        )\n                )\n            )\n            .subscribe(() => {\n                // clear alerts\n                this.router.events\n                    .pipe(\n                        filter(event => event instanceof NavigationStart),\n                        take(1)\n                    )\n                    .subscribe(() => {\n                        for (const disposable of disposables) {\n                            disposable.dispose()\n                        }\n                    })\n            })\n    }\n}\n","export default \"<div class=\\\"card shadow b-a-0 e2e-forgot-password\\\">\\n    <div class=\\\"card-body\\\">\\n        <h3 class=\\\"text-primary mb-1\\\">{{ 'common.forgot-password' | translate }}</h3>\\n        <p class=\\\"text-custom\\\">{{ 'common.enter-your-email-to-reset' | translate }}</p>\\n        <form #forgotPasswordForm=\\\"ngForm\\\" class=\\\"form-validation\\\" (ngSubmit)=\\\"submit()\\\" novalidate>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"email\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.email' | translate\\\"\\n                        [(ngModel)]=\\\"email\\\"\\n                        autocomplete=\\\"email\\\"\\n                        #emailInput=\\\"ngModel\\\"\\n                        id=\\\"email\\\"\\n                        name=\\\"email\\\"\\n                        [email]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n                <div *ngIf=\\\"emailInput.invalid && (forgotPasswordForm.submitted || emailInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.reset-password' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"px-0\\\" [routerLink]=\\\"['/login']\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component'\nimport { LoginAlertsService } from './login-alerts.service'\nimport { LoginFormComponent } from './login-form/login-form.component'\nimport { LoginRoutingModule } from './login-routing.module'\nimport { LoginComponent } from './login.component'\nimport { RestorePasswordComponent } from './restore-password/restore-password.component'\n\n@NgModule({\n    declarations: [LoginFormComponent, LoginComponent, ForgotPasswordComponent, RestorePasswordComponent],\n    imports: [CommonModule, LoginRoutingModule],\n    providers: [LoginAlertsService],\n})\nexport class LoginModule {}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component'\nimport { LoginFormComponent } from './login-form/login-form.component'\nimport { LoginAuthGuard } from './login.auth-guard'\nimport { LoginComponent } from './login.component'\nimport { RestorePasswordAuthGuard } from './restore-password/restore-password.auth-guard'\nimport { RestorePasswordComponent } from './restore-password/restore-password.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: LoginComponent,\n        canActivate: [LoginAuthGuard],\n        children: [\n            {\n                path: '',\n                component: LoginFormComponent,\n            },\n            {\n                path: 'forgot-password',\n                component: ForgotPasswordComponent,\n            },\n            {\n                path: 'restore-password',\n                component: RestorePasswordComponent,\n                canActivate: [RestorePasswordAuthGuard],\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [LoginAuthGuard, RestorePasswordAuthGuard],\n})\nexport class LoginRoutingModule {}\n","export default \"<div class=\\\"login-page fullscreen-bg-body\\\">\\n    <div class=\\\"login-box\\\">\\n        <a [routerLink]=\\\"['/']\\\">\\n            <img class=\\\"login-logo\\\" [src]=\\\"getLogo()\\\" />\\n        </a>\\n        <router-outlet></router-outlet>\\n    </div>\\n    <p class=\\\"text-center\\\">\\n        <a class=\\\"text-white e2e-registration-link\\\" [routerLink]=\\\"['/register']\\\">{{ 'login.don-t-have-an-account-register-now' | translate }}</a>\\n    </p>\\n</div>\\n\";","export default \"<div class=\\\"card shadow b-a-0 e2e-login-form\\\">\\n    <div class=\\\"card-body\\\">\\n        <img src=\\\"/img/icons/lock.svg\\\" draggable=\\\"false\\\" class=\\\"float-right\\\" />\\n        <h2 class=\\\"text-primary mb-1\\\">{{ 'common.welcome' | translate }}</h2>\\n        <p class=\\\"text-custom\\\">{{ 'common.log-in-using-your-id' | translate: { value: displayName } }}</p>\\n        <alert-outlet></alert-outlet>\\n        <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\" novalidate *ngIf=\\\"!showTwoFactorForm\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faUser\\\" [fixedWidth]=\\\"true\\\"></fa-icon></span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"email\\\"\\n                        [placeholder]=\\\"'common.email' | translate\\\"\\n                        autocomplete=\\\"username\\\"\\n                        [(ngModel)]=\\\"credentials.email\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faLockAlt\\\" [fixedWidth]=\\\"true\\\"></fa-icon></span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"password\\\"\\n                        [placeholder]=\\\"'common.password' | translate\\\"\\n                        autocomplete=\\\"current-password\\\"\\n                        [(ngModel)]=\\\"credentials.password\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button\\n                    type=\\\"submit\\\"\\n                    class=\\\"btn btn-primary btn-lg btn-block e2e-login-btn\\\"\\n                    [ngClass]=\\\"{ loading: isLoading }\\\"\\n                    [disabled]=\\\"isLoading\\\"\\n                >\\n                    {{ 'common.log-in' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"e2e-forgot-password-link\\\" [routerLink]=\\\"['/login/forgot-password']\\\">{{ 'common.forgot-password' | translate }}?</a>\\n            </div>\\n        </form>\\n        <form name=\\\"formTwoFactor\\\" class=\\\"form-validation\\\" (ngSubmit)=\\\"submit()\\\" autocomplete=\\\"false\\\" novalidate *ngIf=\\\"showTwoFactorForm\\\">\\n            <div class=\\\"alert alert-login alert-info\\\">\\n                <b>{{ 'common.two-factor-is-enabled' | translate }}</b> {{ 'common.please-enter-the-current-code' | translate }}\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faMobile\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        minlength=\\\"6\\\"\\n                        maxlength=\\\"6\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"twoFactorCode\\\"\\n                        [placeholder]=\\\"'common.verification-code' | translate\\\"\\n                        [(ngModel)]=\\\"twoFactorCode\\\"\\n                        [focus]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.verify' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a href (click)=\\\"revert(); $event.preventDefault()\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"card shadow b-a-0\\\">\\n    <div class=\\\"card-body\\\">\\n        <h2 class=\\\"text-primary mb-1\\\">{{ 'common.restore-password' | translate }}</h2>\\n        <p class=\\\"mb-3 text-gray\\\">{{ 'common.choose-new-password' | translate }}</p>\\n        <form\\n            #passwordForm=\\\"ngForm\\\"\\n            class=\\\"form-validation\\\"\\n            (ngSubmit)=\\\"submit()\\\"\\n            [ngClass]=\\\"{ 'ng-submitted': passwordForm.submitted }\\\"\\n            autocomplete=\\\"false\\\"\\n            novalidate\\n        >\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.enter-new-password' | translate\\\"\\n                        [(ngModel)]=\\\"password\\\"\\n                        name=\\\"password\\\"\\n                        autocomplete=\\\"new-password\\\"\\n                        #passwordInput=\\\"ngModel\\\"\\n                        [passwordStrength]=\\\"requiredPasswordStrength\\\"\\n                        (onEntropyChange)=\\\"passwordStrength = $event\\\"\\n                        required\\n                    />\\n                </div>\\n                <div class=\\\"mt-2\\\">\\n                    <password-strength-bar [requiredStrength]=\\\"requiredPasswordStrength\\\" [strength]=\\\"passwordStrength\\\"></password-strength-bar>\\n                </div>\\n                <div *ngIf=\\\"passwordInput.invalid && (passwordForm.submitted || passwordInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.weakPassword\\\">\\n                        {{ 'common.password-is-too-weak' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faSyncAlt\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.repeat-your-password' | translate\\\"\\n                        [(ngModel)]=\\\"repeatedPassword\\\"\\n                        name=\\\"repeatedPassword\\\"\\n                        autocomplete=\\\"off\\\"\\n                        #repeatedPasswordInput=\\\"ngModel\\\"\\n                        [matchPassword]=\\\"password\\\"\\n                        required\\n                    />\\n                </div>\\n                <div *ngIf=\\\"repeatedPasswordInput.invalid && (passwordForm.submitted || repeatedPasswordInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.required\\\">\\n                        {{ 'common.this-is-required' | translate }}\\n                    </div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.matchPassword\\\">\\n                        {{ 'common.password-do-not-match' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.change-password' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"px-0\\\" [routerLink]=\\\"['/login']\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","import { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faLockAlt, faMobile, faUser } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Sentry from '@sentry/browser'\nimport { throwError } from 'rxjs'\nimport { catchError, flatMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { AlertService } from '../../common/services/alert.service'\nimport { LoginRedirectService } from '../../common/services/login-redirect.service'\nimport { LoginService } from '../../common/services/login.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\nexport interface Credentials {\n    email?: string\n    password?: string\n    refreshToken?: string\n}\n\n@Component({\n    selector: 'login-form',\n    templateUrl: 'login-form.component.html',\n})\nexport class LoginFormComponent {\n    public credentials: Credentials = {}\n    public twoFactorCode?: string\n    @ViewChild('loginForm')\n    public loginForm: NgForm\n    public isLoading = false\n    public showTwoFactorForm: boolean\n    public faLockAlt = faLockAlt\n    public faUser = faUser\n    public faMobile = faMobile\n    public displayName = environment.displayName\n\n    constructor(\n        private toastr: ToastrService,\n        public alertService: AlertService,\n        private loginService: LoginService,\n        private loginAlerts: LoginAlertsService,\n        private redirectService: LoginRedirectService,\n        private route: ActivatedRoute,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        this.isLoading = true\n        this.loginService\n            .login({ twoFactorCode: this.twoFactorCode, ...this.credentials, email: this.credentials.email?.trim() })\n            .pipe(\n                flatMap(() => this.redirectService.redirect(this.route.snapshot, true)),\n                catchError(error => {\n                    for (const disposable of this.loginAlerts.disposables) {\n                        disposable.dispose()\n                    }\n                    // Two Factor auth is enabled\n                    if (error.status === 401 && error.name === 'Require2FACodeError') {\n                        // ask for 2f code and repeat submit\n                        this.showTwoFactorForm = true\n                    } else {\n                        if (!this.showTwoFactorForm) {\n                            this.credentials.password = ''\n                        }\n                        this.loginAlerts.disposables.add(this.alertService.add(error))\n                    }\n                    this.isLoading = false\n                    return throwError(error)\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(\n                    `${this.translate.instant('login-form.your-login-has-been-approved')}`,\n                    `${this.translate.instant('login-form.server-authentication')}`\n                )\n                if (window.SENTRY_DSN) {\n                    Sentry.addBreadcrumb({\n                        category: 'auth',\n                        message: 'Authenticated user ' + this.credentials.email,\n                        level: Sentry.Severity.Info,\n                    })\n                }\n            })\n    }\n\n    /* Resets the form to initial state */\n    public revert(): void {\n        if (this.isLoading) {\n            return\n        }\n        this.credentials = {}\n        this.showTwoFactorForm = false\n    }\n}\n","import { Component, OnDestroy } from '@angular/core'\nimport { environment } from 'src/environments/environment'\nimport { LoginAlertsService } from './login-alerts.service'\n\n@Component({\n    selector: 'login',\n    templateUrl: 'login.component.html',\n})\nexport class LoginComponent implements OnDestroy {\n    public appName = environment.appName\n\n    constructor(private loginAlerts: LoginAlertsService) {}\n\n    public ngOnDestroy(): void {\n        for (const disposable of this.loginAlerts.disposables) {\n            disposable.dispose()\n            this.loginAlerts.disposables.delete(disposable)\n        }\n    }\n\n    public getLogo(): string {\n        switch (environment.appName) {\n            case 'birex':\n                return '/img/brand/logo-white-vertical.svg'\n            default:\n                return '/img/brand/logo-white-horizontal.svg'\n        }\n    }\n}\n"]}