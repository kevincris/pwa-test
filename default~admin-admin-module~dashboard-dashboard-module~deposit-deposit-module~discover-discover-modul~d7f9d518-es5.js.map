{"version":3,"sources":["webpack:///src/app/common/transaction/transaction-overview/transaction-overview.component.ts","webpack:///src/app/common/trades/trade.mixins.ts","webpack:///src/app/common/logged-in.auth-guard.ts","webpack:///src/app/store/fees/fees.store.ts","webpack:///src/app/common/models/accounting/wallet.model.ts","webpack:///src/app/store/fees/fees.query.ts","webpack:///src/app/common/transaction/transaction-view/transaction-view.component.html","webpack:///src/app/common/transaction/transaction-slip/transaction-slip.component.html","webpack:///src/app/common/services/sgpmx.service.ts","webpack:///src/app/common/models/core/address.model.ts","webpack:///src/app/common/transaction/transaction-slip/transaction-slip.component.ts","webpack:///src/app/common/transaction/transaction-overview/transaction-overview.component.html","webpack:///src/app/common/transaction/transaction-flow/transaction-flow.component.ts","webpack:///src/app/common/transaction/transaction-files/transaction-files.component.ts","webpack:///src/app/common/models/accounting/beneficiary.model.ts","webpack:///src/app/common/models/accounting/transaction.model.ts","webpack:///src/app/common/transaction/transaction.module.ts","webpack:///src/app/common/transaction/transaction-files/transation-files-modal/transaction-files-modal.component.ts","webpack:///src/app/common/transaction/transaction-flow/transaction-flow.component.html","webpack:///src/app/common/transaction/transaction-files/transation-files-modal/transaction-files-modal.component.html","webpack:///src/app/common/transaction/transaction-files/transaction-files.component.html","webpack:///src/app/common/services/transaction.service.ts","webpack:///src/app/common/transaction/transaction-view/transaction-view.component.ts"],"names":["TransactionOverviewComponent","http","activeModal","session","sgpmxService","translate","calculateFee","isZero","faTimes","faCircleNotch","appName","displayName","fetchEvent","subscriptions","add","userStream","subscribe","user","pipe","transaction","id","get","Object","assign","next","changes","unsubscribe","status","type","instant","isReceiver","externalReference","includes","split","receivedAmount","div","amount","toFixed","currency","decimalPlaces","card","code","receivedCurrency","creditableAmount","settledAmount","calculateFeeInUsd","isPlatformTransfer","selector","template","getTradeGrandTotal","trade","value","quantity","times","price","side","plus","fee","gst","minus","getTradeValue","LoggedInAuthGuard","router","_","state","isAuthenticated","parseUrl","url","providedIn","FeesStore","name","idKey","Wallet","data","FeesQuery","store","query","selectEntity","entity","method","currencyCode","usdFee","SgpmxService","currenciesQuery","feesQuery","findByPrimaryAttributes","usd","transferFee","gstFee","usdValue","convert","feeAmount","relative","fixed","min","isLessThan","max","isGreaterThan","Address","TransactionSlipComponent","TransactionFlowComponent","walletOwnerAccountNumber","wallet","coin","isSender","baseWallet","counterWallet","accountNumber","toLowerCase","TransactionFilesComponent","toastr","confirmation","files","existingFiles","isLoading","file","show","text","confirmText","confirmClass","result","CONFIRMED","success","map","post","headers","encodeURIComponent","Beneficiary","accountHolderAddress","bankAddress","intermediateBankAddress","methodMap","internal","crypto","local","swift","Transaction","requestedCurrency","beneficiary","isRootWallet","components","TransactionModule","declarations","exports","imports","TransactionFilesModalComponent","TransactionService","changeEvent","searchEvent","patch","op","path","transactionModel","isTrade","isTransfer","TransactionViewComponent","transactionService","faQuestionCircle","onUpdate","onCancel","activeTab","isMarkingAsPaid","isUploading","isCancelling","transactionMethodMap","faFileSearch","hasReceipt","params","res","hasInvoice","getTransactionFiles","changeStatus","emit","cancelText","cancelClass","cryptoForm","submitted","invalid","reference","navigateByUrl","skipLocationChange","then","navigate","close","substring","createSignedUrl","signedUrl","window","open","invoiceId"],"mappings":"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","file":"default~admin-admin-module~dashboard-dashboard-module~deposit-deposit-module~discover-discover-modul~d7f9d518-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, Optional, SimpleChanges } from '@angular/core'\nimport { faCircleNotch, faTimes } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable, Subject, Subscription } from 'rxjs'\nimport { filter, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Transaction as ITransaction } from '../../api-interfaces'\nimport { isZero } from '../../common.mixin'\nimport { Transaction } from '../../models/accounting/transaction.model'\nimport { User } from '../../models/core/user.model'\nimport { SessionService } from '../../services/session.service'\nimport { SgpmxService } from '../../services/sgpmx.service'\nimport {\n    calculateCreditableAmount,\n    calculateDeductableAmount,\n    calculateFee,\n    isReceiver,\n} from '../../transactions.mixins'\n\n@Component({\n    selector: 'transaction-overview',\n    templateUrl: 'transaction-overview.component.html',\n})\nexport class TransactionOverviewComponent implements OnInit, OnChanges, OnDestroy {\n    @Input()\n    public transaction: ITransaction\n\n    public calculateFee = calculateFee\n    public isZero = isZero\n    public faTimes = faTimes\n    public faCircleNotch = faCircleNotch\n    public appName = environment.appName\n    public displayName = environment.displayName\n\n    private user: IUser | null\n    private fetchEvent = new Subject<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        @Optional() public activeModal: NgbActiveModal,\n        public session: SessionService,\n        public sgpmxService: SgpmxService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.user = new User(user)\n            })\n        )\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    filter(() => !!this.transaction.id),\n                    switchMap(() => this.http.get<ITransaction>(`/transactions/${this.transaction.id}`))\n                )\n                .subscribe(transaction => {\n                    Object.assign(this.transaction, transaction)\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.fetchEvent.next()\n        }\n    }\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public buildActionLabel(transaction: ITransaction): string {\n        if (transaction.status === 'completed') {\n            if (transaction.type === 'deposit') {\n                return this.translate.instant('common.deposited')\n            }\n            return this.isReceiver ? 'Received' : 'Sent'\n        }\n        if (transaction.type === 'deposit') {\n            return this.translate.instant('common.requesting')\n        }\n        return this.translate.instant('common.sending')\n    }\n\n    public showFees(transaction: ITransaction): boolean {\n        return !this.isReceiver || transaction.type === 'deposit'\n    }\n\n    public formatTxid(externalReference: string): string {\n        return externalReference.includes(':') ? externalReference.split(':')[1] : externalReference\n    }\n\n    public calculateExchangeRate(): string {\n        if (this.transaction.type === 'deposit' && this.transaction.receivedAmount) {\n            return new BigNumber(this.transaction.receivedAmount)\n                .div(this.transaction.amount)\n                .toFixed(this.transaction.currency.decimalPlaces, 1)\n        }\n        return ''\n    }\n\n    public determineAmount(): string | null {\n        if (this.transaction.card && this.transaction.currency.code !== this.transaction.receivedCurrency?.code) {\n            return this.transaction.receivedAmount\n        }\n        return ['card-order', 'payment'].includes(this.transaction.type)\n            ? this.calculateFee(this.transaction)\n            : this.creditableAmount\n    }\n\n    public get isReceiver(): boolean {\n        return isReceiver(this.transaction, this.user)\n    }\n\n    public get creditableAmount(): string {\n        return this.transaction.id ? this.transaction.settledAmount : calculateCreditableAmount(this.transaction)\n    }\n\n    public get deductableAmount(): string {\n        // For preview\n        if (!this.transaction.id || this.transaction.type === 'payment') {\n            return calculateDeductableAmount(this.transaction)\n        }\n        return this.transaction.type !== 'deposit' && this.isReceiver\n            ? this.transaction.settledAmount\n            : calculateDeductableAmount(this.transaction)\n    }\n\n    public isSgpmxMetalTransfer(): boolean {\n        return (\n            this.appName === 'sgpmx' &&\n            this.transaction.type === 'transfer' &&\n            ['AU', 'AG'].includes(this.transaction.currency?.code)\n        )\n    }\n\n    public calculateFeeInUsd(): Observable<string> {\n        return this.sgpmxService.calculateFeeInUsd(this.transaction)\n    }\n\n    public isPlatformTransfer(): boolean {\n        return new Transaction(this.transaction).isPlatformTransfer()\n    }\n}\n","import BigNumber from 'bignumber.js'\nimport { Trade } from '../api-interfaces'\n\nexport function getTradeGrandTotal(trade: Trade): string {\n    const value = new BigNumber(trade.quantity).times(trade.price)\n    return (\n        trade.side === 'BUY'\n            ? value.plus(new BigNumber(trade.fee).plus(trade.gst))\n            : value.minus(new BigNumber(trade.fee).plus(trade.gst))\n    ).toFixed(2)\n}\n\nexport function getTradeValue(trade: Trade): string {\n    return new BigNumber(trade.quantity).times(trade.price).toFixed(2)\n}\n","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { ICurrency, IUser, Product, Wallet as IWallet } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\n\nexport class Wallet implements IWallet {\n    public id: string\n    public balance: string\n    public user: IUser | null\n    public product: Product | null\n    public currency: ICurrency\n    public availableBalance: string\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data?: any) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n        }\n    }\n\n    public isRootWallet(): boolean {\n        return this.user === null\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">Txid: <uuid [value]=\\\"transaction.id\\\" ngClass=\\\"text-white\\\"></uuid></h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\" *ngIf=\\\"activeModal\\\">&times;</button>\\n</div>\\n<ul class=\\\"nav nav-tabs-alt nav-fill\\\">\\n    <li class=\\\"nav-item\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-overview\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'overview' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'overview'\\\"\\n        >\\n            {{ 'common.overview' | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"transaction.beneficiary\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-beneficiary\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'beneficiary' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'beneficiary'\\\"\\n        >\\n            {{ (transaction.type === 'deposit' ? 'common.instructions' : 'common.beneficiary') | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"transaction.method !== 'crypto'\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-attachments\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'attachments' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'attachments'\\\"\\n        >\\n            {{ 'common.attachments' | translate }}\\n        </a>\\n    </li>\\n</ul>\\n<div class=\\\"modal-body transaction-view e2e-transaction-view\\\">\\n    <ng-container *ngIf=\\\"activeTab === 'overview'\\\">\\n        <transaction-overview [transaction]=\\\"transaction\\\"></transaction-overview>\\n        <div class=\\\"row b-t-1 p-2\\\">\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.type' | translate }}</div>\\n                <div>{{ transaction.type | startCase }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.method !== 'internal'\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.method' | translate }}</div>\\n                <div>{{ transactionMethodMap[transaction.method] }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.status' | translate }}</div>\\n                <div\\n                    class=\\\"text-capitalize\\\"\\n                    [ngClass]=\\\"{\\n                        'text-success': transaction.status === 'completed',\\n                        'text-info': transaction.status === 'pending',\\n                        'text-warning': transaction.status === 'processing',\\n                        'text-danger': ['cancelled', 'failed'].includes(transaction.status)\\n                    }\\\"\\n                >\\n                    {{ transaction.status | startCase }}\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"transaction.purpose\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.purpose' | translate }}</div>\\n                <div>{{ transaction.purpose | startCase }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.sourceOfFunds\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.source-of-funds' | translate }}</div>\\n                <div>{{ transaction.sourceOfFunds | startCase }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.created-at' | translate }}</div>\\n                <div>{{ transaction.createdAt | date: 'medium' }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.settledAt\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">Settled at</div>\\n                <div>{{ transaction.settledAt | date: 'medium' }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row b-t-1 p-2\\\" *ngIf=\\\"trade\\\">\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.trade' | translate }} ID</div>\\n                <uuid [value]=\\\"trade.id\\\" ngClass=\\\"text-gray\\\"></uuid>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.symbol' | translate }}</div>\\n                <div>{{ trade.symbol }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'trade-type' | translate }}</div>\\n                <div>{{ trade.side }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.spot-price' | translate }}</div>\\n                <div>{{ trade.price | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.amount' | translate }}</div>\\n                <div>{{ trade.quantity | amount: 7 }} {{ trade.symbol.split('/')[0] }}</div>\\n                <div class=\\\"text-muted font-sm\\\">{{ getTradeValue(trade) | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.fee' | translate }}</div>\\n                <div>{{ trade.fee | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">GST</div>\\n                <div>{{ trade.gst | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.grand-total' | translate | sentenceCase }}</div>\\n                <div>{{ getTradeGrandTotal(trade) | amount: 2 }} USD</div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'beneficiary'\\\">\\n        <ng-container *ngIf=\\\"transaction.method === 'crypto'; else depositInstruction\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"depositAddress\\\">{{ transaction.type | startCase }} {{ 'common.address' | translate }}</label>\\n                <div class=\\\"input-group input-group-lg mb-3\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"depositAddress\\\"\\n                        name=\\\"depositAddress\\\"\\n                        [value]=\\\"transaction.beneficiary?.accountNumber\\\"\\n                        disabled\\n                    />\\n                    <copy-btn\\n                        class=\\\"input-group-append\\\"\\n                        [value]=\\\"transaction.beneficiary?.accountNumber\\\"\\n                        [disabled]=\\\"!transaction.beneficiary\\\"\\n                    ></copy-btn>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"depositAmount\\\">{{ transaction.type | startCase }} {{ 'common.amount' | translate }}</label>\\n                <div class=\\\"input-group input-group-lg mb-3\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"depositAmount\\\"\\n                        name=\\\"depositAmount\\\"\\n                        value=\\\"{{ transaction.amount | amount }}\\\"\\n                        disabled\\n                    />\\n                    <div class=\\\"input-group-append\\\">\\n                        <span class=\\\"input-group-text\\\">{{ transaction.currency?.code }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <form\\n                *ngIf=\\\"transaction.type === 'deposit'\\\"\\n                class=\\\"crypto-form form-validation\\\"\\n                #cryptoForm=\\\"ngForm\\\"\\n                [ngClass]=\\\"{ 'ng-submitted': cryptoForm.submitted }\\\"\\n                autocomplete=\\\"false\\\"\\n                novalidate\\n            >\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"font-md\\\" for=\\\"txid\\\">\\n                        Transaction ID\\n                        <a\\n                            href\\n                            (click)=\\\"$event.preventDefault()\\\"\\n                            [ngbPopover]=\\\"txidContent\\\"\\n                            [popoverTitle]=\\\"txidTitle\\\"\\n                            triggers=\\\"mouseenter:mouseleave\\\"\\n                            ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon\\n                        ></a>\\n                    </label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control form-control-lg\\\"\\n                        id=\\\"txid\\\"\\n                        name=\\\"txid\\\"\\n                        [(ngModel)]=\\\"transaction.reference\\\"\\n                        [disabled]=\\\"transaction.status !== 'pending'\\\"\\n                        #txidInput=\\\"ngModel\\\"\\n                        required\\n                    />\\n                    <div *ngIf=\\\"txidInput.invalid && (cryptoForm.submitted || txidInput.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"txidInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    </div>\\n                </div>\\n            </form>\\n            <div class=\\\"callout callout-info\\\" *ngIf=\\\"transaction.type === 'deposit'\\\">\\n                <p>By using this deposit address, you confirm that you accept our Terms & Conditions and Data Privacy Notice</p>\\n                <p>\\n                    <b>Disclaimer:</b> All funds are deposited into a cold wallet provided to Aerapass by a third party service provider. Aerapass\\n                    does not operate any virtual asset storage or exchange facilities.\\n                </p>\\n            </div>\\n        </ng-container>\\n        <ng-template #depositInstruction>\\n            <div class=\\\"p-1\\\">\\n                <deposit-instruction [transaction]=\\\"transaction\\\"></deposit-instruction>\\n            </div>\\n        </ng-template>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'attachments'\\\">\\n        <dropzone\\n            *ngIf=\\\"\\n                ['deposit', 'transfer', 'withdrawal'].includes(transaction.type) &&\\n                ['pending', 'processing', 'completed'].includes(transaction.status)\\n            \\\"\\n            class=\\\"w-100\\\"\\n            [files]=\\\"files\\\"\\n            [existingFiles]=\\\"existingFiles\\\"\\n            [canDelete]=\\\"false\\\"\\n            [showTable]=\\\"false\\\"\\n        ></dropzone>\\n        <div class=\\\"table-responsive\\\">\\n            <table\\n                class=\\\"table table-hover align-items-center table-borderless mb-0\\\"\\n                *ngIf=\\\"\\n                    (files && files.length > 0) ||\\n                        (existingFiles && existingFiles.length > 0) ||\\n                        ['deposit', 'withdrawal'].includes(transaction.type) ||\\n                        hasReceipt ||\\n                        transaction.reference?.startsWith('Invoice');\\n                    else noFile\\n                \\\"\\n            >\\n                <thead>\\n                    <tr>\\n                        <th scope=\\\"col\\\" colspan=\\\"2\\\">{{ 'common.file-name' | translate }}</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngIf=\\\"transaction.reference?.startsWith('Invoice')\\\">\\n                        <th>\\n                            <a href (click)=\\\"$event.preventDefault(); openInvoice(transaction?.reference)\\\">{{ transaction.reference }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment\\\" *ngIf=\\\"['deposit', 'withdrawal'].includes(transaction.type)\\\">\\n                        <th scope=\\\"row\\\">\\n                            <a href class=\\\"text-primary\\\" (click)=\\\"$event.preventDefault(); openProformaInvoice()\\\">{{\\n                                'common.proforma-invoice' | translate\\n                            }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment\\\" *ngIf=\\\"hasReceipt\\\">\\n                        <th scope=\\\"row\\\">\\n                            <a href class=\\\"text-primary\\\" (click)=\\\"$event.preventDefault(); openSgpmxInvoice()\\\">{{ 'common.invoice' | translate }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment e2e-attachment\\\" *ngFor=\\\"let existingFile of existingFiles\\\">\\n                        <th scope=\\\"row\\\">\\n                            <file-item [file]=\\\"existingFile\\\"></file-item>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment e2e-attachment\\\" *ngFor=\\\"let item of files; let i = index\\\">\\n                        <th scope=\\\"row\\\">\\n                            <div class=\\\"text-primary\\\">{{ item.name }}</div>\\n                            <small class=\\\"text-muted\\\">{{ item.size / 1024 / 1024 | number: '.2' }} MB</small>\\n                        </th>\\n                        <td class=\\\"text-right\\\" nowrap>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" (click)=\\\"files.splice(i, 1)\\\">\\n                                <fa-icon [icon]=\\\"faTimes\\\"></fa-icon>\\n                            </button>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n        <ng-template #noFile>\\n            <div class=\\\"text-center mt-4 mb-3\\\">\\n                <fa-icon class=\\\"text-muted\\\" [icon]=\\\"faFileSearch\\\" size=\\\"3x\\\"></fa-icon>\\n                <h3 class=\\\"text-muted mt-2\\\">{{ 'common.no-files-found' | translate }}</h3>\\n            </div>\\n        </ng-template>\\n    </ng-container>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <ng-container *ngIf=\\\"['deposit', 'withdrawal', 'transfer'].includes(transaction.type) && (canMarkAsPaid || canUpload || canCancel); else close\\\">\\n        <button\\n            *ngIf=\\\"canMarkAsPaid\\\"\\n            class=\\\"btn btn-success btn-w-sm e2e-mark-as-paid-btn\\\"\\n            [ngClass]=\\\"{ loading: isMarkingAsPaid }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"transaction.method === 'crypto' ? markCryptoDepositAsPaid() : markAsPaid()\\\"\\n        >\\n            {{ 'common.mark-as-paid' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"canUpload\\\"\\n            class=\\\"btn btn-success btn-w-sm e2e-upload-attachment-btn\\\"\\n            [ngClass]=\\\"{ loading: isUploading }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"uploadFiles()\\\"\\n        >\\n            {{ 'common.upload-files' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"canCancel\\\"\\n            class=\\\"btn btn-danger btn-w-sm e2e-cancel-transaction-btn\\\"\\n            [ngClass]=\\\"{ loading: isCancelling }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"cancel()\\\"\\n        >\\n            {{ 'common.cancel' | translate }}\\n        </button>\\n    </ng-container>\\n    <ng-template #close>\\n        <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n    </ng-template>\\n</div>\\n\\n<ng-template #txidTitle> {{ 'common.what-is-transaction-id' | translate }} </ng-template>\\n<ng-template #txidContent>\\n    <p>{{ 'common.after-submitting-transaction' | translate }}</p>\\n    <p>{{ 'common.please-paste-transaction-id' | translate }}</p>\\n</ng-template>\\n\";","export default \"<div class=\\\"transaction-slip\\\">\\n    <button type=\\\"button\\\" class=\\\"close close-modal float-right\\\" (click)=\\\"activeModal.close()\\\" *ngIf=\\\"activeModal\\\">&times;</button>\\n    <p class=\\\"text-center\\\" *ngIf=\\\"transaction.id\\\">\\n        <span class=\\\"font-weight-bold\\\">{{ transaction.id }}</span>\\n    </p>\\n    <transaction-overview [transaction]=\\\"transaction\\\"></transaction-overview>\\n</div>\\n\";","import { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, of } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { Transaction } from '../api-interfaces'\nimport { Currency } from '../models/accounting/currency.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SgpmxService {\n    constructor(private currenciesQuery: CurrenciesQuery, private feesQuery: FeesQuery) {}\n\n    public calculateFeeInUsd(transaction: Partial<Transaction> | Transaction): Observable<string> {\n        if (!transaction.currency || !transaction.amount) {\n            return of('0')\n        }\n        return forkJoin([\n            this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n            this.currenciesQuery.selectEntity(transaction.currency.code).pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'transfer',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'gst',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n        ]).pipe(\n            map(([usd, currency, transferFee, gstFee]) => {\n                const usdValue = new BigNumber(Currency.convert(transaction.amount!, currency!, usd!)).decimalPlaces(2)\n                let feeAmount = usdValue.times(transferFee?.relative || 0).plus(transferFee?.fixed || 0)\n\n                if (transferFee?.min && feeAmount.isLessThan(transferFee.min)) {\n                    feeAmount = new BigNumber(transferFee.min)\n                } else if (transferFee?.max && feeAmount.isGreaterThan(transferFee.max)) {\n                    feeAmount = new BigNumber(transferFee.max)\n                }\n\n                let gst = feeAmount.times(gstFee?.relative || 0)\n                if (!feeAmount.isZero() && gstFee?.min && gst.isLessThan(gstFee.min)) {\n                    gst = new BigNumber(gstFee.min)\n                } else if (!feeAmount.isZero() && gstFee?.max && gst.isGreaterThan(gstFee.max)) {\n                    gst = new BigNumber(gstFee.max)\n                }\n\n                return feeAmount.plus(gst).toFixed(2)\n            })\n        )\n    }\n}\n","import { IAddress } from '../../api-interfaces'\n\nexport class Address implements IAddress {\n    public id: string\n    public addressLine1: string\n    public addressLine2: string\n    public zipCode: string\n    public city: string\n    public state: string\n    public country: string\n\n    constructor(data: IAddress) {\n        Object.assign(this, data)\n    }\n}\n","import { Component, Input, Optional } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Transaction } from '../../api-interfaces'\n\n@Component({\n    selector: 'transaction-slip',\n    templateUrl: 'transaction-slip.component.html',\n})\nexport class TransactionSlipComponent {\n    @Input()\n    public transaction: Transaction\n\n    constructor(@Optional() public activeModal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"mb-2 text-center\\\">\\n    <span class=\\\"label label-success mb-1\\\">{{ buildActionLabel(transaction) }}</span>\\n    <h2 class=\\\"text-primary mb-0\\\">{{ deductableAmount | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}</h2>\\n</div>\\n<transaction-flow [transaction]=\\\"transaction\\\"></transaction-flow>\\n<div class=\\\"table-responsive my-2\\\">\\n    <table class=\\\"table table-borderless mb-0\\\">\\n        <tbody>\\n            <tr\\n                *ngIf=\\\"\\n                    transaction.id &&\\n                    transaction.type === 'deposit' &&\\n                    transaction.method !== 'card' &&\\n                    transaction.receivedCurrency &&\\n                    transaction.receivedCurrency.code !== transaction.currency?.code\\n                \\\"\\n            >\\n                <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.conversion' | translate }}</th>\\n                <td class=\\\"py-2 text-right text-muted\\\">\\n                    {{ transaction.receivedAmount | amount: transaction.receivedCurrency?.decimalPlaces }} {{ transaction.receivedCurrency?.code }} =\\n                    {{ transaction.amount | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n                    <div class=\\\"small\\\">\\n                        1 {{ transaction.currency?.code }} = {{ calculateExchangeRate() }} {{ transaction.receivedCurrency?.code }}\\n                    </div>\\n                </td>\\n            </tr>\\n            <ng-container *ngIf=\\\"!isSgpmxMetalTransfer(); else metalTransferFees\\\">\\n                <tr *ngIf=\\\"showFees(transaction)\\\">\\n                    <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                    <td class=\\\"py-2 text-right text-muted\\\">\\n                        {{ calculateFee(transaction) | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n                        <div class=\\\"small\\\">\\n                            <ng-container\\n                                *ngIf=\\\"\\n                                    (transaction.fixedFee && !isZero(transaction.fixedFee)) ||\\n                                        (transaction.relativeFee && !isZero(transaction.relativeFee));\\n                                    else free\\n                                \\\"\\n                            >\\n                                (<ng-container *ngIf=\\\"transaction.fixedFee && !isZero(transaction.fixedFee)\\\"\\n                                    >{{ transaction.fixedFee | amount: transaction.currency?.decimalPlaces }}\\n                                    {{ transaction.currency?.code }}</ng-container\\n                                >\\n                                <ng-container\\n                                    *ngIf=\\\"\\n                                        transaction.fixedFee &&\\n                                        !isZero(transaction.fixedFee) &&\\n                                        transaction.relativeFee &&\\n                                        !isZero(transaction.relativeFee)\\n                                    \\\"\\n                                >\\n                                    +\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"transaction.relativeFee && !isZero(transaction.relativeFee)\\\">{{\\n                                    transaction.relativeFee | percent: '1.2'\\n                                }}</ng-container\\n                                >)\\n                            </ng-container>\\n                            <ng-template #free>({{ 'common.free-of-charge' | translate | lowercase }})</ng-template>\\n                        </div>\\n                    </td>\\n                </tr>\\n            </ng-container>\\n            <ng-template #metalTransferFees>\\n                <tr *ngIf=\\\"!transaction.id\\\">\\n                    <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                    <td class=\\\"py-2 text-right text-muted\\\">{{ calculateFeeInUsd() | async | amount }} USD</td>\\n                </tr>\\n            </ng-template>\\n            <tr>\\n                <th class=\\\"py-2 text-right font-weight-bold\\\">\\n                    <ng-container *ngIf=\\\"!transaction.card; else cardTransaction\\\">\\n                        {{ 'common.recipient' | translate }} {{ (transaction.status === 'completed' ? 'common.got' : 'common.gets') | translate }}\\n                    </ng-container>\\n                    <ng-template #cardTransaction>\\n                        {{ 'common.card' | translate }} {{ (transaction.type === 'withdrawal' ? 'common.loaded' : 'common.unloaded') | translate }}\\n                        {{ 'common.with' | translate }}\\n                    </ng-template>\\n                </th>\\n                <td class=\\\"py-2 text-right text-primary\\\">\\n                    {{ determineAmount() | amount: transaction.currency?.decimalPlaces }}\\n                    {{\\n                        transaction.card && transaction.currency.code !== transaction.receivedCurrency?.code\\n                            ? transaction.receivedCurrency?.code\\n                            : transaction.currency?.code\\n                    }}\\n                </td>\\n            </tr>\\n        </tbody>\\n    </table>\\n    <ng-container *ngIf=\\\"transaction.comment\\\">\\n        <div class=\\\"mt-2\\\">\\n            <p>\\n                <span class=\\\"text-primary\\\">\\n                    <ng-container *ngIf=\\\"!isReceiver\\\">\\n                        {{ isPlatformTransfer() ? displayName : transaction.baseWallet?.user?.name }}\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"isReceiver\\\">\\n                        {{ isPlatformTransfer() ? displayName : transaction.counterWallet?.user?.name }}\\n                    </ng-container>\\n                </span>\\n                {{ 'common.wrote-a-comment' | translate }}:\\n            </p>\\n            <div class=\\\"transaction-slip-comment\\\">\\n                {{ transaction.comment }}\\n            </div>\\n        </div>\\n    </ng-container>\\n    <p class=\\\"text-center\\\" *ngIf=\\\"transaction.reference\\\">\\n        <b>{{ 'common.reference' | translate }}:</b> {{ transaction.reference }}\\n    </p>\\n    <p class=\\\"mt-4 text-truncate\\\" *ngIf=\\\"transaction.externalReference\\\">\\n        <b>Txid:</b> <copy-icon [value]=\\\"formatTxid(transaction.externalReference)\\\" class=\\\"ml-2 mr-1\\\"></copy-icon>\\n        <span class=\\\"text-muted\\\">{{ formatTxid(transaction.externalReference) }}</span>\\n    </p>\\n</div>\\n\";","import { Component, Input } from '@angular/core'\nimport { IconDefinition as BrandIconDefinition } from '@fortawesome/free-brands-svg-icons'\nimport {\n    faChartNetwork,\n    faCreditCard,\n    faFireAlt,\n    faGlobeAmericas,\n    faUniversity,\n    faWallet,\n} from '@fortawesome/pro-regular-svg-icons'\nimport { IconDefinition } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { environment } from 'src/environments/environment'\nimport { Transaction, TransactionMethod, Wallet } from '../../api-interfaces'\nimport { formatAccountNumber, isAccountNumber } from '../../common.mixin'\nimport { SessionService } from '../../services/session.service'\nimport { buildWalletOwnerAccountNumber } from '../../transactions.mixins'\n\n@Component({\n    selector: 'transaction-flow',\n    templateUrl: 'transaction-flow.component.html',\n})\nexport class TransactionFlowComponent {\n    @Input()\n    public transaction: Transaction\n    public displayName = environment.displayName\n    constructor(public session: SessionService, public translate: TranslateService) {}\n\n    public walletOwnerAccountNumber = (wallet: Wallet | null) =>\n        buildWalletOwnerAccountNumber(wallet, environment.displayName)\n\n    public prettifyCoinName(coin: TransactionMethod | null): string {\n        switch (coin) {\n            case 'crypto':\n                return 'Crypto'\n            default:\n                return ''\n        }\n    }\n\n    public determineTransactionIcon(transaction: Transaction, isSender = true): IconDefinition | BrandIconDefinition {\n        if (transaction.type === 'deposit') {\n            if (isSender) {\n                if (transaction.method === 'card') {\n                    return faCreditCard\n                }\n                return faUniversity\n            }\n        }\n        if (transaction.type === 'withdrawal') {\n            if (!isSender) {\n                if (transaction.method === 'card') {\n                    return faCreditCard\n                }\n                return faUniversity\n            }\n        }\n        if (transaction.type === 'mint') {\n            if (isSender) {\n                if (transaction.baseWallet) {\n                    return faWallet\n                }\n                return faGlobeAmericas\n            }\n            if (transaction.counterWallet) {\n                return faWallet\n            }\n            return faFireAlt\n        }\n\n        if (transaction.type === 'investment') {\n            return faChartNetwork\n        }\n        return faWallet\n    }\n\n    public buildCounterWalletName(): string {\n        if (!this.transaction.counterWallet) {\n            return ''\n        }\n        const { user } = this.transaction.counterWallet\n        if (user) {\n            return `${\n                isAccountNumber(user.accountNumber) ? formatAccountNumber(user.accountNumber) : user.accountNumber\n            }`\n        }\n        return environment.displayName\n    }\n\n    public buildFromText(): string {\n        if (environment.appName === 'sgpmx' && this.transaction.type === 'trade') {\n            return this.transaction.currency.code === 'USD' ? this.translate.instant('common.debit') : 'Sell'\n        }\n        if (this.transaction.type === 'account-fee') {\n            return this.translate.instant('common.payment-from')\n        }\n        return `${this.transaction.type} ${this.translate.instant('common.from').toLowerCase()}`\n    }\n\n    public buildToText(): string {\n        if (environment.appName === 'sgpmx' && this.transaction.type === 'trade') {\n            return this.transaction.currency.code === 'USD' ? 'Credit' : 'Buy'\n        }\n        if (this.transaction.type === 'account-fee') {\n            return this.translate.instant('common.payment-for')\n        }\n        return `${this.transaction.type} ${this.translate.instant('common.to').toLowerCase()}`\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { remove } from 'lodash'\nimport { forkJoin, Subject, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, switchMap } from 'rxjs/operators'\nimport { File as IFile, Transaction } from '../../api-interfaces'\nimport { ConfirmationResult, ConfirmationService } from '../../services/confirmation.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\n\n@Component({\n    selector: 'transaction-files',\n    templateUrl: 'transaction-files.component.html',\n})\nexport class TransactionFilesComponent implements OnInit {\n    @Input()\n    public transaction: Transaction\n    public files: File[] = []\n    public existingFiles: IFile[] = []\n    public isLoading = false\n\n    public subscriptions = new Subscription()\n    public fetchEvent = new Subject<void>()\n\n    public constructor(\n        public activeModal: NgbActiveModal,\n        public session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(switchMap(() => this.http.get<IFile[]>(`/transactions/${this.transaction.id}/files`)))\n                .subscribe(files => (this.existingFiles = files))\n        )\n        this.fetchEvent.next()\n    }\n\n    public deleteFile(file: IFile): void {\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    text: `${this.translate.instant(\n                        'common.are-you-sure-want-to-delete-file'\n                    )}<br>${this.translate.instant('common.you-cant-undo-action')}`,\n                    confirmText: this.translate.instant('common.delete'),\n                    confirmClass: 'danger',\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.http.delete<void>(`/transactions/${this.transaction.id}/files/${file.id}`))\n                )\n                .subscribe(() => {\n                    remove(this.existingFiles, { id: file.id })\n                    this.toastr.success(`${file.name} ${this.translate.instant('common.removed')}`)\n                    this.fetchEvent.next()\n                })\n        )\n    }\n\n    public uploadFiles(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            forkJoin(\n                this.files.map(file =>\n                    this.http.post<IFile>(`/transactions/${this.transaction.id}/files`, file, {\n                        headers: new HttpHeaders({\n                            'X-File-Name': encodeURIComponent(file.name),\n                            'Content-Type': file.type,\n                        }),\n                    })\n                )\n            )\n                .pipe(finalize(() => (this.isLoading = false)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.file-uploaded'))\n                    this.files = []\n                    this.fetchEvent.next()\n                })\n        )\n    }\n}\n","import { BeneficiaryMethod, BeneficiaryType, IBeneficiary } from '../../api-interfaces'\nimport { Address } from '../core/address.model'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\n\nexport class Beneficiary implements IBeneficiary {\n    public id: string\n    public type: BeneficiaryType\n    public method: BeneficiaryMethod\n    public accountHolder: string | null\n    public accountHolderAddress: Address | null\n    public accountNumber: string | null\n    public routingNumber: string | null\n    public bankName: string | null\n    public bankSwiftCode: string | null\n    public bankAddress: Address | null\n    public intermediateBankName: string | null\n    public intermediateBankSwiftCode: string | null\n    public intermediateBankAddress: Address | null\n    public user: User | null\n    public currency: Currency\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data: Partial<IBeneficiary>) {\n        Object.assign(this, data)\n        if (data.currency) {\n            this.currency = new Currency(data.currency)\n        }\n        if (data.user) {\n            this.user = new User(data.user)\n        }\n        if (data.accountHolderAddress) {\n            this.accountHolderAddress = new Address(data.accountHolderAddress)\n        }\n        if (data.bankAddress) {\n            this.bankAddress = new Address(data.bankAddress)\n        }\n        if (data.intermediateBankAddress) {\n            this.intermediateBankAddress = new Address(data.intermediateBankAddress)\n        }\n    }\n}\n","import {\n    Alert,\n    ICard,\n    ICurrency,\n    Transaction as ITransaction,\n    TransactionMethod,\n    TransactionStatus,\n    TransactionTag,\n    TransactionType,\n} from '../../api-interfaces'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\nimport { Wallet } from './wallet.model'\n\nexport const methodMap: { [K in TransactionMethod]: string } = {\n    internal: 'INTERNAL',\n    card: 'CARD',\n    crypto: 'CRYPTO',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Transaction implements ITransaction {\n    public id: string\n    public amount: string\n    public requestedAmount: string | null\n    public settledAmount: string\n    public status: TransactionStatus\n    public type: TransactionType\n    public method: TransactionMethod\n    public baseNewBalance: string | null\n    public counterNewBalance: string | null\n    public fixedFee: string\n    public relativeFee: string\n    public comment: string | null\n    public reference: string | null\n    public externalReference: string | null\n    public currency: ICurrency\n    public requestedCurrency: ICurrency | null\n    public baseWallet: Wallet | null\n    public counterWallet: Wallet | null\n    public settledAt: string | null\n    public beneficiary: Beneficiary | null\n    public card: ICard | null\n    public faulty: boolean\n    public alerts: Alert[]\n    public precision: number\n    public totalFee: string\n    public receivedAmount: string | null\n    public receivedCurrency: ICurrency | null\n    public purpose: string | null\n    public sourceOfFunds: string | null\n    public automated?: boolean\n    public tags?: TransactionTag[]\n    public usdRate: string | null\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data?: ITransaction) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.requestedCurrency) {\n                this.requestedCurrency = new Currency(data.requestedCurrency)\n            }\n            if (data.receivedCurrency) {\n                this.receivedCurrency = new Currency(data.receivedCurrency)\n            }\n            if (data.baseWallet) {\n                this.baseWallet = new Wallet(data.baseWallet)\n            }\n            if (data.counterWallet) {\n                this.counterWallet = new Wallet(data.counterWallet)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isPlatformTransfer(): boolean {\n        return !!(\n            this.type === 'transfer' &&\n            ((this.baseWallet && this.baseWallet.isRootWallet()) ||\n                (this.counterWallet && this.counterWallet.isRootWallet()))\n        )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { TransactionFilesComponent } from './transaction-files/transaction-files.component'\nimport { TransactionFilesModalComponent } from './transaction-files/transation-files-modal/transaction-files-modal.component'\nimport { TransactionFlowComponent } from './transaction-flow/transaction-flow.component'\nimport { TransactionOverviewComponent } from './transaction-overview/transaction-overview.component'\nimport { TransactionSlipComponent } from './transaction-slip/transaction-slip.component'\nimport { TransactionViewComponent } from './transaction-view/transaction-view.component'\n\nconst components = [\n    TransactionViewComponent,\n    TransactionFilesComponent,\n    TransactionFilesModalComponent,\n    TransactionFlowComponent,\n    TransactionSlipComponent,\n    TransactionOverviewComponent,\n]\n\n@NgModule({\n    declarations: components,\n    exports: components,\n    imports: [CommonModule],\n})\nexport class TransactionModule {}\n","import { Component, Input } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Transaction } from '../../../api-interfaces'\n\n@Component({\n    selector: 'transaction-files-modal',\n    templateUrl: 'transaction-files-modal.component.html',\n})\nexport class TransactionFilesModalComponent {\n    @Input()\n    public transaction: Transaction\n\n    public constructor(public activeModal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"transaction-flow mb-2\\\">\\n    <div class=\\\"d-flex flex-column justify-content-between align-items-center w-25\\\">\\n        <div class=\\\"bubble\\\">\\n            <user-avatar\\n                *ngIf=\\\"transaction.baseWallet && transaction.baseWallet.user; else baseIcon\\\"\\n                [user]=\\\"transaction.baseWallet.user\\\"\\n            ></user-avatar>\\n            <ng-template #baseIcon>\\n                <fa-icon [icon]=\\\"determineTransactionIcon(transaction, true)\\\" [size]=\\\"'lg'\\\"></fa-icon>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"line\\\"></div>\\n        <div class=\\\"bubble\\\">\\n            <user-avatar\\n                *ngIf=\\\"transaction.counterWallet && transaction.counterWallet.user?.id; else counterIcon\\\"\\n                [user]=\\\"transaction.counterWallet.user\\\"\\n            ></user-avatar>\\n            <ng-template #counterIcon>\\n                <fa-icon\\n                    [icon]=\\\"determineTransactionIcon(transaction, false)\\\"\\n                    [size]=\\\"'lg'\\\"\\n                    *ngIf=\\\"transaction.counterWallet || transaction.type === 'mint'\\\"\\n                ></fa-icon>\\n            </ng-template>\\n        </div>\\n    </div>\\n    <div class=\\\"w-75\\\">\\n        <div class=\\\"b-b-1 pb-3\\\">\\n            <div class=\\\"text-muted lh-1 pb-1\\\">\\n                {{ buildFromText() | capitalize }}\\n            </div>\\n            <div class=\\\"name-tag\\\">\\n                <ng-container *ngIf=\\\"transaction.baseWallet && transaction.type !== 'deposit'\\\">\\n                    <ng-container *ngIf=\\\"transaction.type === 'trade' && !transaction.baseWallet.user; else default\\\">\\n                        <div class=\\\"text-primary font-lg\\\">Trade</div>\\n                        <small>{{ walletOwnerAccountNumber(transaction.baseWallet) }}</small>\\n                    </ng-container>\\n                    <ng-template #default>\\n                        <ng-container *ngIf=\\\"transaction.baseWallet.user && transaction.baseWallet.user.name; else plain\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ transaction.baseWallet.user.name }}</div>\\n                            <small>{{ transaction.baseWallet.user.accountNumber | accountNumber }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #plain>\\n                        <div class=\\\"text-primary font-lg\\\">{{ walletOwnerAccountNumber(transaction.baseWallet) | accountNumber }}</div>\\n                    </ng-template>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'deposit'\\\">\\n                    <div class=\\\"text-primary font-lg\\\">\\n                        <ng-template #depositBtc>\\n                            {{ prettifyCoinName(transaction.method) }} {{ 'common.wallet' | translate | lowercase }}\\n                        </ng-template>\\n                    </div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'mint' && !transaction.baseWallet\\\"\\n                    ><span class=\\\"text-primary\\\">{{ 'common.mint' | translate }}</span></ng-container\\n                >\\n            </div>\\n        </div>\\n        <div class=\\\"pt-3\\\">\\n            <div class=\\\"text-muted lh-1 pb-1\\\">\\n                {{ buildToText() | capitalize }}\\n            </div>\\n            <div class=\\\"name-tag\\\">\\n                <ng-container *ngIf=\\\"transaction.counterWallet && transaction.type !== 'withdrawal'\\\">\\n                    <ng-container *ngIf=\\\"transaction.counterWallet.user && transaction.counterWallet.user.name; else accountFee\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ transaction.counterWallet.user.name }}</div>\\n                        <small>{{ transaction.counterWallet.user.accountNumber | accountNumber }}</small>\\n                    </ng-container>\\n                    <ng-template #accountFee>\\n                        <ng-container *ngIf=\\\"transaction.type === 'account-fee'; else cardOrder\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.account-fee' | translate | sentenceCase }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #cardOrder>\\n                        <ng-container *ngIf=\\\"transaction.type === 'card-order'; else conversion\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.card-order' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #conversion>\\n                        <ng-container *ngIf=\\\"transaction.type === 'conversion'; else trade\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.conversion' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #trade>\\n                        <ng-container *ngIf=\\\"transaction.type === 'trade'; else plain\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.trade' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #plain>\\n                        <div class=\\\"text-primary font-lg\\\">{{ buildCounterWalletName() | accountNumber }}</div>\\n                    </ng-template>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"!transaction.id && !transaction.counterWallet && transaction.type === 'transfer'\\\">\\n                    <div class=\\\"text-muted font-lg\\\">...</div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'withdrawal'\\\">\\n                    <ng-container *ngIf=\\\"['redeem'].includes(transaction.method)\\\">\\n                        <div>{{ displayName }}</div>\\n                        <small class=\\\"text-gray\\\">{{ 'common.platform' | translate }}</small>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"transaction.method === 'card'\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ 'common.card' | translate }} {{ transaction.card?.maskedPan }}</div>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"transaction.method !== 'card' && !['redeem'].includes(transaction.method)\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ transaction.beneficiary?.accountHolder || transaction.beneficiary?.accountNumber }}</div>\\n                        <small *ngIf=\\\"transaction.beneficiary?.accountHolder\\\">{{ transaction.beneficiary?.accountNumber }}</small>\\n                    </ng-container>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'mint' && !transaction.counterWallet\\\"\\n                    ><span class=\\\"text-danger\\\">{{ 'common.destroyed' | translate }}</span></ng-container\\n                >\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'transaction-files-modal.attach-file' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-transaction-files-modal\\\">\\n    <transaction-files [transaction]=\\\"transaction\\\"></transaction-files>\\n</div>\\n\";","export default \"<dropzone\\n    [canCreate]=\\\"transaction.status === 'pending'\\\"\\n    [files]=\\\"files\\\"\\n    [existingFiles]=\\\"existingFiles\\\"\\n    (onDelete)=\\\"deleteFile($event)\\\"\\n    [canDelete]=\\\"['admin'].includes(session.user?.role)\\\"\\n></dropzone>\\n<div class=\\\"text-center p-3\\\">\\n    <h3 *ngIf=\\\"transaction.status !== 'pending' && existingFiles.length === 0\\\">{{ 'common.no-files' | translate }}</h3>\\n</div>\\n<div class=\\\"d-flex justify-content-end\\\" *ngIf=\\\"transaction.status !== 'completed'\\\">\\n    <button\\n        (click)=\\\"uploadFiles()\\\"\\n        type=\\\"button\\\"\\n        class=\\\"btn btn-primary btn-w-sm e2e-transaction-files-submit-btn\\\"\\n        [ngClass]=\\\"{ loading: isLoading }\\\"\\n        [disabled]=\\\"isLoading\\\"\\n    >\\n        {{ 'common.upload' | translate }}\\n    </button>\\n</div>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { EventEmitter, Injectable } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { Transaction as ITransaction } from '../api-interfaces'\nimport { Transaction } from '../models/accounting/transaction.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransactionService {\n    public changeEvent = new EventEmitter<void>()\n    public searchEvent = new Subject<void>()\n    public appName = environment.appName\n\n    constructor(private http: HttpClient) {}\n\n    public changeStatus(id: string, status: 'cancelled' | 'processing'): Observable<ITransaction> {\n        return this.http.patch<ITransaction>(\n            `/transactions/${id}`,\n            [\n                {\n                    op: 'replace',\n                    path: '/status',\n                    value: status,\n                },\n            ],\n            {\n                headers: new HttpHeaders({ 'Content-Type': 'application/json-patch+json' }),\n            }\n        )\n    }\n\n    public revert(id: string): Observable<ITransaction> {\n        return this.http.post<ITransaction>(`/transactions/${id}/revert`, {})\n    }\n\n    public hasInvoice(transaction: ITransaction): boolean {\n        const transactionModel = new Transaction(transaction)\n        const isTrade = transaction.type === 'trade' && ['AU', 'AG'].includes(transaction.currency.code)\n        const isTransfer =\n            transaction.type === 'transfer' &&\n            ['AU', 'AG'].includes(transaction.currency.code) &&\n            !transactionModel.isPlatformTransfer()\n        return (\n            this.appName === 'sgpmx' &&\n            transaction.status === 'completed' &&\n            (isTrade || isTransfer || ['redeem', 'card-order'].includes(transaction.type))\n        )\n    }\n\n    public restore(id: string): Observable<Transaction> {\n        return this.http.post<Transaction>(`/admin/transactions/${id}/restore`, {})\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Optional, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faFileSearch, faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { faTimes } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { forkJoin, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, take } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { File as IFile, Paginated, Trade, Transaction } from '../../api-interfaces'\nimport { methodMap } from '../../models/accounting/transaction.model'\nimport { ConfirmationResult, ConfirmationService } from '../../services/confirmation.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\nimport { TransactionService } from '../../services/transaction.service'\nimport { getTradeGrandTotal, getTradeValue } from '../../trades/trade.mixins'\n\n@Component({\n    selector: 'transaction-view',\n    templateUrl: 'transaction-view.component.html',\n})\nexport class TransactionViewComponent implements OnInit, OnDestroy {\n    public faQuestionCircle = faQuestionCircle\n    @Input()\n    public transaction: Transaction\n    @Output()\n    public readonly onUpdate = new EventEmitter<void>()\n    @Output()\n    public readonly onCancel = new EventEmitter<void>()\n\n    public files: File[] = []\n    public existingFiles: IFile[] = []\n    public trade: Trade\n    public activeTab: 'overview' | 'beneficiary' | 'attachments' = 'overview'\n    public isMarkingAsPaid = false\n    public isUploading = false\n    public isCancelling = false\n    public transactionMethodMap = methodMap\n    public faTimes = faTimes\n    public faFileSearch = faFileSearch\n    public getTradeGrandTotal = getTradeGrandTotal\n    public getTradeValue = getTradeValue\n\n    @ViewChild('cryptoForm')\n    public cryptoForm: NgForm\n\n    // SGPMX\n    public hasReceipt = false\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        @Optional() public activeModal: NgbActiveModal,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        private transactionService: TransactionService,\n        private session: SessionService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        if (this.transaction.type === 'trade' && environment.appName === 'sgpmx') {\n            this.subscriptions.add(\n                this.session.userStream\n                    .pipe(\n                        take(1),\n                        flatMap(user =>\n                            this.http.get<Paginated<Trade>>(`/users/${user.id}/trades`, {\n                                params: {\n                                    'filter.baseTransactionId': this.transaction.id,\n                                    'filter.counterTransactionId': this.transaction.id,\n                                    'filter.q': 'or',\n                                },\n                            })\n                        )\n                    )\n                    .subscribe(res => {\n                        this.trade = res.data[0]\n                    })\n            )\n        }\n        if (\n            this.transaction.type === 'deposit' &&\n            this.transaction.method === 'crypto' &&\n            this.transaction.status === 'pending'\n        ) {\n            this.activeTab = 'beneficiary'\n        }\n        if (\n            this.transactionService.hasInvoice(this.transaction) &&\n            (this.transaction.type === 'trade' || this.transaction.baseWallet?.user?.id === this.session.user.id)\n        ) {\n            this.http.get<boolean>(`/sgpmx/transactions/${this.transaction.id}/has-receipt`).subscribe(hasReceipt => {\n                this.hasReceipt = hasReceipt\n            })\n        }\n        this.getTransactionFiles()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getTransactionFiles(): void {\n        this.http.get<IFile[]>(`/transactions/${this.transaction.id}/files`).subscribe(files => {\n            this.existingFiles = files\n        })\n    }\n\n    public markAsPaid(): void {\n        this.isMarkingAsPaid = true\n        this.transactionService\n            .changeStatus(this.transaction.id, 'processing')\n            .pipe(\n                finalize(() => {\n                    this.isMarkingAsPaid = false\n                })\n            )\n            .subscribe(transaction => {\n                this.transaction.status = transaction.status\n                this.toastr.success(this.translate.instant('common.deposit-marked-as-paid'))\n                this.onUpdate.emit()\n\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'success',\n                            text: this.translate.instant('common.thank-you-for-notifying'),\n                            confirmText: this.translate.instant('common.i-will-upload-a-receipt'),\n                            cancelText: this.translate.instant('common.i-will-do-it-later'),\n                            cancelClass: 'warning',\n                        })\n                        .subscribe(result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.activeTab = 'attachments'\n                            }\n                        })\n                )\n            })\n    }\n\n    public markCryptoDepositAsPaid(): void {\n        Object.assign(this.cryptoForm, { submitted: true })\n        if (this.cryptoForm && this.cryptoForm.invalid) {\n            return\n        }\n        this.isMarkingAsPaid = true\n        this.http\n            .patch<Transaction>(\n                `/transactions/${this.transaction.id}`,\n                [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'processing',\n                    },\n                    {\n                        op: 'replace',\n                        path: '/reference',\n                        value: this.transaction.reference,\n                    },\n                ],\n                {\n                    headers: new HttpHeaders({ 'Content-Type': 'application/json-patch+json' }),\n                }\n            )\n            .pipe(\n                finalize(() => {\n                    this.isMarkingAsPaid = false\n                })\n            )\n            .subscribe(async transaction => {\n                this.transaction.status = transaction.status\n                this.toastr.success(this.translate.instant('common.deposit-marked-as-paid'))\n                this.onUpdate.emit()\n                this.router\n                    .navigateByUrl('/', { skipLocationChange: true })\n                    .then(() => this.router.navigate(['/transactions']))\n                if (this.activeModal) {\n                    this.activeModal.close()\n                }\n            })\n    }\n\n    public cancel(): void {\n        this.isCancelling = true\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    text: `${this.translate.instant('common.are-you-sure-you-want-to-cancel')} ${\n                        this.transaction.type\n                    } (${this.transaction.id.substring(0, 7)})?`,\n                    confirmText: this.translate.instant('common.yes'),\n                    confirmClass: 'danger',\n                    cancelText: this.translate.instant('common.no'),\n                    cancelClass: 'success',\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.transactionService.changeStatus(this.transaction.id, 'cancelled')),\n                    finalize(() => {\n                        this.isCancelling = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.transaction-cancelled'))\n                    this.onCancel.emit()\n                })\n        )\n    }\n\n    public uploadFiles(): void {\n        this.isUploading = true\n        this.subscriptions.add(\n            forkJoin(\n                this.files.map(file =>\n                    this.http.post<File>(`/transactions/${this.transaction.id}/files`, file, {\n                        headers: new HttpHeaders({\n                            'X-File-Name': encodeURIComponent(file.name),\n                            'Content-Type': file.type,\n                        }),\n                    })\n                )\n            )\n                .pipe(\n                    finalize(() => {\n                        this.isUploading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.files = []\n                    this.getTransactionFiles()\n                    this.toastr.success(this.translate.instant('common.attachment-uploaded'))\n                    this.onUpdate.emit()\n                })\n        )\n    }\n\n    public get canCancel(): boolean {\n        return this.activeTab !== 'attachments' && this.transaction.status === 'pending'\n    }\n\n    public get canMarkAsPaid(): boolean {\n        return (\n            this.activeTab !== 'attachments' &&\n            this.transaction.status === 'pending' &&\n            this.transaction.type === 'deposit'\n        )\n    }\n\n    public get canUpload(): boolean {\n        return (\n            this.activeTab === 'attachments' && ['pending', 'processing', 'completed'].includes(this.transaction.status)\n        )\n    }\n\n    public get isLoading(): boolean {\n        return this.isMarkingAsPaid || this.isUploading || this.isCancelling\n    }\n\n    public openProformaInvoice(): void {\n        this.subscriptions.add(\n            this.session\n                .createSignedUrl(`/transactions/${this.transaction.id}/proforma-invoice`)\n                .subscribe(signedUrl => {\n                    window.open(signedUrl, '_blank', 'noopener')\n                })\n        )\n    }\n\n    public openSgpmxInvoice(): void {\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/sgpmx-invoice/${this.transaction.id}`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n\n    public openInvoice(reference: string): void {\n        const invoiceId = reference.split(' ')[1]\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/invoices/${invoiceId}/file`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n}\n"]}