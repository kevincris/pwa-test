{"version":3,"sources":["webpack:///src/app/fees/fees.module.ts","webpack:///src/app/fees/user-fees/user-fees.component.html","webpack:///src/app/common/logged-in.auth-guard.ts","webpack:///src/app/store/fees/fees.store.ts","webpack:///src/app/store/fees/fees.query.ts","webpack:///src/app/fees/sgpmx-user-fees/sgpmx-user-fees.component.ts","webpack:///src/app/fees/fees.component.ts","webpack:///src/app/fees/fees.component.html","webpack:///src/app/fees/user-fees/user-fees.component.ts","webpack:///src/app/fees/sgpmx-user-fees/sgpmx-user-fees.component.html","webpack:///src/app/store/fees/fees.service.ts","webpack:///src/app/fees/fees-routing.module.ts"],"names":["FeesModule","declarations","imports","LoggedInAuthGuard","session","router","_","state","isAuthenticated","parseUrl","url","providedIn","FeesStore","name","idKey","FeesQuery","store","query","selectEntity","entity","type","method","currencyCode","currency","code","pipe","fee","usdFee","SgpmxUserFeesComponent","http","feesQuery","feesService","isLoading","fees","faBalanceScale","faExchange","subscriptions","add","userStream","user","get","id","params","subscribe","goldFees","silverFees","fetch","unsubscribe","found","find","relative","fixed","findByPrimaryAttributes","gst","times","toFixed","selector","template","FeesComponent","appName","UserFeesComponent","currencies","fetchEvent","faArrowAltToBottom","faLandmarkAlt","faArrowAltFromBottom","faPaperPlane","preferredCurrency","loadOwner","limit","response","data","undefined","methods","value","display","amount","baseCurrency","base","counter","convert","feeMethod","next","FeesService","usdFees","set","fetchAsObservable","routes","path","component","canActivate","FeesRoutingModule","forChild","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAYaA,UAAU;AAAA;AAAA,Q;;AAAVA,gBAAU,6DAJtB,+DAAS;AACNC,oBAAY,EAAE,CAAC,6DAAD,EAAgB,gFAAhB,EAAmC,iGAAnC,CADR;AAENC,eAAO,EAAE,CAAC,kEAAD,EAAe,sEAAf,EAAkC,0DAAlC;AAFH,OAAT,CAIsB,GAAVF,UAAU,CAAV;;;;;;;;;;;;;;;;ACZb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKFG,iBAAiB;AAC1B,mCAAoBC,OAApB,EAAqDC,MAArD,EAAqE;AAAA;;AAAjD,eAAAD,OAAA,GAAAA,OAAA;AAAiC,eAAAC,MAAA,GAAAA,MAAA;AAAkB;;AAD7C;AAAA;AAAA,iBAEnB,qBAAYC,CAAZ,EAAuCC,KAAvC,EAAiE;AACpE,gBAAI,CAAC,KAAKH,OAAL,CAAaI,eAAb,EAAL,EAAqC;AACjC,qBAAO,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,qBAAqBF,KAAK,CAACG,GAAhD,CAAP;AACH;;AACD,mBAAO,IAAP;AACH;AAPyB;;AAAA;AAAA,S;;;;gBAHrB;;gBADqC;;;;AAIjCP,uBAAiB,6DAD7B,iEAAW;AAAEQ,kBAAU,EAAE;AAAd,OAAX,CAC6B,GAAjBR,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAS,SAAS;AAAA;;AAAA;;AAClB,6BAAc;AAAA;;AAAA;AAEb;;AAHiB;AAAA,QAAS,2DAAT,C;;;;;;AAATA,eAAS,6DAFrB,iEAAW;AAAED,kBAAU,EAAE;AAAd,OAAX,CAEqB,EADrB,oEAAY;AAAEE,YAAI,EAAE,MAAR;AAAgBC,aAAK,EAAE;AAAvB,OAAZ,CACqB,GAATF,SAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCAAG,SAAS;AAAA;;AAAA;;AAClB,2BAAsBC,KAAtB,EAAwC;AAAA;;AAAA;;AACpC,qCAAMA,KAAN;AADkB,gBAAAA,KAAA,GAAAA,KAAA;AAAkB;AAEvC;;AAHiB;AAAA;AAAA,iBAKX,iCAAwBC,KAAxB,EAIN;AAAA;;AACG,mBAAO,KAAKC,YAAL,CACH,UAAAC,MAAM;AAAA,qBACFA,MAAM,CAACC,IAAP,KAAgBH,KAAK,CAACG,IAAtB,IACAD,MAAM,CAACE,MAAP,KAAkBJ,KAAK,CAACI,MADxB,IAEAJ,KAAK,CAACK,YAAN,KAAuBH,MAAM,CAACI,QAAP,CAAgBC,IAHrC;AAAA,aADH,EAKLC,IALK,CAMH,+DAAQ,UAAAC,GAAG;AAAA,qBACPA,GAAG,GACG,gDAAGA,GAAH,CADH,GAEG,MAAI,CAACR,YAAL,CACI,UAAAC,MAAM;AAAA,uBACFA,MAAM,CAACC,IAAP,KAAgBH,KAAK,CAACG,IAAtB,IACAD,MAAM,CAACE,MAAP,KAAkBJ,KAAK,CAACI,MADxB,IAEAF,MAAM,CAACI,QAAP,CAAgBC,IAAhB,KAAyB,KAHvB;AAAA,eADV,EAKEC,IALF,CAKO,2DAAI,UAAAE,MAAM;AAAA,uBAAIA,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAAA,MAAA,GAAU,IAAd;AAAA,eAAV,CALP,CAHC;AAAA,aAAX,CANG,CAAP;AAiBH;AA3BiB;;AAAA;AAAA,QAAS,2DAAT,C;;;;gBAHF;;;;AAGPZ,eAAS,6DADrB,iEAAW;AAAEJ,kBAAU,EAAE;AAAd,OAAX,CACqB,GAATI,SAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCOAa,sBAAsB;AAQ/B,wCACYxB,OADZ,EAEYyB,IAFZ,EAGYC,SAHZ,EAIYC,WAJZ,EAIoC;AAAA;;AAHxB,eAAA3B,OAAA,GAAAA,OAAA;AACA,eAAAyB,IAAA,GAAAA,IAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AAXL,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,IAAA,GAAe,EAAf;AACA,eAAAC,cAAA,GAAiB,iFAAjB;AACA,eAAAC,UAAA,GAAa,6EAAb;AAEC,eAAAC,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AAOJ;;AAb2B;AAAA;AAAA,iBAexB,oBAAQ;AAAA;;AACX,iBAAKA,aAAL,CAAmBC,GAAnB,CACI,KAAKjC,OAAL,CAAakC,UAAb,CACKb,IADL,CAEQ,2DAAI;AAAA,qBAAO,MAAI,CAACO,SAAL,GAAiB,IAAxB;AAAA,aAAJ,CAFR,EAGQ,+DAAQ,UAAAO,IAAI;AAAA,qBACR,sDAAS,CACL,MAAI,CAACV,IAAL,CAAUW,GAAV,kBAAgCD,IAAI,CAACE,EAArC,oBAAwD;AACpDC,sBAAM,EAAE;AAAEpB,8BAAY,EAAE;AAAhB;AAD4C,eAAxD,CADK,EAIL,MAAI,CAACO,IAAL,CAAUW,GAAV,kBAAgCD,IAAI,CAACE,EAArC,oBAAwD;AACpDC,sBAAM,EAAE;AAAEpB,8BAAY,EAAE;AAAhB;AAD4C,eAAxD,CAJK,CAAT,CADQ;AAAA,aAAZ,CAHR,EAaQ,gEAAS;AAAA,qBAAO,MAAI,CAACU,SAAL,GAAiB,KAAxB;AAAA,aAAT,CAbR,EAeKW,SAfL,CAee,gBAA4B;AAAA;AAAA,kBAA1BC,QAA0B;AAAA,kBAAhBC,UAAgB;;AACnC,oBAAI,CAACZ,IAAL,gCAAgBW,QAAhB,sBAA6BC,UAA7B;AACH,aAjBL,CADJ;AAoBA,iBAAKd,WAAL,CAAiBe,KAAjB;AACH;AArC8B;AAAA;AAAA,iBAuCxB,uBAAW;AACd,iBAAKV,aAAL,CAAmBW,WAAnB;AACH;AAzC8B;AAAA;AAAA,iBA2CxB,gBAAO3B,IAAP,EAAsBC,MAAtB,EAAiDC,YAAjD,EAAqE;AACxE,gBAAM0B,KAAK,GAAG,KAAKf,IAAL,CAAUgB,IAAV,CACV,UAAAvB,GAAG;AAAA,qBAAIA,GAAG,CAACN,IAAJ,KAAaA,IAAb,IAAqBM,GAAG,CAACL,MAAJ,KAAeA,MAApC,IAA8CK,GAAG,CAACH,QAAJ,CAAaC,IAAb,KAAsBF,YAAxE;AAAA,aADO,CAAd;;AAGA,gBAAI,CAAC0B,KAAD,IAAW,CAACA,KAAK,CAACE,QAAP,IAAmB,CAACF,KAAK,CAACG,KAAzC,EAAiD;AAC7C,qBAAO,IAAP;AACH;;AACD,mBAAOH,KAAP;AACH;AAnD8B;AAAA;AAAA,iBAqDxB,kBAAM;AACT,mBAAO,KAAKlB,SAAL,CACFsB,uBADE,CACsB;AACrBhC,kBAAI,EAAE,KADe;AAErBC,oBAAM,EAAE,UAFa;AAGrBC,0BAAY,EAAE;AAHO,aADtB,EAMFG,IANE,CAMG,2DAAI,UAAA4B,GAAG;AAAA,qBAAKA,GAAG,aAAM,IAAI,mDAAJ,CAAcA,GAAG,CAACH,QAAJ,IAAgB,CAA9B,EAAiCI,KAAjC,CAAuC,GAAvC,EAA4CC,OAA5C,CAAoD,CAApD,CAAN,SAAkE,MAA1E;AAAA,aAAP,CANH,CAAP;AAOH;AA7D8B;;AAAA;AAAA,S;;;;gBAR1B;;gBAPA;;gBAQA;;gBACA;;;;AAMI3B,4BAAsB,6DAJlC,gEAAU;AACP4B,gBAAQ,EAAE,iBADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIkC,GAAtB7B,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCRA8B,aAAa,6B;;;AACf,aAAAC,OAAA,GAAU,yEAAYA,OAAtB;AACV,OAFyB,C;;AAAbD,mBAAa,6DAJzB,gEAAU;AACPF,gBAAQ,EAAE,MADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIyB,GAAbC,aAAa,CAAb;;;;;;;;;;;;;;;;ACPb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCoBFE,iBAAiB;AAc1B,mCAAsB/B,IAAtB,EAA+CzB,OAA/C,EAAwE;AAAA;;AAAlD,eAAAyB,IAAA,GAAAA,IAAA;AAAyB,eAAAzB,OAAA,GAAAA,OAAA;AAZxC,eAAA6B,IAAA,GAAe,EAAf;AAEA,eAAA4B,UAAA,GAA0B,EAA1B;AACA,eAAAC,UAAA,GAAa,IAAI,4CAAJ,EAAb;AAEA,eAAAC,kBAAA,GAAqB,qFAArB;AACA,eAAAC,aAAA,GAAgB,gFAAhB;AACA,eAAAC,oBAAA,GAAuB,uFAAvB;AACA,eAAAC,YAAA,GAAe,+EAAf;AAEG,eAAA9B,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AAEgE;;AAdhD;AAAA;AAAA,iBAgBnB,oBAAQ;AAAA;;AACX,iBAAKb,QAAL,GAAgB,yDAAU,KAAKnB,OAAL,CAAamC,IAAb,CAAkB4B,iBAA5B,CAAhB;AACA,iBAAKC,SAAL;AAEA,iBAAKvC,IAAL,CACKW,GADL,CAC+B,aAD/B,EAC8C;AACtCE,oBAAM,EAAE;AACJ2B,qBAAK,EAAE,MAAM;AADT;AAD8B,aAD9C,EAMK1B,SANL,CAMe,UAAA2B,QAAQ,EAAI;AACnB,oBAAI,CAACT,UAAL,GAAkBS,QAAQ,CAACC,IAA3B;AACA,oBAAI,CAAChD,QAAL,GAAgB,MAAI,CAACsC,UAAL,CAAgBZ,IAAhB,CACZ,UAAA1B,QAAQ;AAAA,uBAAIA,QAAQ,CAACC,IAAT,KAAkB,MAAI,CAACpB,OAAL,CAAamC,IAAb,CAAkB4B,iBAAlB,CAAoC3C,IAA1D;AAAA,eADI,CAAhB;AAGH,aAXL;AAaA,iBAAKY,aAAL,CAAmBC,GAAnB,CACI,mDAAM,gDAAGmC,SAAH,CAAN,EAAqB,KAAKV,UAA1B,EACKrC,IADL,CACU,iEAAU;AAAA,qBAAM,MAAI,CAACqB,KAAL,EAAN;AAAA,aAAV,CADV,EAEKH,SAFL,CAEe,UAAAV,IAAI,EAAI;AACf,oBAAI,CAACA,IAAL,GAAYA,IAAZ;;AACA,kBAAI,MAAI,CAACV,QAAL,IAAiB,MAAI,CAACA,QAAL,CAAcH,IAAd,KAAuB,QAA5C,EAAsD;AAClD,sBAAI,CAACqD,OAAL,GAAe,CACX;AACIC,uBAAK,EAAE,QADX;AAEIC,yBAAO,EAAE,MAAI,CAACpD,QAAL,CAAcV;AAF3B,iBADW,CAAf;AAMH,eAPD,MAOO;AACH,sBAAI,CAAC4D,OAAL,GAAe,CACX;AACIC,uBAAK,EAAE,OADX;AAEIC,yBAAO,EAAE;AAFb,iBADW,EAKX;AACID,uBAAK,EAAE,OADX;AAEIC,yBAAO,EAAE;AAFb,iBALW,EASX;AACID,uBAAK,EAAE,MADX;AAEIC,yBAAO,EAAE;AAFb,iBATW,CAAf;AAcH;AACJ,aA3BL,CADJ;AA8BH;AA/DyB;AAAA;AAAA,iBAiEnB,uBAAW;AACd,iBAAKvC,aAAL,CAAmBW,WAAnB;AACH;AAnEyB;AAAA;AAAA,iBAqEnB,iBAAK;AACR,mBAAO,KAAKlB,IAAL,CAAUW,GAAV,kBAAgC,KAAKD,IAAL,CAAUE,EAA1C,oBAA6D;AAChEC,oBAAM,EAAE;AACJpB,4BAAY,EAAE,KAAKC,QAAL,CAAcC;AADxB;AADwD,aAA7D,CAAP;AAKH;AA3EyB;AAAA;AAAA,iBA6EnB,gBAAOJ,IAAP,EAAsBC,MAAtB,EAA+C;AAClD,gBAAM2B,KAAK,GAAG,KAAKf,IAAL,CAAUgB,IAAV,CAAe,UAAAvB,GAAG;AAAA,qBAAIA,GAAG,CAACN,IAAJ,KAAaA,IAAb,IAAqBM,GAAG,CAACL,MAAJ,KAAeA,MAAxC;AAAA,aAAlB,CAAd;;AACA,gBAAI,CAAC2B,KAAD,IAAW,CAACA,KAAK,CAACE,QAAP,IAAmB,CAACF,KAAK,CAACG,KAAzC,EAAiD;AAC7C,qBAAO,IAAP;AACH;;AACD,mBAAOH,KAAP;AACH;AAnFyB;AAAA;AAAA,iBAqFnB,iBAAQ4B,MAAR,EAAwBC,YAAxB,EAA+C;AAAA;;AAClD,gBAAMC,IAAI,GAAG,KAAKjB,UAAL,CAAgBZ,IAAhB,CAAqB,UAAA1B,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,KAAkBqD,YAAY,CAACrD,IAAnC;AAAA,aAA7B,CAAb;AACA,gBAAMuD,OAAO,GAAG,KAAKlB,UAAL,CAAgBZ,IAAhB,CAAqB,UAAA1B,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,KAAkB,MAAI,CAACD,QAAL,CAAcC,IAApC;AAAA,aAA7B,CAAhB;;AACA,gBAAI,CAACsD,IAAD,IAAS,CAACC,OAAd,EAAuB;AACnB,qBAAO,GAAP;AACH;;AACD,mBAAO,yFAASC,OAAT,CAAiBJ,MAAjB,EAAyBE,IAAzB,EAA+BC,OAA/B,CAAP;AACH;AA5FyB;AAAA;AAAA,iBA8FnB,mBAAU3D,IAAV,EAAyB6D,SAAzB,EAAqD;;;AACxD,gBAAIA,SAAS,KAAK,MAAlB,EAA0B;AACtB,qBAAO7D,IAAI,KAAK,YAAT,GAAwB,YAAxB,GAAuC,aAA9C;AACH;;AACD,mBAAO,CAAP,WAAO,KAAKqD,OAAL,CAAaxB,IAAb,CAAkB,UAAA5B,MAAM;AAAA,qBAAI4D,SAAS,KAAK5D,MAAM,CAACqD,KAAzB;AAAA,aAAxB,CAAP,MAA8D,IAA9D,IAA8D,aAA9D,GAA8D,MAA9D,GAA8D,GAAEC,OAAzD,MAAgE,IAAhE,IAAgE,aAAhE,GAAgE,EAAhE,GAAoE,EAA3E;AACH;AAnGyB;AAAA;AAAA,iBAqGhB,qBAAS;AAAA;;AACf,iBAAKvC,aAAL,CAAmBC,GAAnB,CACI,KAAKjC,OAAL,CAAakC,UAAb,CAAwBK,SAAxB,CAAkC,UAAAJ,IAAI,EAAI;AACtC,oBAAI,CAACA,IAAL,GAAY,IAAI,0EAAJ,CAASA,IAAT,CAAZ;;AACA,oBAAI,CAACuB,UAAL,CAAgBoB,IAAhB;AACH,aAHD,CADJ;AAMH;AA5GyB;;AAAA;AAAA,S;;;;gBApBrB;;gBAcA;;;;AAMItB,uBAAiB,6DAJ7B,gEAAU;AACPJ,gBAAQ,EAAE,WADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI6B,GAAjBG,iBAAiB,CAAjB;;;;;;;;;;;;;;;;ACpBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSFuB,WAAW;AACpB,6BAAsBnE,KAAtB,EAAgDa,IAAhD,EAA0EzB,OAA1E,EAAmG;AAAA;;AAA7E,eAAAY,KAAA,GAAAA,KAAA;AAA0B,eAAAa,IAAA,GAAAA,IAAA;AAA0B,eAAAzB,OAAA,GAAAA,OAAA;AAA2B;;AADjF;AAAA;AAAA,iBAGb,6BAAiB;AAAA;;AACpB,mBAAO,sDAAS,CACZ,KAAKyB,IAAL,CAAUW,GAAV,kBAAgC,KAAKpC,OAAL,CAAamC,IAAb,CAAkBE,EAAlD,oBAAqE;AACjEC,oBAAM,EAAE;AACJpB,4BAAY,EAAE;AADV;AADyD,aAArE,CADY,EAMZ,KAAKO,IAAL,CAAUW,GAAV,kBAAgC,KAAKpC,OAAL,CAAamC,IAAb,CAAkBE,EAAlD,oBAAqE;AACjEC,oBAAM,EAAE;AACJpB,4BAAY,EAAE;AADV;AADyD,aAArE,CANY,EAWZ,KAAKO,IAAL,CAAUW,GAAV,kBAAgC,KAAKpC,OAAL,CAAamC,IAAb,CAAkBE,EAAlD,oBAAqE;AACjEC,oBAAM,EAAE;AACJpB,4BAAY,EAAE;AADV;AADyD,aAArE,CAXY,CAAT,EAgBJG,IAhBI,CAiBH,2DAAI;AAAA;AAAA,kBAAEmB,QAAF;AAAA,kBAAYC,UAAZ;AAAA,kBAAwBuC,OAAxB;;AAAA,kDAAyCxC,QAAzC,sBAAsDC,UAAtD,sBAAqEuC,OAArE;AAAA,aAAJ,CAjBG,EAkBH,2DAAI,UAAAnD,IAAI,EAAI;AACR,oBAAI,CAACjB,KAAL,CAAWqE,GAAX,CAAepD,IAAf;AACH,aAFD,CAlBG,CAAP;AAsBH;AA1BmB;AAAA;AAAA,iBA4Bb,iBAAK;AACR,iBAAKqD,iBAAL,GAAyB3C,SAAzB,CAAmC;AAAA,qBAAM6B,SAAN;AAAA,aAAnC;AACH;AA9BmB;;AAAA;AAAA,S;;;;gBAHf;;gBANA;;gBAIA;;;;AAKIW,iBAAW,6DADvB,iEAAW;AAAExE,kBAAU,EAAE;AAAd,OAAX,CACuB,GAAXwE,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJb,UAAMI,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE,6DAFf;AAGIC,mBAAW,EAAE,CAAC,8EAAD;AAHjB,OADmB,CAAvB;;UAWaC,iBAAiB;AAAA;AAAA,Q;;AAAjBA,uBAAiB,6DAJ7B,+DAAS;AACNzF,eAAO,EAAE,CAAC,6DAAa0F,QAAb,CAAsBL,MAAtB,CAAD,CADH;AAENM,eAAO,EAAE,CAAC,4DAAD;AAFH,OAAT,CAI6B,GAAjBF,iBAAiB,CAAjB","file":"fees-fees-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common/common.module'\nimport { FeesRoutingModule } from './fees-routing.module'\nimport { FeesComponent } from './fees.component'\nimport { SgpmxUserFeesComponent } from './sgpmx-user-fees/sgpmx-user-fees.component'\nimport { UserFeesComponent } from './user-fees/user-fees.component'\n\n@NgModule({\n    declarations: [FeesComponent, UserFeesComponent, SgpmxUserFeesComponent],\n    imports: [CommonModule, FeesRoutingModule, IonicModule],\n})\nexport class FeesModule {}\n","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row mt-2\\\">\\n        <div class=\\\"col\\\">\\n            <currency-select-tab\\n                [(currency)]=\\\"currency\\\"\\n                (currencyChange)=\\\"fetchEvent.next()\\\"\\n                [user]=\\\"user\\\"\\n                [moreButtonOptions]=\\\"{ text: 'Other currencies', hasCaret: true }\\\"\\n                #currencySelect\\n            ></currency-select-tab>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-3\\\">\\n        <ng-container *ngIf=\\\"['fiat', 'crypto'].includes(currency.type)\\\">\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faLandmarkAlt\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.platform-fees' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <tr *ngIf=\\\"currency.code === 'USD'\\\">\\n                                    <td>{{ 'common.monthly-account-fee' | translate }}</td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <ng-container *ngIf=\\\"getFee('account-fee', 'internal'); else noFee; let fee\\\">\\n                                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                        </ng-container>\\n                                    </td>\\n                                </tr>\\n                                <ng-container *ngIf=\\\"getFee('gst', 'internal'); let fee\\\">\\n                                    <tr>\\n                                        <td>GST</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltToBottom\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.deposit' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <ng-container *ngFor=\\\"let method of methods\\\">\\n                                    <tr>\\n                                        <td>{{ getMethod('deposit', method.value) }}</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngIf=\\\"getFee('deposit', method.value); else noFee; let fee\\\">\\n                                                <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                            </ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltFromBottom\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.withdrawal' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <ng-container *ngFor=\\\"let method of methods\\\">\\n                                    <tr>\\n                                        <td>{{ getMethod('withdrawal', method.value) }}</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngIf=\\\"getFee('withdrawal', method.value); else noFee; let fee\\\">\\n                                                <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                            </ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"col col-lg-6\\\" *ngIf=\\\"currency.type !== 'metal'\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.transfer' | translate }}</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.internal-transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\" *ngIf=\\\"currency.type === 'metal'\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.trade' | translate }}</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.buy' | translate }} &amp; {{ 'common.sell' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\">{{ 'common.free' | translate | uppercase }}</span>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\">\\n            {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} + {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\">\\n            {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} </span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.min' | translate | lowercase }}. {{ convert(fee.min, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.max' | translate }}. {{ convert(fee.max, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.min' | translate | lowercase }}. {{ fee.type }} {{ convert(fee.minValue, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n</ng-template>\\n\";","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { faBalanceScale, faExchange } from '@fortawesome/pro-duotone-svg-icons'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, Subscription } from 'rxjs'\nimport { finalize, flatMap, map, tap } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { FeesService } from 'src/app/store/fees/fees.service'\n\n@Component({\n    selector: 'sgpmx-user-fees',\n    templateUrl: 'sgpmx-user-fees.component.html',\n})\nexport class SgpmxUserFeesComponent implements OnInit, OnDestroy {\n    public isLoading = false\n    public fees: IFee[] = []\n    public faBalanceScale = faBalanceScale\n    public faExchange = faExchange\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private session: SessionService,\n        private http: HttpClient,\n        private feesQuery: FeesQuery,\n        private feesService: FeesService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    tap(() => (this.isLoading = true)),\n                    flatMap(user =>\n                        forkJoin([\n                            this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                params: { currencyCode: 'AU' },\n                            }),\n                            this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                params: { currencyCode: 'AG' },\n                            }),\n                        ])\n                    ),\n                    finalize(() => (this.isLoading = false))\n                )\n                .subscribe(([goldFees, silverFees]) => {\n                    this.fees = [...goldFees, ...silverFees]\n                })\n        )\n        this.feesService.fetch()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod, currencyCode: string): IFee | null {\n        const found = this.fees.find(\n            fee => fee.type === type && fee.method === method && fee.currency.code === currencyCode\n        )\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public getGst(): Observable<string> {\n        return this.feesQuery\n            .findByPrimaryAttributes({\n                type: 'gst',\n                method: 'internal',\n                currencyCode: 'USD',\n            })\n            .pipe(map(gst => (gst ? `${new BigNumber(gst.relative || 0).times(100).toFixed(0)}%` : 'FREE')))\n    }\n}\n","import { Component } from '@angular/core'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'fees',\n    templateUrl: 'fees.component.html',\n})\nexport class FeesComponent {\n    public appName = environment.appName\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.fee-schedule' | translate | titlecase }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.fee-schedule' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmx\\\">\\n    <user-fees></user-fees>\\n</ng-container>\\n<ng-template #sgpmx>\\n    <sgpmx-user-fees></sgpmx-user-fees>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport {\n    faArrowAltFromBottom,\n    faArrowAltToBottom,\n    faLandmarkAlt,\n    faPaperPlane,\n} from '@fortawesome/pro-duotone-svg-icons'\nimport { cloneDeep } from 'lodash'\nimport { merge, Observable, of, Subject, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, Paginated, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { User } from 'src/app/common/models/core/user.model'\nimport { SessionService } from 'src/app/common/services/session.service'\n\n@Component({\n    selector: 'user-fees',\n    templateUrl: 'user-fees.component.html',\n})\nexport class UserFeesComponent implements OnInit, OnDestroy {\n    public user: IUser\n    public fees: IFee[] = []\n    public currency: ICurrency\n    public currencies: ICurrency[] = []\n    public fetchEvent = new Subject<void>()\n    public methods: { value: TransactionMethod; display: string }[]\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faLandmarkAlt = faLandmarkAlt\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public faPaperPlane = faPaperPlane\n\n    protected subscriptions = new Subscription()\n\n    constructor(protected http: HttpClient, public session: SessionService) {}\n\n    public ngOnInit(): void {\n        this.currency = cloneDeep(this.session.user.preferredCurrency)\n        this.loadOwner()\n\n        this.http\n            .get<Paginated<ICurrency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                },\n            })\n            .subscribe(response => {\n                this.currencies = response.data\n                this.currency = this.currencies.find(\n                    currency => currency.code === this.session.user.preferredCurrency.code\n                )!\n            })\n\n        this.subscriptions.add(\n            merge(of(undefined), this.fetchEvent)\n                .pipe(switchMap(() => this.fetch()))\n                .subscribe(fees => {\n                    this.fees = fees\n                    if (this.currency && this.currency.type === 'crypto') {\n                        this.methods = [\n                            {\n                                value: 'crypto',\n                                display: this.currency.name,\n                            },\n                        ]\n                    } else {\n                        this.methods = [\n                            {\n                                value: 'swift',\n                                display: 'SWIFT',\n                            },\n                            {\n                                value: 'local',\n                                display: 'Local',\n                            },\n                            {\n                                value: 'card',\n                                display: 'Topup Card',\n                            },\n                        ]\n                    }\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public fetch(): Observable<IFee[]> {\n        return this.http.get<IFee[]>(`/users/${this.user.id}/fee-schedule`, {\n            params: {\n                currencyCode: this.currency.code,\n            },\n        })\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod): IFee | null {\n        const found = this.fees.find(fee => fee.type === type && fee.method === method)\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public convert(amount: string, baseCurrency: ICurrency): string {\n        const base = this.currencies.find(currency => currency.code === baseCurrency.code)\n        const counter = this.currencies.find(currency => currency.code === this.currency.code)\n        if (!base || !counter) {\n            return '0'\n        }\n        return Currency.convert(amount, base, counter)\n    }\n\n    public getMethod(type: FeeType, feeMethod: TransactionMethod): string {\n        if (feeMethod === 'card') {\n            return type === 'withdrawal' ? 'Topup Card' : 'Unload Card'\n        }\n        return this.methods.find(method => feeMethod === method.value)?.display ?? ''\n    }\n\n    protected loadOwner(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.user = new User(user)\n                this.fetchEvent.next()\n            })\n        )\n    }\n}\n","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row mt-2\\\">\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Gold Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>Buy &amp; Sell</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal', 'AU'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Silver Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>Buy &amp; Sell</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal', 'AG'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Gold Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AU'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Silver Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AG'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <p class=\\\"font-sm\\\">\\n        <i>* Subject to additional {{ getGst() | async }} GST</i>\\n    </p>\\n</div>\\n\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\" *ngIf=\\\"!isLoading; else spinner\\\">FREE</span>\\n    <ng-template #spinner>\\n        <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n    </ng-template>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD + {{ fee.relative | percent: '1.2' }}*</span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\"> {{ fee.relative | percent: '1.2' }}* </span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD*</span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.min | amount }} USD </small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\"> {{ 'common.max' | translate }}. {{ fee.max | amount }} USD </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.type }} {{ fee.minValue | amount }} USD </small>\\n    </div>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IFee } from '../../common/api-interfaces'\nimport { FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesService {\n    constructor(protected store: FeesStore, private http: HttpClient, private session: SessionService) {}\n\n    public fetchAsObservable(): Observable<IFee[]> {\n        return forkJoin([\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AU',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AG',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'USD',\n                },\n            }),\n        ]).pipe(\n            map(([goldFees, silverFees, usdFees]) => [...goldFees, ...silverFees, ...usdFees]),\n            tap(fees => {\n                this.store.set(fees)\n            })\n        )\n    }\n\n    public fetch(): void {\n        this.fetchAsObservable().subscribe(() => undefined)\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { FeesComponent } from './fees.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FeesComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class FeesRoutingModule {}\n"]}