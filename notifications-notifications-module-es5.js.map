{"version":3,"sources":["webpack:///src/app/notifications/notifications.component.ts","webpack:///src/app/common/logged-in.auth-guard.ts","webpack:///src/app/notifications/notifications.component.html","webpack:///src/app/notifications/notifications-routing.module.ts","webpack:///src/app/notifications/notifications.module.ts"],"names":["NotificationsComponent","http","ngbModal","changeDetector","route","router","session","confirmation","notificationsService","min","Math","limit","defaultLimit","userStream","pipe","user","apiUrl","id","subscriptions","add","post","floor","random","jsonrpc","method","headers","find","subscribe","notifyEvent","next","notification","invoice","navigate","transaction","conversion","selector","template","LoggedInAuthGuard","_","state","isAuthenticated","parseUrl","url","providedIn","routes","path","component","canActivate","NotificationsRoutingModule","imports","forChild","exports","NotificationsModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgBaA,sBAAsB;AAAA;;AAAA;;AAK/B,wCACIC,IADJ,EAEIC,QAFJ,EAGIC,cAHJ,EAIIC,KAJJ,EAKIC,MALJ,EAMIC,OANJ,EAOIC,YAPJ,EAQYC,oBARZ,EAQsD;AAAA;;AAAA;;AAElD,oCAAMP,IAAN,EAAYC,QAAZ,EAAsBC,cAAtB,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,OAArD,EAA8DC,YAA9D;AAFQ,gBAAAC,oBAAA,GAAAA,oBAAA;AAZL,gBAAAC,GAAA,GAAMC,IAAI,CAACD,GAAX;AACA,gBAAAE,KAAA,GAAQ,EAAR;AACG,gBAAAC,YAAA,GAAe,EAAf;AAU4C;AAGrD;;AAhB8B;AAAA;AAAA,iBAkBxB,gBAAI;AAAA;;AACP,mBAAO,KAAKN,OAAL,CAAaO,UAAb,CAAwBC,IAAxB,CACH,4DAAK,CAAL,CADG,EAEH,2DAAI,UAAAC,IAAI,EAAI;AACR,oBAAI,CAACC,MAAL,oBAAwBD,IAAI,CAACE,EAA7B;AACH,aAFD,CAFG,EAKH,+DAAQ;AAAA;AAAA,aAAR,CALG,CAAP;AAOH;AA1B8B;AAAA;AAAA,iBA4BxB,yBAAa;AAAA;;AAChB,iBAAKC,aAAL,CAAmBC,GAAnB,CACI,KAAKb,OAAL,CAAaO,UAAb,CACKC,IADL,CAEQ,4DAAK,CAAL,CAFR,EAGQ,+DAAQ,UAAAC,IAAI;AAAA,qBACR,MAAI,CAACd,IAAL,CAAUmB,IAAV,kBACcL,IAAI,CAACE,EADnB,qBAEI;AACIA,kBAAE,EAAEP,IAAI,CAACW,KAAL,CAAWX,IAAI,CAACY,MAAL,KAAgB,KAA3B,CADR;AAEIC,uBAAO,EAAE,KAFb;AAGIC,sBAAM,EAAE;AAHZ,eAFJ,EAOI;AACIC,uBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,kCAAgB;AAAlB,iBAAhB;AADb,eAPJ,CADQ;AAAA,aAAZ,CAHR,EAgBQ,+DAAQ;AAAA,qBAAM,MAAI,CAACC,IAAL,EAAN;AAAA,aAAR,CAhBR,EAkBKC,SAlBL,CAkBe,YAAM;AACb,oBAAI,CAACnB,oBAAL,CAA0BoB,WAA1B,CAAsCC,IAAtC;AACH,aApBL,CADJ;AAuBH;AApD8B;AAAA;AAAA,iBAsDlB,cAAKC,YAAL,EAA+B;;;;;;2BACpCA,YAAY,CAACC,O;;;;;;AACb,6BAAM,KAAK1B,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,oBAAD,EAAuBF,YAAY,CAACC,OAAb,CAAqBd,EAA5C,CAArB,CAAN;;;;;;;2BACOa,YAAY,CAACG,W;;;;;;AACpB,6BAAM,KAAK5B,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,eAAD,EAAkBF,YAAY,CAACG,WAAb,CAAyBhB,EAA3C,CAArB,CAAN;;;;;;;2BACOa,YAAY,CAACI,U;;;;;;AACpB,6BAAM,KAAK7B,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,uBAAD,EAA0BF,YAAY,CAACI,UAAb,CAAwBjB,EAAlD,CAArB,CAAN;;;;;;;;AAEA,6BAAM,KAAKZ,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,WAAD,CAArB,CAAN;;;;;;;;;AAEP;AAhE8B;;AAAA;AAAA,QAAS,oEAAT,C;;;;gBAhB1B;;gBAGA;;gBAFA;;gBACA;;gBAAgB;;gBAQhB;;gBAFA;;gBACA;;;;AAOIhC,4BAAsB,6DAJlC,gEAAU;AACPmC,gBAAQ,EAAE,eADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIkC,GAAtBpC,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCXAqC,iBAAiB;AAC1B,mCAAoB/B,OAApB,EAAqDD,MAArD,EAAqE;AAAA;;AAAjD,eAAAC,OAAA,GAAAA,OAAA;AAAiC,eAAAD,MAAA,GAAAA,MAAA;AAAkB;;AAD7C;AAAA;AAAA,iBAEnB,qBAAYiC,CAAZ,EAAuCC,KAAvC,EAAiE;AACpE,gBAAI,CAAC,KAAKjC,OAAL,CAAakC,eAAb,EAAL,EAAqC;AACjC,qBAAO,KAAKnC,MAAL,CAAYoC,QAAZ,CAAqB,qBAAqBF,KAAK,CAACG,GAAhD,CAAP;AACH;;AACD,mBAAO,IAAP;AACH;AAPyB;;AAAA;AAAA,S;;;;gBAHrB;;gBADqC;;;;AAIjCL,uBAAiB,6DAD7B,iEAAW;AAAEM,kBAAU,EAAE;AAAd,OAAX,CAC6B,GAAjBN,iBAAiB,CAAjB;;;;;;;;;;;;;;;;ACLb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,UAAMO,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE,+EAFf;AAGIC,mBAAW,EAAE,CAAC,8EAAD;AAHjB,OADmB,CAAvB;;UAYaC,0BAA0B;AAAA;AAAA,Q;;AAA1BA,gCAA0B,6DAJtC,+DAAS;AACNC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CADH;AAENO,eAAO,EAAE,CAAC,4DAAD;AAFH,OAAT,CAIsC,GAA1BH,0BAA0B,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCPAI,mBAAmB;AAAA;AAAA,Q;;AAAnBA,yBAAmB,6DAJ/B,+DAAS;AACNC,oBAAY,EAAE,CAAC,+EAAD,CADR;AAENJ,eAAO,EAAE,CAAC,kEAAD,EAAe,2FAAf,EAAmC,wFAAnC;AAFH,OAAT,CAI+B,GAAnBG,mBAAmB,CAAnB","file":"notifications-notifications-module-es5.js","sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable } from 'rxjs'\nimport { flatMap, take, tap } from 'rxjs/operators'\nimport { Notification, RPCResult } from '../common/api-interfaces'\nimport { ListComponent } from '../common/list.component'\nimport { ConfirmationService } from '../common/services/confirmation.service'\nimport { NotificationsService } from '../common/services/notifications.service'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'notifications',\n    templateUrl: 'notifications.component.html',\n})\nexport class NotificationsComponent extends ListComponent<Notification> {\n    public min = Math.min\n    public limit = 10\n    protected defaultLimit = 10\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private notificationsService: NotificationsService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user.id}/notifications`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public markAllAsRead(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    flatMap(user =>\n                        this.http.post<RPCResult<void>>(\n                            `/users/${user.id}/notifications`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'markAllAsRead',\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    ),\n                    flatMap(() => this.find())\n                )\n                .subscribe(() => {\n                    this.notificationsService.notifyEvent.next()\n                })\n        )\n    }\n\n    public async goto(notification: Notification): Promise<void> {\n        if (notification.invoice) {\n            await this.router.navigate(['/services/invoices', notification.invoice.id])\n        } else if (notification.transaction) {\n            await this.router.navigate(['/transactions', notification.transaction.id])\n        } else if (notification.conversion) {\n            await this.router.navigate(['/services/conversions', notification.conversion.id])\n        } else {\n            await this.router.navigate(['/protocol'])\n        }\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","export default \"<ng-container *ngIf=\\\"!router.isActive('/dashboard', false)\\\">\\n    <div class=\\\"container pt-page\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.notifications' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.notifications' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n<section class=\\\"container e2e-notifications mb-3\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"d-flex justify-content-end align-items-center mb-2\\\">\\n                <div class=\\\"d-flex align-items-center\\\">\\n                    <a href class=\\\"btn btn-secondary-air\\\" (click)=\\\"markAllAsRead(); $event.preventDefault()\\\">{{\\n                        'common.mark-all-as-read' | translate\\n                    }}</a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table table-hover align-items-center table-borderless\\\">\\n            <thead>\\n                <tr>\\n                    <th scope=\\\"col\\\">{{ 'common.description' | translate }}</th>\\n                    <th scope=\\\"col\\\" class=\\\"table-col-sm\\\">{{ 'common.created-at' | translate | titlecase }}</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr\\n                    *ngFor=\\\"let notification of itemsStream | async\\\"\\n                    class=\\\"clickable bg-white e2e-notification\\\"\\n                    [ngClass]=\\\"'has-' + notification.severity\\\"\\n                >\\n                    <th scope=\\\"row\\\" (click)=\\\"goto(notification)\\\">\\n                        <span class=\\\"badge mr-1\\\" [ngClass]=\\\"'badge-' + notification.severity\\\" *ngIf=\\\"!notification.read\\\">{{\\n                            'common.new' | translate\\n                        }}</span>\\n                        <notification [notification]=\\\"notification\\\"></notification>\\n                    </th>\\n                    <td>\\n                        {{ notification.createdAt | date: 'medium' }}\\n                    </td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n    <footer class=\\\"table-footer\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-12 col-md-8\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <ng-select\\n                            [(ngModel)]=\\\"limit\\\"\\n                            dropdownPosition=\\\"auto\\\"\\n                            (change)=\\\"select(1)\\\"\\n                            [items]=\\\"limitOpts\\\"\\n                            [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                            [clearable]=\\\"false\\\"\\n                            [searchable]=\\\"false\\\"\\n                            required\\n                        >\\n                            <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                                >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                            >\\n                            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                        </ng-select>\\n                    </div>\\n                    <div class=\\\"col-12 d-flex align-items-center\\\">\\n                        <span class=\\\"text-muted text-small\\\">Showing {{ offset + 1 }} - {{ min(offset + limit, count) }} of {{ count }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-12 col-md-16 d-flex justify-content-end\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</section>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { NotificationsComponent } from './notifications.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: NotificationsComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class NotificationsRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { NotificationModule } from '../common/notification/notification.module'\nimport { NotificationsRoutingModule } from './notifications-routing.module'\nimport { NotificationsComponent } from './notifications.component'\n\n@NgModule({\n    declarations: [NotificationsComponent],\n    imports: [CommonModule, NotificationModule, NotificationsRoutingModule],\n})\nexport class NotificationsModule {}\n"]}