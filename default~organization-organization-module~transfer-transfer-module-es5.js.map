{"version":3,"sources":["webpack:///src/app/transfer/sgpmx-transfer-form.component/sgpmx-transfer-form.component.html","webpack:///src/app/transfer/transfer.component.ts","webpack:///src/app/common/models/accounting/fee.model.ts","webpack:///src/app/transfer/transfer.component.html","webpack:///src/app/transfer/sgpmx-transfer-form.component/sgpmx-transfer-form.component.ts","webpack:///src/app/transfer/transfer-form.component.ts/transfer-form.component.ts","webpack:///src/app/transfer/transfer-routing.module.ts","webpack:///src/app/transfer/transfer-form.component.ts/transfer-form.component.html","webpack:///src/app/store/fees/fees.service.ts","webpack:///src/app/common/services/accounting/fee.service.ts","webpack:///src/app/transfer/transfer.module.ts"],"names":["TransferComponent","route","session","feesQuery","feesService","appName","fixedRecipient","subscriptions","snapshot","queryParamMap","has","resetTransaction","get","subscribe","params","fetch","unsubscribe","type","transaction","currency","findByPrimaryAttributes","method","currencyCode","code","selector","template","feeTypeMap","deposit","withdrawal","transfer","conversion","investment","trade","redeem","service","gst","payment","feeMethodMap","internal","card","crypto","local","swift","Fee","data","Object","assign","user","beneficiary","id","includes","getFeeType","transactionType","feeMap","invoice","SgpmxTransferFormComponent","currenciesQuery","http","ngbModal","confirmation","walletsService","currenciesService","translate","displayName","isUploadCollapsed","fetchEvent","files","faQuestionCircle","transactionChange","transactionComplete","isDefineByValue","valueInUsd","original","add","pipe","post","fetchAsObservable","getEntity","calculateAmount","userStream","_","JSON","stringify","response","wallets","currencies","baseWallet","accountNumber","name","filter","wallet","balance","isGreaterThan","fixedFee","relativeFee","next","transferForm","invalid","modal","open","windowClass","backdrop","component","componentInstance","onConfirm","createTransaction","isCompleted","close","transactionView","transactionViewModal","reset","emit","error","show","title","text","confirmText","showCancel","isSubmitted","onSelect","contact","recipient","counterUser","onRecipientChange","counterWallet","trim","replace","target","find","maxUsable","maxUsableAmount","min","availableBalance","toString","amount","toFixed","decimalPlaces","calculateValueInUsd","selectEntity","usd","convert","undefined","times","exchangeRate","length","map","file","headers","encodeURIComponent","resetForm","TransferFormComponent","feeService","walletsQuery","lockRecipient","showContactBtn","purposes","instant","inclusiveFee","fee","preferredCurrency","determineFee","minValue","minAmount","balances$","balances","found","maxFee","max","relativeFeeAmount","plus","minus","isLessThan","parseFloat","body","settledAmount","purpose","comment","routes","path","canActivate","TransferRoutingModule","imports","forChild","exports","FeesService","store","goldFees","silverFees","usdFees","fees","set","providedIn","FeeService","Math","round","random","jsonrpc","result","currentTransaction","fixed","relative","minFee","TransferModule","declarations"],"mappings":"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","file":"default~organization-organization-module~transfer-transfer-module-es5.js","sourcesContent":["export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" class=\\\"font-lg\\\">{{ 'common.view-contacts' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #transferForm=\\\"ngForm\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': transferForm.submitted }\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"recipient\\\"\\n                    >{{ 'common.account-number' | translate }} / {{ 'common.email' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"recipient\\\"\\n                name=\\\"recipient\\\"\\n                [(ngModel)]=\\\"recipient\\\"\\n                (ngModelChange)=\\\"onRecipientChange()\\\"\\n                #recipientInput=\\\"ngModel\\\"\\n                recipientValidator\\n                required\\n                emptyToNull\\n            />\\n            <div *ngIf=\\\"recipientInput.invalid && (transferForm.submitted || recipientInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.invalidRecipient\\\">Invalid recipient.</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-24\\\">\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <label class=\\\"font-md\\\" for=\\\"currency\\\">Precious Metal Type</label>\\n                </div>\\n                <currency-select\\n                    [(currency)]=\\\"transaction.currency\\\"\\n                    [user]=\\\"user\\\"\\n                    [isLarge]=\\\"true\\\"\\n                    [currencyTypes]=\\\"['metal']\\\"\\n                    (currencyChange)=\\\"onCurrencyChange()\\\"\\n                    [required]=\\\"true\\\"\\n                    [transferable]=\\\"true\\\"\\n                    #currencySelect\\n                >\\n                </currency-select>\\n                <div\\n                    *ngIf=\\\"currencySelect.currencyInput.invalid && (transferForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                    class=\\\"error-messages\\\"\\n                >\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">This is required.</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-24\\\">\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <label class=\\\"font-md\\\">\\n                            {{ isDefineByValue ? 'Value' : 'Troy Ounce' }}\\n                        </label>\\n                    </div>\\n                    <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n                </div>\\n                <ng-container *ngIf=\\\"!isDefineByValue; else defineByValueInput\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            id=\\\"amount\\\"\\n                            name=\\\"amount\\\"\\n                            placeholder=\\\"0.00\\\"\\n                            [(ngModel)]=\\\"transaction.amount\\\"\\n                            [min]=\\\"getMinimum()\\\"\\n                            [max]=\\\"getMaximum()\\\"\\n                            #amount=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div class=\\\"input-group-append\\\">\\n                            <button\\n                                class=\\\"btn btn-default btn-lg\\\"\\n                                type=\\\"button\\\"\\n                                (click)=\\\"isDefineByValue = true; calculateValueInUsd(); $event.preventDefault()\\\"\\n                                [ngbTooltip]=\\\"'common.define-amount-in-usd' | translate\\\"\\n                            >\\n                                {{ transaction.currency?.code }}\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"amount.invalid && (transferForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                            Minimum amount is\\n                            {{ getMinimum() + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                            {{ transaction.currency?.code }}.\\n                        </div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.max\\\">\\n                            Maximum amount is\\n                            {{ getMaximum() + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                            {{ transaction.currency?.code }}.\\n                        </div>\\n                    </div>\\n                </ng-container>\\n                <ng-template #defineByValueInput>\\n                    <div class=\\\"input-group\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            id=\\\"valueInUsd\\\"\\n                            name=\\\"valueInUsd\\\"\\n                            placeholder=\\\"0.00\\\"\\n                            [(ngModel)]=\\\"valueInUsd\\\"\\n                            (ngModelChange)=\\\"calculateAmount()\\\"\\n                            [min]=\\\"getMinimum()\\\"\\n                            [max]=\\\"getMaximum()\\\"\\n                            #valueInUsdInput=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div class=\\\"input-group-append\\\">\\n                            <button\\n                                class=\\\"btn btn-default btn-lg\\\"\\n                                type=\\\"button\\\"\\n                                (click)=\\\"isDefineByValue = false; calculateValueInUsd(); $event.preventDefault()\\\"\\n                                [ngbTooltip]=\\\"'common.define-amount-in-troy-ounce' | translate\\\"\\n                            >\\n                                USD\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"valueInUsdInput.invalid && (transferForm.submitted || valueInUsdInput.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.required\\\">This is required.</div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.min\\\">\\n                            Minimum amount is\\n                            {{ getMinimum() || '0' | amount: 2 }}\\n                            USD.\\n                        </div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.max\\\">\\n                            Maximum amount is\\n                            {{ getMaximum() || '0' | amount: 2 }}\\n                            USD\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"reference\\\">{{ 'common.reference' | translate }} <small class=\\\"text-muted\\\">(optional)</small></label>\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-lg\\\" id=\\\"reference\\\" name=\\\"reference\\\" [(ngModel)]=\\\"transaction.reference\\\" emptyToNull />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\">{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">(optional)</small></label>\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ Attach' : '- Remove' }} file\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\">{{ 'common.submit' | translate }}</button>\\n    </form>\\n    <ng-template #recipientTitle> How does it work? </ng-template>\\n    <ng-template #recipientContent>\\n        <p>You can send Gold/Silver to other {{ displayName }} account holders using their account number or email address.</p>\\n        <p>\\n            Ask your beneficiary for their account number or email address. Account number can be found on the dashboard under\\n            <b>Account information</b>.\\n        </p>\\n    </ng-template>\\n</ng-container>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Observable, of, Subscription } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { FeeType, IFee, Transaction, TransactionMethod } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\nimport { FeesQuery } from '../store/fees/fees.query'\nimport { FeesService } from '../store/fees/fees.service'\n\n@Component({\n    selector: 'transfer',\n    templateUrl: 'transfer.component.html',\n})\nexport class TransferComponent implements OnInit, OnDestroy {\n    public appName = environment.appName\n    public transaction: Transaction\n    public fixedRecipient = false\n    private subscriptions = new Subscription()\n\n    constructor(\n        private route: ActivatedRoute,\n        public session: SessionService,\n        private feesQuery: FeesQuery,\n        private feesService: FeesService\n    ) {}\n\n    public ngOnInit(): void {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') as TransactionMethod) || 'send')\n        })\n        if (environment.appName === 'sgpmx') {\n            this.feesService.fetch()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType): Observable<IFee | null> {\n        if (!this.transaction.currency) {\n            return of(null)\n        }\n        return this.feesQuery.findByPrimaryAttributes({\n            type,\n            method: 'internal',\n            currencyCode: this.transaction.currency.code,\n        })\n    }\n\n    private resetTransaction(method: TransactionMethod | 'request' | 'send'): void {\n        switch (method) {\n            default:\n                this.transaction = {\n                    type: 'transfer',\n                    method: 'internal',\n                } as Transaction\n                break\n        }\n    }\n}\n","import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pt-4 e2e-transfer\\\">\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.transfer' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmxTransfer\\\">\\n                            <transfer-form [(transaction)]=\\\"transaction\\\"></transfer-form>\\n                        </ng-container>\\n                        <ng-template #sgpmxTransfer>\\n                            <sgpmx-transfer-form [(transaction)]=\\\"transaction\\\"></sgpmx-transfer-form>\\n                        </ng-template>\\n                    </div>\\n                </section>\\n                <div class=\\\"callout callout-danger\\\" *ngIf=\\\"appName === 'sgpmx'\\\">\\n                    <h6>{{ 'common.notice' | translate }}</h6>\\n                    <p>\\n                        <b>Each transfer</b> is subject to a fee of\\n                        <ng-container *ngIf=\\\"getFee('transfer') | async; else noFee; let fee\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                        </ng-container>\\n                        of transferred value of precious metals. The fees will be deducted from your available account balance. (fees are subject to\\n                        <ng-container *ngIf=\\\"getFee('gst') | async; else noFee; let fee\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                        </ng-container>\\n                        GST)\\n                    </p>\\n                    <ng-template #noFee>\\n                        <span class=\\\"text-success\\\">FREE</span>\\n                    </ng-template>\\n                    <ng-template #withFee let-fee=\\\"fee\\\">\\n                        <span>\\n                            <span *ngIf=\\\"fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD + {{ fee.relative | percent: '1.2' }}</span>\\n                            <span *ngIf=\\\"fee.relative && !fee.fixed\\\">{{ fee.relative | percent: '1.2' }}</span>\\n                            <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD</span>\\n                        </span>\\n                    </ng-template>\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { cloneDeep } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, timer } from 'rxjs'\nimport { flatMap, map, switchMap, take } from 'rxjs/operators'\nimport { CurrenciesService } from 'src/app/store/currencies/currencies.service'\nimport { environment } from 'src/environments/environment'\nimport { IContact, ICurrency, Paginated } from '../../common/api-interfaces'\nimport { ContactBookComponent, openContactBook } from '../../common/contact-book/contact-book.component'\nimport { Currency } from '../../common/models/accounting/currency.model'\nimport { Transaction } from '../../common/models/accounting/transaction.model'\nimport { Wallet } from '../../common/models/accounting/wallet.model'\nimport { PaymentConfirmationComponent } from '../../common/payment/payment-confirmation/payment-confirmation.component'\nimport { ConfirmationService } from '../../common/services/confirmation.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { TransactionViewComponent } from '../../common/transaction/transaction-view/transaction-view.component'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\nimport { WalletsService } from '../../store/wallets/wallets.service'\n\n@Component({\n    selector: 'sgpmx-transfer-form',\n    templateUrl: 'sgpmx-transfer-form.component.html',\n})\nexport class SgpmxTransferFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public transaction: Partial<Transaction>\n    public appName = environment.appName\n    public displayName = environment.displayName\n\n    public recipient: string\n    public isUploadCollapsed = true\n    public fetchEvent = new Subject<void>()\n    public original: Partial<Transaction>\n    public files: File[] = []\n    public faQuestionCircle = faQuestionCircle\n\n    public maxUsableAmount: string | null\n\n    @ViewChild('transferForm')\n    public transferForm: NgForm\n    @Output()\n    public readonly transactionChange = new EventEmitter<Partial<Transaction>>()\n    @Output()\n    public readonly transactionComplete = new EventEmitter<void>()\n\n    public isDefineByValue = true\n    public valueInUsd: string | null = null\n\n    private wallets: Wallet[]\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private currenciesQuery: CurrenciesQuery,\n        private http: HttpClient,\n        private ngbModal: NgbModal,\n        private confirmation: ConfirmationService,\n        private walletsService: WalletsService,\n        private currenciesService: CurrenciesService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.original = cloneDeep(this.transaction)\n        this.subscriptions.add(\n            timer(1, 16 * 1000)\n                .pipe(\n                    switchMap(() => this.http.post<void>('/sgpmx/refresh-exchange-rates', {})),\n                    flatMap(() => this.currenciesService.fetchAsObservable())\n                )\n                .subscribe(() => {\n                    this.transaction.currency = this.currenciesQuery.getEntity(this.transaction.currency?.code!)\n                    this.calculateAmount()\n                })\n        )\n        this.subscriptions.add(\n            combineLatest(this.fetchEvent, this.session.userStream)\n                .pipe(\n                    switchMap(([_, user]) =>\n                        forkJoin([\n                            of(user),\n                            this.http.get<Wallet[]>(`/users/${user.id}/wallets`),\n                            this.http\n                                .get<Paginated<ICurrency>>('/currencies', {\n                                    params: {\n                                        'filter.transferable': JSON.stringify(true),\n                                    },\n                                })\n                                .pipe(map(response => response.data)),\n                        ])\n                    )\n                )\n                .subscribe(([user, wallets, currencies]) => {\n                    if (!this.transaction.currency) {\n                        this.transaction.currency = currencies[0]\n                    }\n                    this.transaction.baseWallet = {\n                        user: {\n                            id: user.id,\n                            accountNumber: user.accountNumber,\n                            name: user.name,\n                        },\n                    } as Wallet\n                    this.wallets = wallets.filter(wallet => new BigNumber(wallet.balance).isGreaterThan(0))\n                    this.transaction = Object.assign(this.transaction, {\n                        fixedFee: '0',\n                        relativeFee: '0',\n                    })\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.transferForm && this.transferForm.invalid) {\n            return\n        }\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction().subscribe(\n                transaction => {\n                    component.isCompleted = true\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                    this.transactionComplete.emit()\n                },\n                error => {\n                    if (error.name === 'RecipientNotFoundError') {\n                        modal.close()\n                        this.confirmation\n                            .show({\n                                title: 'Recipient not found',\n                                type: 'danger',\n                                text: `The recipient has not been found. Please check if the account number or email address entered is correct.`,\n                                confirmText: 'Got it',\n                                showCancel: false,\n                            })\n                            .subscribe()\n                    }\n                    component.isSubmitted = false\n                    component.reset()\n                }\n            )\n        })\n    }\n\n    public openContactBook(): void {\n        if (!this.transaction.baseWallet?.user) {\n            return\n        }\n        const modal = openContactBook(this.ngbModal, this.transaction.baseWallet.user)\n        this.subscriptions.add(\n            (modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n                this.recipient = contact.counterUser?.accountNumber\n                this.onRecipientChange(contact)\n                modal.close()\n            })\n        )\n    }\n\n    public onRecipientChange(contact?: IContact): void {\n        this.transaction.counterWallet = {\n            user: contact\n                ? contact.counterUser\n                : { accountNumber: !this.recipient ? '' : this.recipient.trim().replace(/\\s/g, '') },\n        } as Wallet\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            const target = this.wallets.find(wallet => wallet.currency.code === this.transaction.currency!.code)\n            if (target) {\n                const maxUsable = this.maxUsableAmount\n                const balance = maxUsable\n                    ? BigNumber.min(target.availableBalance, maxUsable).toString()\n                    : target.availableBalance\n                this.transaction.amount = new BigNumber(balance).toFixed(this.transaction.currency!.decimalPlaces)\n            }\n        }\n        if (this.isDefineByValue) {\n            this.calculateValueInUsd()\n        }\n    }\n\n    public calculateValueInUsd(): void {\n        this.currenciesQuery\n            .selectEntity('USD')\n            .pipe(take(1))\n            .subscribe(usd => {\n                if (!usd) {\n                    return\n                }\n                if (!this.transaction.amount) {\n                    this.valueInUsd = null\n                    return\n                }\n                this.valueInUsd = new BigNumber(\n                    Currency.convert(this.transaction.amount, this.transaction.currency!, usd)\n                ).toFixed(2)\n            })\n    }\n\n    public calculateAmount(): void {\n        this.currenciesQuery\n            .selectEntity('USD')\n            .pipe(take(1))\n            .subscribe(usd => {\n                if (!usd) {\n                    return\n                }\n                if (!this.valueInUsd) {\n                    this.transaction.amount = undefined\n                    return\n                }\n                this.transaction.amount = new BigNumber(\n                    Currency.convert(this.valueInUsd, usd, this.transaction.currency!)\n                ).toFixed(7)\n            })\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n        this.calculateAmount()\n        this.calculateValueInUsd()\n    }\n\n    public getMaximum(): string | null {\n        if (this.isDefineByValue || !this.transaction.currency) {\n            return '100000'\n        }\n        return new BigNumber(100000)\n            .times(this.transaction.currency.exchangeRate)\n            .toFixed(this.transaction.currency.decimalPlaces)\n    }\n\n    public getMinimum(): string {\n        if (this.isDefineByValue || !this.transaction.currency) {\n            return '1'\n        }\n        return new BigNumber(1)\n            .times(this.transaction.currency.exchangeRate)\n            .toFixed(this.transaction.currency.decimalPlaces)\n    }\n\n    private createTransaction(): Observable<Transaction> {\n        return this.http.post<Transaction>('/transactions', this.transaction).pipe(\n            flatMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    private reset(): void {\n        this.transaction = Object.assign(this.original, { currency: this.transaction.currency })\n        this.transactionChange.emit(this.transaction)\n        this.files = []\n        this.transferForm.resetForm({\n            'currency-select': this.transaction.currency,\n        })\n        this.isDefineByValue = true\n        this.fetchEvent.next()\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { AfterContentChecked, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription } from 'rxjs'\nimport { flatMap, map, switchMap, take, tap } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { WalletsQuery } from 'src/app/store/wallets/wallets.query'\nimport { environment } from 'src/environments/environment'\nimport { IContact, ICurrency, IFee, IUser } from '../../common/api-interfaces'\nimport { ContactBookComponent, openContactBook } from '../../common/contact-book/contact-book.component'\nimport { Currency } from '../../common/models/accounting/currency.model'\nimport { Transaction } from '../../common/models/accounting/transaction.model'\nimport { Wallet } from '../../common/models/accounting/wallet.model'\nimport { PaymentConfirmationComponent } from '../../common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from '../../common/services/accounting/fee.service'\nimport { ConfirmationService } from '../../common/services/confirmation.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { TransactionViewComponent } from '../../common/transaction/transaction-view/transaction-view.component'\nimport { WalletsService } from '../../store/wallets/wallets.service'\n\n@Component({\n    selector: 'transfer-form',\n    templateUrl: 'transfer-form.component.html',\n})\nexport class TransferFormComponent implements OnInit, AfterContentChecked, OnDestroy {\n    @Input()\n    public transaction: Partial<Transaction>\n    @ViewChild('transferForm')\n    public transferForm: NgForm\n\n    public minAmount: string | number | undefined\n    @Input()\n    public recipient: string\n    @Input()\n    public lockRecipient = false\n    @Input()\n    public showContactBtn = true\n    public files: File[] = []\n    public purposes = [\n        `${this.translate.instant('common.employment-income')}`,\n        `${this.translate.instant('common.social-security')}`,\n        `${this.translate.instant('common.trust-fund-income')}`,\n        `${this.translate.instant('common.pre-funding-remittance-account')}`,\n        `${this.translate.instant('transfer-form.savings')}`,\n        `${this.translate.instant('transfer-form.capital-injection')}`,\n        `${this.translate.instant('transfer-form.cash-disbursements')}`,\n        `${this.translate.instant('common.purchase-sales-of-goods')}`,\n        `${this.translate.instant('transfer-form.invoice-supplier-payment')}`,\n        `${this.translate.instant('common.tax-payment')}`,\n        `${this.translate.instant('common.license-subscription-fee')}`,\n        `${this.translate.instant('common.payment-of-interest')}`,\n        `${this.translate.instant('common.bill-utilities-payment')}`,\n        `${this.translate.instant('common.insurance-payment')}`,\n        `${this.translate.instant('common.refund-rebate')}`,\n        `${this.translate.instant('common.commission-bonus-payment')}`,\n        `${this.translate.instant('common.family-maintenance-education-medical-travel')}`,\n        `${this.translate.instant('common.pre-funding-foreign-exchange-account')}`,\n        `${this.translate.instant('transfer-form.loan-payment')}`,\n        `${this.translate.instant('common.investment-securities')}`,\n        `${this.translate.instant('common.transport')}`,\n        `${this.translate.instant('common.property-payment')}`,\n    ]\n\n    public displayName = environment.displayName\n    public inclusiveFee = true\n    public isUploadCollapsed = true\n    public faQuestionCircle = faQuestionCircle\n\n    private fee: IFee | null = null\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n\n    constructor(\n        public session: SessionService,\n        private feeService: FeeService,\n        private http: HttpClient,\n        private ngbModal: NgbModal,\n        private confirmation: ConfirmationService,\n        private walletsService: WalletsService,\n        private route: ActivatedRoute,\n        private walletsQuery: WalletsQuery,\n        private currenciesQuery: CurrenciesQuery,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest(this.fetchEvent, this.session.userStream)\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.baseWallet = {\n                            user: {\n                                id: user.id,\n                                accountNumber: user.accountNumber,\n                                name: user.name,\n                            },\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        this.currenciesQuery.selectEntity(user.preferredCurrency.code).pipe(\n                            take(1),\n                            flatMap(preferredCurrency => {\n                                if (!this.transaction.currency) {\n                                    this.transaction.currency = preferredCurrency\n                                }\n                                return this.feeService.fetch({\n                                    type: 'transfer',\n                                    method: 'internal',\n                                    user: { id: user.id } as IUser,\n                                    currency: { code: this.transaction.currency?.code } as ICurrency,\n                                })\n                            })\n                        )\n                    )\n                )\n                .subscribe(fee => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                })\n        )\n        this.fetchEvent.next()\n        if (this.route.snapshot.queryParamMap.has('recipient')) {\n            this.recipient = this.route.snapshot.queryParamMap.get('recipient')!\n            this.onRecipientChange()\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this.recipient) {\n            this.onRecipientChange()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.transferForm && this.transferForm.invalid) {\n            return\n        }\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction().subscribe(\n                transaction => {\n                    component.isCompleted = true\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                },\n                error => {\n                    if (error.name === 'RecipientNotFoundError') {\n                        modal.close()\n                        this.confirmation\n                            .show({\n                                title: this.translate.instant('common.recipient-not-found'),\n                                type: 'danger',\n                                text: this.translate.instant('common.recipient-not-found-desc'),\n                                confirmText: this.translate.instant('common.understood'),\n                                showCancel: false,\n                            })\n                            .subscribe()\n                    }\n                    component.isSubmitted = false\n                    component.reset()\n                }\n            )\n        })\n    }\n\n    public openContactBook(): void {\n        if (!this.transaction.baseWallet?.user) {\n            return\n        }\n        const modal = openContactBook(this.ngbModal, this.transaction.baseWallet.user)\n        this.subscriptions.add(\n            (modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n                this.recipient = contact.counterUser?.accountNumber\n                this.onRecipientChange(contact)\n                modal.close()\n            })\n        )\n    }\n\n    public onRecipientChange(contact?: IContact): void {\n        this.transaction.counterWallet = {\n            user: contact\n                ? contact.counterUser\n                : { accountNumber: !this.recipient ? '' : this.recipient.trim().replace(/\\s/g, '') },\n        } as Wallet\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            this.walletsQuery.balances$.subscribe(balances => {\n                const found = balances.find(balance => balance.currency.code === this.transaction.currency!.code)\n                if (found) {\n                    this.transaction.amount = found.availableBalance\n\n                    if (!this.inclusiveFee && this.fee) {\n                        const maxFee = new BigNumber(\n                            Currency.convert(this.fee.max!, this.fee.currency, this.transaction.currency!)\n                        )\n                        const relativeFeeAmount = new BigNumber(this.transaction.amount).times(\n                            this.transaction.relativeFee ?? 0\n                        )\n                        let fee = new BigNumber(this.transaction.fixedFee || 0).plus(relativeFeeAmount)\n                        if (fee.isGreaterThan(maxFee)) {\n                            fee = maxFee\n                        }\n                        this.transaction.amount = new BigNumber(this.transaction.amount)\n                            .minus(fee)\n                            .toFixed(this.transaction.currency!.decimalPlaces, 1)\n                    }\n\n                    if (new BigNumber(this.transaction.amount).isLessThan(0)) {\n                        this.transaction.amount = '0'\n                    }\n\n                    this.transaction.amount = parseFloat(this.transaction.amount).toString()\n                }\n            })\n        }\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        const body = {\n            ...this.transaction,\n        }\n        if (!this.inclusiveFee) {\n            body.amount = undefined\n            body.settledAmount = this.transaction.amount\n        }\n        return this.http.post<Transaction>('/transactions', body).pipe(\n            flatMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public toggleInclusiveFee(): void {\n        this.inclusiveFee = !this.inclusiveFee\n        this.transaction.settledAmount = !this.inclusiveFee ? this.transaction.amount : undefined\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    public reset(): void {\n        this.files = []\n        this.inclusiveFee = true\n        this.transferForm.resetForm({\n            inclusiveFee: true,\n            amount: undefined,\n            purpose: undefined,\n            comment: undefined,\n            'currency-select': this.transaction.currency,\n        })\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { TransferComponent } from './transfer.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TransferComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TransferRoutingModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\" *ngIf=\\\"showContactBtn\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" class=\\\"font-lg\\\">{{ 'common.view-contacts' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #transferForm=\\\"ngForm\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': transferForm.submitted }\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"recipient\\\"\\n                    >{{ 'common.account-number' | translate | titlecase }} / {{ 'common.email' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"recipient\\\"\\n                name=\\\"recipient\\\"\\n                [(ngModel)]=\\\"recipient\\\"\\n                (ngModelChange)=\\\"onRecipientChange()\\\"\\n                #recipientInput=\\\"ngModel\\\"\\n                recipientValidator\\n                required\\n                emptyToNull\\n                [disabled]=\\\"lockRecipient\\\"\\n            />\\n            <div *ngIf=\\\"recipientInput.invalid && (transferForm.submitted || recipientInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.invalidRecipient\\\">{{ 'common.invalid-recipient' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            </div>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"['crypto', 'fiat', 'product']\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                [required]=\\\"true\\\"\\n                [transferable]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                [hideZeroBalance]=\\\"true\\\"\\n                #currencySelect\\n            >\\n            </currency-select>\\n            <div\\n                *ngIf=\\\"currencySelect.currencyInput.invalid && (transferForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                class=\\\"error-messages\\\"\\n            >\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                    {{ 'common.this-is-required' | translate }}\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <div class=\\\"d-flex\\\">\\n                    <label class=\\\"font-md\\\">{{ 'common.amount' | translate }}</label>\\n                </div>\\n                <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n            </div>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (transferForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    {{ 'common.minimum-amount-is' | translate }}\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"custom-control custom-checkbox\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" name=\\\"inclusiveFee\\\" (click)=\\\"toggleInclusiveFee()\\\" [ngModel]=\\\"inclusiveFee\\\" />\\n                <span class=\\\"custom-control-label font-md\\\">\\n                    {{ 'common.include-service-fee' | translate }}\\n                    <fa-icon\\n                        class=\\\"text-primary\\\"\\n                        [icon]=\\\"faQuestionCircle\\\"\\n                        [popoverTitle]=\\\"inclusiveFeeTitle\\\"\\n                        [ngbPopover]=\\\"inclusiveFeeContent\\\"\\n                        triggers=\\\"hover\\\"\\n                        container=\\\"body\\\"\\n                    >\\n                    </fa-icon>\\n                </span>\\n            </label>\\n        </div>\\n        <div class=\\\"pt-2 mb-1\\\"></div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n            <ng-select\\n                class=\\\"ng-select-lg\\\"\\n                name=\\\"purpose\\\"\\n                [(ngModel)]=\\\"transaction.purpose\\\"\\n                [items]=\\\"purposes\\\"\\n                [clearable]=\\\"false\\\"\\n                [required]=\\\"true\\\"\\n                [addTag]=\\\"true\\\"\\n                addTagText=\\\"Use\\\"\\n                dropdownPosition=\\\"bottom\\\"\\n                #purposeInput=\\\"ngModel\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"purposeInput.invalid && (transferForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"reference\\\"\\n                >{{ 'common.reference' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-lg\\\" id=\\\"reference\\\" name=\\\"reference\\\" [(ngModel)]=\\\"transaction.reference\\\" emptyToNull />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\"\\n                >{{ isUploadCollapsed ? '+ ' + ('common.attach' | translate) : '- ' + ('common.remove' | translate) }}\\n                {{ 'common.file' | translate }}</a\\n            >\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\">{{ 'common.submit' | translate }}</button>\\n        <div *ngIf=\\\"transaction.currency && transaction.currency.type === 'crypto'\\\" class=\\\"small text-muted mb-2\\\">\\n            <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n            Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n        </div>\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"transaction && transaction.method !== 'card'\\\">\\n            <div>{{ 'common.by-clicking-the-submit-button' | translate }}</div>\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.</small\\n        >\\n    </form>\\n    <ng-template #recipientTitle> {{ 'common.terms' | translate }} </ng-template>\\n    <ng-template #recipientContent>\\n        <p>{{ 'common.you-can-send-fund-to-other' | translate: { value: displayName } }}</p>\\n        <p [innerHtml]=\\\"'common.ask-your-beneficiary' | translate\\\"></p>\\n    </ng-template>\\n    <ng-template #inclusiveFeeTitle> {{ 'common.include-service-fee' | translate }} </ng-template>\\n    <ng-template #inclusiveFeeContent>\\n        <p>\\n            {{ 'common.if' | translate }} <b>{{ 'common.checked' | translate }}</b\\n            >, {{ 'common.checked-desc' | translate }}\\n        </p>\\n        <p>\\n            {{ 'common.if' | translate }} <b>{{ 'common.unchecked' | translate }}</b\\n            >, {{ 'common.unchecked-desc' | translate }}\\n        </p>\\n    </ng-template>\\n</ng-container>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IFee } from '../../common/api-interfaces'\nimport { FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesService {\n    constructor(protected store: FeesStore, private http: HttpClient, private session: SessionService) {}\n\n    public fetchAsObservable(): Observable<IFee[]> {\n        return forkJoin([\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AU',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AG',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'USD',\n                },\n            }),\n        ]).pipe(\n            map(([goldFees, silverFees, usdFees]) => [...goldFees, ...silverFees, ...usdFees]),\n            tap(fees => {\n                this.store.set(fees)\n            })\n        )\n    }\n\n    public fetch(): void {\n        this.fetchAsObservable().subscribe(() => undefined)\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { SgpmxTransferFormComponent } from './sgpmx-transfer-form.component/sgpmx-transfer-form.component'\nimport { TransferFormComponent } from './transfer-form.component.ts/transfer-form.component'\nimport { TransferRoutingModule } from './transfer-routing.module'\nimport { TransferComponent } from './transfer.component'\n\n@NgModule({\n    declarations: [TransferComponent, TransferFormComponent, SgpmxTransferFormComponent],\n    imports: [CommonModule, TransferRoutingModule, PaymentFormModule, TransactionModule],\n    exports: [TransferFormComponent],\n})\nexport class TransferModule {}\n"]}