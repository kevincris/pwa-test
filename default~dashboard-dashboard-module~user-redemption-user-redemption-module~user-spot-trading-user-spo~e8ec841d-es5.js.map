{"version":3,"sources":["webpack:///src/app/common/card-view/card-view.module.ts","webpack:///src/app/dashboard/account-profile/account-profile.component.ts","webpack:///src/app/dashboard/dashboard-transactions/dashboard-transactions.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dashboard/dashboard-routing.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.module.ts","webpack:///src/app/dashboard/account-cards/account-cards.component.html","webpack:///src/app/common/terms-modal/terms-modal.component.ts","webpack:///src/app/dashboard/account-profile/account-profile.component.html","webpack:///src/app/dashboard/account-profile/activity-feed/activity-feed.component.ts","webpack:///src/app/dashboard/account-balance/account-balance.component.ts","webpack:///src/app/dashboard/account-cards/account-cards.component.ts","webpack:///src/app/dashboard/account-profile/activity-feed/activity-feed.component.html","webpack:///src/app/dashboard/account-balance/account-balance.component.html","webpack:///src/app/common/terms-modal/terms-modal.component.html"],"names":["CardViewModule","declarations","exports","imports","AccountProfileComponent","http","alertService","session","translate","activeTab","toStartCase","completeness","verificationStatus","radius","circumference","Math","PI","faCheck","faExclamation","subscriptions","add","userStream","subscribe","user","get","id","verifications","buildUserVerificationAlerts","unsubscribe","_","clearByTag","VERIFICATION","callToAction","label","instant","route","approvedAt","length","every","verification","completed","tag","severity","message","selector","template","DashboardTransactionsComponent","limit","defaultLimit","routes","path","component","canActivate","children","DashboardRoutingModule","forChild","DashboardComponent","router","termService","modal","toastr","confirmation","faArrowAltToBottom","faArrowAltFromBottom","faCreditCardFront","faFileInvoice","faPaperPlane","faSync","faAngleDown","faCompass","faBalanceScale","faExchange","faBox","faPlus","faMinus","appName","pipe","getTermsAcceptance","termsAcceptance","cardOrders","unconfirmedCardOrder","find","cardOrder","status","acceptedAt","openTermsModal","openConfirmCardOrderModal","termsModal","open","windowClass","backdrop","keyboard","result","then","accept","success","show","type","text","confirmText","confirmClass","cancelText","cancelClass","CONFIRMED","logout","navigate","cardOrderConfirmationModal","componentInstance","DashboardModule","ease","scroll","TermsModalComponent","activeModal","termsService","element","step","viewOnly","isDown","fetchEvent","scrollHandler","modalContainer","scrollTop","scrollHeight","offsetHeight","subheader","isAuthenticated","undefined","getApplicableTerm","term","setTimeout","next","nativeElement","querySelector","addEventListener","removeEventListener","close","top","clientHeight","duration","inOutExpo","ActivityFeedComponent","AccountBalanceComponent","userService","tokenService","currenciesQuery","walletsQuery","compact","extended","filter","faCircle","faChevronDoubleDown","faChevronDoubleUp","getSymbolFromCurrency","getCurrencyColor","colorScheme","domain","proceedOfSalesBalance","showOther","formatTooltip","item","data","name","preferredCurrency$","wallets$","filteredBalances$","totalBalance$","filteredWallets$","wallets","wallet","includes","currency","code","otherWallets$","currencies$","selectAll","filterBy","currencies","map","exchangeRateFlipped","div","exchangeRate","toFixed","chartData$","balances$","i","push","chartData","availableBalance","toFormat","value","parseFloat","preferredCurrency","changePreferredCurrency","refresh","AccountCardsComponent","ngbModal","changeDetector","modalController","faInfoCircle","displayName","isLoading","apiUrl","card","create","componentProps","present","pan","slice","balance","curSymbol"],"mappings":"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","file":"default~dashboard-dashboard-module~user-redemption-user-redemption-module~user-spot-trading-user-spo~e8ec841d-es5.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common.module'\nimport { CardDetailsPage } from './card-details/card-details.page'\nimport { CardViewPage } from './card-view.page'\nimport { ModalChangePinPage } from './modal-change-pin/modal-change-pin.page'\nimport { ModalDownloadTransactionsPage } from './modal-download-transactions/modal-download-transactions.page'\nimport { ModalFeesPage } from './modal-fees/modal-fees.page'\nimport { ModalOffledgerPage } from './modal-offledger/modal-offledger.page'\nimport { ModalSwapPage } from './modal-swap/modal-swap.page'\nimport { ModalTopupPage } from './modal-topup/modal-topup.page'\nimport { ModalUnloadPage } from './modal-unload/modal-unload.page'\n\n@NgModule({\n    declarations: [\n        CardViewPage,\n        ModalTopupPage,\n        CardDetailsPage,\n        ModalChangePinPage,\n        ModalDownloadTransactionsPage,\n        ModalFeesPage,\n        ModalOffledgerPage,\n        ModalUnloadPage,\n        ModalSwapPage,\n    ],\n    exports: [CardViewPage],\n    imports: [CommonModule, IonicModule],\n})\nexport class CardViewModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { faCheck, faExclamation } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { of, Subscription } from 'rxjs'\nimport { IUser, Verification } from '../../common/api-interfaces'\nimport { toStartCase } from '../../common/common.mixin'\nimport { User } from '../../common/models/core/user.model'\nimport { AlertService, AlertTag } from '../../common/services/alert.service'\nimport { SessionService } from '../../common/services/session.service'\n\n@Component({\n    selector: 'account-profile',\n    templateUrl: 'account-profile.component.html',\n})\nexport class AccountProfileComponent implements OnInit, OnDestroy {\n    public activeTab: 'information' | 'audit-log' = 'information'\n    public toStartCase = toStartCase\n    public completeness = 100\n    public verificationStatus = ''\n    public radius = 54\n    public circumference = 2 * Math.PI * this.radius\n    public dashoffset: number\n    public faCheck = faCheck\n    public faExclamation = faExclamation\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        public http: HttpClient,\n        private alertService: AlertService,\n        public session: SessionService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                ;(user\n                    ? this.http.get<Verification[]>(`/users/${user.id}/verifications`)\n                    : of([] as Verification[])\n                ).subscribe(verifications => {\n                    this.buildUserVerificationAlerts(new User(user), verifications)\n                })\n            })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public buildProfileLink(_: User): string[] {\n        return ['/account/profile']\n    }\n\n    private buildUserVerificationAlerts(user: IUser, verifications: Verification[]): void {\n        this.alertService.clearByTag(AlertTag.VERIFICATION)\n        const callToAction = {\n            label: this.translate.instant('common.complete-verification-now'),\n            route: '/verify',\n        }\n        if (\n            !user.approvedAt &&\n            verifications.length > 0 &&\n            verifications.every(verification => verification.completed)\n        ) {\n            this.alertService.add({\n                tag: AlertTag.VERIFICATION,\n                severity: 'info',\n                message: this.translate.instant('common.thank-you-for-completing'),\n            })\n        } else if (!user.approvedAt) {\n            this.alertService.add({\n                tag: AlertTag.VERIFICATION,\n                severity: 'danger',\n                message: this.translate.instant('common.your-identity-not-verified'),\n                callToAction,\n            })\n        }\n    }\n}\n","import { Component } from '@angular/core'\nimport { UserTransactionsComponent } from '../../common/user-transactions/user-transactions.component'\n\n@Component({\n    selector: 'dashboard-transactions',\n    templateUrl: '../../common/user-transactions/user-transactions.component.html',\n})\nexport class DashboardTransactionsComponent extends UserTransactionsComponent {\n    public limit = 5\n    protected defaultLimit = 5\n    protected async changeState(): Promise<void> {\n        // do nothing\n    }\n}\n","export default \"<div class=\\\"e2e-dashboard\\\">\\n    <alert-outlet layout=\\\"full-width\\\"></alert-outlet>\\n    <div class=\\\"container pt-page\\\">\\n        <div class=\\\"row\\\" *ngIf=\\\"appName !== 'sgpmx'; else sgpmxTemplate\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"quickbar quickbar-wrap\\\">\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/deposit']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltToBottom\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.deposit' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltFromBottom\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.withdraw' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/transfer']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.transfer' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('marketplaces')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/discover']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faCompass\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.discover' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('cards')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/cards']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faCreditCardFront\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.manage-cards' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('conversions')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/services/conversions']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faSync\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.swap-currency' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item d-none d-xl-flex\\\" *ngIf=\\\"session.user?.hasPermission('invoices')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/services/invoices']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faFileInvoice\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.create-invoice' | translate }}</span>\\n                        </a>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"card-deck\\\">\\n            <account-balance class=\\\"card\\\"></account-balance>\\n            <ng-container *ngIf=\\\"session.user?.hasPermission('cards'); else activity\\\">\\n                <account-cards class=\\\"card\\\"></account-cards>\\n            </ng-container>\\n            <ng-template #activity>\\n                <activity-feed class=\\\"card\\\" [cardView]=\\\"true\\\"></activity-feed>\\n            </ng-template>\\n            <account-profile class=\\\"card\\\"></account-profile>\\n        </div>\\n    </div>\\n    <router-outlet></router-outlet>\\n</div>\\n<ng-template #sgpmxTemplate>\\n    <div class=\\\"row no-gutters\\\">\\n        <div class=\\\"col-sm-24 col-lg-14\\\">\\n            <div class=\\\"quickbar quickbar-wrap sgpmx\\\">\\n                <div class=\\\"w-100 pl-2\\\"><b>Bullion</b></div>\\n                <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('trades')\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/buy-and-sell']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                        </figure>\\n                        <span>Buy &amp; Sell</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/transfer']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.transfer' | translate }}</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('redeem')\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/redeem']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBox\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'common.redeem' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-sm-24 col-lg-10 pl-lg-3\\\">\\n            <div class=\\\"quickbar quickbar-wrap sgpmx\\\">\\n                <div class=\\\"w-100 pl-2\\\"><b>Cash</b></div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/deposit']\\\">\\n                        <figure class=\\\"success\\\">\\n                            <fa-icon class=\\\"quickbar-icon text-success\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPlus\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.deposit' | translate }}</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                        <figure class=\\\"success\\\">\\n                            <fa-icon class=\\\"quickbar-icon text-success\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faMinus\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.withdraw' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { DashboardTransactionsComponent } from './dashboard-transactions/dashboard-transactions.component'\nimport { DashboardComponent } from './dashboard.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent,\n        canActivate: [LoggedInAuthGuard],\n        children: [\n            {\n                path: '',\n                component: DashboardTransactionsComponent,\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport {\n    faArrowAltFromBottom,\n    faArrowAltToBottom,\n    faBalanceScale,\n    faBox,\n    faCompass,\n    faCreditCardFront,\n    faExchange,\n    faFileInvoice,\n    faMinus,\n    faPaperPlane,\n    faPlus,\n    faSync,\n} from '@fortawesome/pro-duotone-svg-icons'\nimport { faAngleDown } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { forkJoin, Subscription } from 'rxjs'\nimport { delay, flatMap, take } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICardOrder, TermsAcceptance } from '../common/api-interfaces'\nimport { TermService } from '../common/services/compliance/term.service'\nimport { ConfirmationResult, ConfirmationService } from '../common/services/confirmation.service'\nimport { SessionService } from '../common/services/session.service'\nimport { ToastrService } from '../common/services/toastr.service'\nimport { TermsModalComponent } from '../common/terms-modal/terms-modal.component'\nimport { CardOrderConfirmationComponent } from '../user-cards/card-order-confirmation/card-order-confirmation.component'\n\n@Component({\n    selector: 'dashboard',\n    templateUrl: 'dashboard.component.html',\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public faCreditCardFront = faCreditCardFront\n    public faFileInvoice = faFileInvoice\n    public faPaperPlane = faPaperPlane\n    public faSync = faSync\n    public faAngleDown = faAngleDown\n    public faCompass = faCompass\n    public faBalanceScale = faBalanceScale\n    public faExchange = faExchange\n    public faBox = faBox\n    public faPlus = faPlus\n    public faMinus = faMinus\n    public appName = environment.appName\n\n    private unconfirmedCardOrder: ICardOrder\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        public router: Router,\n        public translate: TranslateService,\n        private termService: TermService,\n        private modal: NgbModal,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        private http: HttpClient\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    flatMap(user =>\n                        forkJoin([\n                            this.termService.getTermsAcceptance(user.id),\n                            this.http.get<ICardOrder[]>(`/users/${user.id}/card-orders`),\n                        ])\n                    ),\n                    delay(500)\n                )\n                .subscribe(([termsAcceptance, cardOrders]) => {\n                    // Store result and avoid overlap of terms modal and confirm card order modal\n                    this.unconfirmedCardOrder = cardOrders.find(cardOrder => cardOrder.status === 'unconfirmed')!\n                    if (!termsAcceptance.acceptedAt) {\n                        this.openTermsModal(termsAcceptance)\n                    } else if (!!this.unconfirmedCardOrder) {\n                        this.openConfirmCardOrderModal()\n                    }\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public openTermsModal(termsAcceptance: TermsAcceptance): void {\n        const termsModal = this.modal.open(TermsModalComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n            keyboard: false,\n        })\n\n        termsModal.result\n            .then(() => {\n                this.subscriptions.add(\n                    this.termService.accept(termsAcceptance, true).subscribe(() => {\n                        this.toastr.success(this.translate.instant('dashboard.accepted-terms-successfully'))\n                        if (!!this.unconfirmedCardOrder) {\n                            this.openConfirmCardOrderModal()\n                        }\n                    })\n                )\n            })\n            .catch(() => {\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'danger',\n                            text: this.translate.instant('dashboard.you-will-redirected'),\n                            confirmText: this.translate.instant('common.logout'),\n                            confirmClass: 'default',\n                            cancelText: this.translate.instant('dashboard.back-to-terms'),\n                            cancelClass: 'success',\n                        })\n                        .subscribe(async result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.session.logout()\n                                await this.router.navigate(['/login'])\n                            } else {\n                                this.openTermsModal(termsAcceptance)\n                            }\n                        })\n                )\n            })\n    }\n\n    public openConfirmCardOrderModal(): void {\n        const cardOrderConfirmationModal = this.modal.open(CardOrderConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n            keyboard: false,\n        })\n        ;(cardOrderConfirmationModal.componentInstance as CardOrderConfirmationComponent).cardOrder =\n            this.unconfirmedCardOrder\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { NgxChartsModule } from '@swimlane/ngx-charts'\nimport { CardDummyModule } from '../common/card-dummy/card-dummy.module'\nimport { CardViewModule } from '../common/card-view/card-view.module'\nimport { CommonModule } from '../common/common.module'\nimport { UserActivityModule } from '../common/user-activity/user-activity.module'\nimport { UserTransactionsModule } from '../common/user-transactions/user-transactions.module'\nimport { AccountBalanceComponent } from './account-balance/account-balance.component'\nimport { AccountCardsComponent } from './account-cards/account-cards.component'\nimport { AccountProfileComponent } from './account-profile/account-profile.component'\nimport { ActivityFeedComponent } from './account-profile/activity-feed/activity-feed.component'\nimport { DashboardRoutingModule } from './dashboard-routing.module'\nimport { DashboardTransactionsComponent } from './dashboard-transactions/dashboard-transactions.component'\nimport { DashboardComponent } from './dashboard.component'\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        AccountBalanceComponent,\n        ActivityFeedComponent,\n        AccountProfileComponent,\n        AccountCardsComponent,\n        DashboardTransactionsComponent,\n    ],\n    imports: [\n        CommonModule,\n        DashboardRoutingModule,\n        CardDummyModule,\n        NgxChartsModule,\n        UserActivityModule,\n        UserTransactionsModule,\n        CardViewModule,\n        IonicModule,\n    ],\n    exports: [AccountBalanceComponent],\n})\nexport class DashboardModule {}\n","export default \"<div class=\\\"card-header\\\">\\n    {{ 'common.cards' | translate }}\\n    <div class=\\\"card-menu\\\">\\n        <a class=\\\"font-lg\\\" [routerLink]=\\\"['/cards']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n    <ng-container *ngIf=\\\"items.length > 0; else orderCard\\\">\\n        <div class=\\\"card-body\\\">\\n            <a href class=\\\"card-preview\\\" *ngFor=\\\"let card of items\\\" (click)=\\\"showCard(card); $event.preventDefault()\\\">\\n                <div class=\\\"card-preview-details\\\">\\n                    <span>{{ formatPan(card.maskedPan) }}</span>\\n                    <span\\n                        class=\\\"text-capitalize badge badge-sm\\\"\\n                        [ngClass]=\\\"{\\n                            'badge-success': card.status === 'active',\\n                            'badge-danger': card.status === 'blocked',\\n                            'badge-warning': card.status === 'inactive'\\n                        }\\\"\\n                        >{{ card.status }}</span\\n                    >\\n                </div>\\n                <ng-container *ngIf=\\\"$any(card).balances$ | async; else loading; let balance\\\">\\n                    <div class=\\\"table-responsive\\\">\\n                        <table class=\\\"table table-borderless table-sm b-t-0 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let record of balance; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor($any({}))\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ getCurrencyName(record.curSymbol) }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span class=\\\"font-size-sm\\\">{{ record.balance | amount: 2 }} {{ record.curSymbol }}</span>\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-container>\\n                <ng-template #loading>\\n                    <div class=\\\"d-flex justify-content-center\\\">\\n                        <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n                    </div>\\n                </ng-template>\\n            </a>\\n        </div>\\n        <div class=\\\"card-footer text-center text-muted\\\"><fa-icon [icon]=\\\"faInfoCircle\\\"></fa-icon> {{ 'common.click-card-to-view' | translate }}</div>\\n    </ng-container>\\n    <ng-template #orderCard>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"d-flex flex-column justify-content-between h-100\\\">\\n                <div></div>\\n                <div class=\\\"text-center\\\">\\n                    <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                    <h5 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h5>\\n                    <p class=\\\"mb-3 text-gray\\\" *ngIf=\\\"appName === 'sgpmx'; else text\\\">\\n                        Upgrade to Stacker Market Pro account and get your multi-currency prepaid/debit card.\\n                    </p>\\n                    <ng-template #text>\\n                        <p class=\\\"mb-3 text-gray\\\">{{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}</p>\\n                    </ng-template>\\n\\n                    <div *ngIf=\\\"appName === 'sgpmx'\\\" class=\\\"callout callout-info m-0\\\">\\n                        <h6 class=\\\"text-center font-weight-bold\\\">LIMITED TIME OFFER</h6>\\n                        <p class=\\\"text-center\\\">Receive 200.00 USD worth of silver in your account when you apply now!</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"text-center pt-2\\\">\\n                    <a class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">{{ 'common.apply-now' | translate }}</a>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-template>\\n</ng-container>\\n\";","import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { of, Subject, Subscription } from 'rxjs'\nimport { flatMap, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Term } from '../api-interfaces'\nimport { TermService } from '../services/compliance/term.service'\nimport { SessionService } from '../services/session.service'\n\ntype TermsModalStep = 'terms' | 'privacy' | 'fees'\n\nconst ease = require('ease-component')\nconst scroll = require('scroll')\n\n@Component({\n    selector: 'terms-modal',\n    templateUrl: 'terms-modal.component.html',\n})\nexport class TermsModalComponent implements OnInit, OnDestroy {\n    @Input()\n    public step: TermsModalStep = 'terms'\n    @Input()\n    public viewOnly = false\n    public term: Term\n    public user?: IUser\n    public appName = environment.appName\n\n    public subheader: string\n\n    public isDown = false\n    private modalContainer: HTMLElement\n\n    private fetchEvent = new Subject<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService,\n        private session: SessionService,\n        private termsService: TermService,\n        private element: ElementRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.subheader = this.translate.instant('common.you-must-accept-the-terms')\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    switchMap(() => (this.session.isAuthenticated() ? this.session.userStream : of(undefined))),\n                    flatMap(user => this.termsService.getApplicableTerm(user?.id))\n                )\n                .subscribe(term => {\n                    this.term = term\n                    setTimeout(() => this.scrollHandler())\n                })\n        )\n        this.fetchEvent.next()\n\n        this.modalContainer = this.element.nativeElement.querySelector('.terms-container') as HTMLElement\n        this.modalContainer.addEventListener('scroll', this.scrollHandler)\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n        this.modalContainer.removeEventListener('scroll', this.scrollHandler)\n    }\n\n    public nextStep(): void {\n        this.modalContainer.scrollTop = 0\n\n        if (this.step === 'terms') {\n            this.step = 'privacy'\n        } else if (this.step === 'privacy') {\n            this.step = 'fees'\n        } else {\n            this.activeModal.close()\n        }\n        this.subheader = `${this.translate.instant('common.you-must-accept-the')} ${\n            this.step === 'privacy' ? this.translate.instant('common.privacy-policy') : this.step\n        } ${this.translate.instant('common.to-continue')}`\n    }\n\n    public scrollDown(): void {\n        scroll.top(this.modalContainer, this.modalContainer.scrollHeight - this.modalContainer.clientHeight, {\n            duration: 1000,\n            ease: ease.inOutExpo,\n        })\n    }\n\n    private scrollHandler = () => {\n        // 25px threshold\n        if (this.modalContainer.scrollTop >= this.modalContainer.scrollHeight - this.modalContainer.offsetHeight - 25) {\n            this.isDown = true\n        } else {\n            this.isDown = false\n        }\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"card-header font-lg\\\" *ngIf=\\\"session.user?.hasPermission('cards'); else title\\\">\\n        <ul class=\\\"nav nav-tabs nav-fill card-header-tabs\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a\\n                    href\\n                    class=\\\"nav-link\\\"\\n                    [ngClass]=\\\"{ active: activeTab === 'information' }\\\"\\n                    (click)=\\\"activeTab = 'information'; $event.preventDefault()\\\"\\n                    >{{ 'common.information' | translate }}</a\\n                >\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a\\n                    href\\n                    class=\\\"nav-link\\\"\\n                    [ngClass]=\\\"{ active: activeTab === 'audit-log' }\\\"\\n                    (click)=\\\"activeTab = 'audit-log'; $event.preventDefault()\\\"\\n                    >{{ 'common.audit-log' | translate | titlecase }}</a\\n                >\\n            </li>\\n        </ul>\\n    </div>\\n    <ng-template #title>\\n        <div class=\\\"card-header\\\">{{ 'common.account-information' | translate }}</div>\\n    </ng-template>\\n    <div class=\\\"card-body\\\">\\n        <div class=\\\"flex-column justify-content-between h-100\\\" [ngClass]=\\\"activeTab === 'information' ? 'd-flex' : 'd-none'\\\">\\n            <div class=\\\"d-flex flex-column justify-content-center h-100\\\">\\n                <div class=\\\"text-center position-relative mx-auto\\\">\\n                    <div class=\\\"profile-completeness\\\">\\n                        <user-avatar [user]=\\\"user\\\" size=\\\"xl\\\"></user-avatar>\\n                        <div class=\\\"progress-circle\\\">\\n                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                            <svg width=\\\"128\\\" height=\\\"128\\\" viewBox=\\\"0 0 120 120\\\">\\n                                <circle [attr.r]=\\\"radius\\\" cx=\\\"60\\\" cy=\\\"60\\\" stroke-width=\\\"4\\\" class=\\\"progress-circle-meter\\\"></circle>\\n                                <circle\\n                                    [style.strokeDasharray]=\\\"circumference\\\"\\n                                    [style.strokeDashoffset]=\\\"dashoffset\\\"\\n                                    [style.strokeLinecap]=\\\"'round'\\\"\\n                                    [attr.r]=\\\"radius\\\"\\n                                    cx=\\\"60\\\"\\n                                    cy=\\\"60\\\"\\n                                    stroke-width=\\\"6\\\"\\n                                    class=\\\"progress-circle-value\\\"\\n                                ></circle>\\n                            </svg>\\n                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                        </div>\\n                    </div>\\n                    <div\\n                        class=\\\"badge-profile\\\"\\n                        [ngClass]=\\\"!!user.approvedAt ? 'bg-success' : 'bg-warning'\\\"\\n                        [ngbTooltip]=\\\"(!!user.approvedAt ? 'common.your-identity-verified' : 'common.your-identiy-no-verified') | translate\\\"\\n                        placement=\\\"right\\\"\\n                    >\\n                        <fa-icon class=\\\"text-white\\\" [icon]=\\\"!!user.approvedAt ? faCheck : faExclamation\\\" [fixedWidth]=\\\"true\\\"></fa-icon>\\n                    </div>\\n                </div>\\n                <div class=\\\"text-center mb-3\\\">\\n                    <span class=\\\"label\\\" [ngClass]=\\\"user.type === 'personal' ? 'label-success' : 'label-primary'\\\">{{ user.type | startCase }}</span>\\n                </div>\\n                <div class=\\\"text-center\\\">\\n                    <div class=\\\"text-muted font-sm\\\">{{ 'common.account-name' | translate | titlecase }}</div>\\n                    <p class=\\\"profile-value text-primary\\\">{{ user.name }}</p>\\n                    <div class=\\\"text-muted font-sm\\\">{{ 'common.account-number' | translate | titlecase }}</div>\\n                    <p [ngClass]=\\\"user.association ? '' : 'mb-4'\\\">\\n                        <copy-wrap [value]=\\\"user.accountNumber\\\">\\n                            <span class=\\\"profile-value text-body\\\">{{ user.accountNumber | accountNumber }}</span>\\n                        </copy-wrap>\\n                    </p>\\n                    <ng-container *ngIf=\\\"user.association\\\">\\n                        <div class=\\\"text-muted font-sm\\\">{{ 'common.account-group' | translate }}</div>\\n                        <p class=\\\"profile-value text-primary mb-4\\\">{{ user.association.name }}</p>\\n                    </ng-container>\\n                </div>\\n            </div>\\n            <div class=\\\"text-center\\\">\\n                <button class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"buildProfileLink(user)\\\">{{ 'common.view-profile' | translate }}</button>\\n            </div>\\n        </div>\\n        <div class=\\\"flex-column justify-content-between h-100\\\" [ngClass]=\\\"activeTab === 'audit-log' ? 'd-flex' : 'd-none'\\\">\\n            <activity-feed></activity-feed>\\n            <div class=\\\"text-center pt-2\\\">\\n                <a class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"['/activities']\\\">{{ 'common.view-all' | translate }}</a>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { Component, Input } from '@angular/core'\nimport { UserActivitiesComponent } from '../../../user-activities/user-activities.component'\n\n@Component({\n    selector: 'activity-feed',\n    templateUrl: 'activity-feed.component.html',\n})\nexport class ActivityFeedComponent extends UserActivitiesComponent {\n    @Input()\n    public cardView: boolean\n    public limit = 5\n    protected defaultLimit = 5\n    protected async stateChange(): Promise<void> {\n        // do nothing\n    }\n}\n","import { Component, Input } from '@angular/core'\nimport { faChevronDoubleDown, faChevronDoubleUp } from '@fortawesome/pro-regular-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport * as getSymbolFromCurrency from 'currency-symbol-map'\nimport { Observable } from 'rxjs'\nimport { filter, flatMap, map, switchMap, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICurrency, Wallet } from '../../common/api-interfaces'\nimport { UserService } from '../../common/services/core/user.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { TokenService } from '../../common/services/token.service'\nimport { getCurrencyColor } from '../../store/currencies/currencies.mixin'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\nimport { WalletsQuery } from '../../store/wallets/wallets.query'\n\n@Component({\n    selector: 'account-balance',\n    templateUrl: 'account-balance.component.html',\n})\nexport class AccountBalanceComponent {\n    @Input()\n    public compact = false\n    @Input()\n    public extended = false\n    @Input()\n    public filter: string[] = []\n\n    public faCircle = faCircle\n    public faChevronDoubleDown = faChevronDoubleDown\n    public faChevronDoubleUp = faChevronDoubleUp\n\n    public getSymbolFromCurrency = getSymbolFromCurrency\n    public getCurrencyColor = getCurrencyColor\n\n    public chartData$: Observable<{ name: string; value: number }[]>\n    public colorScheme = { domain: [] as string[] }\n\n    public currencies$: Observable<(ICurrency & { exchangeRateFlipped: string })[]>\n    public preferredCurrency$: Observable<ICurrency>\n    public totalBalance$: Observable<string>\n    public wallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public appName = environment.appName\n    public proceedOfSalesBalance = '0.00'\n\n    public filteredWallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public otherWallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public showOther = false\n\n    constructor(\n        public session: SessionService,\n        private toastr: ToastrService,\n        private userService: UserService,\n        private tokenService: TokenService,\n        private currenciesQuery: CurrenciesQuery,\n        private walletsQuery: WalletsQuery,\n        public translate: TranslateService\n    ) {\n        this.preferredCurrency$ = this.currenciesQuery.preferredCurrency$\n        this.wallets$ = this.walletsQuery.filteredBalances$\n        this.totalBalance$ = this.walletsQuery.totalBalance$\n\n        this.filteredWallets$ = this.wallets$.pipe(\n            map(wallets => wallets.filter(wallet => !this.filter.length || this.filter.includes(wallet.currency.code)))\n        )\n        this.otherWallets$ = this.wallets$.pipe(\n            map(wallets => wallets.filter(wallet => !this.filter.length || !this.filter.includes(wallet.currency.code)))\n        )\n\n        this.currencies$ = this.currenciesQuery\n            .selectAll({\n                filterBy: currency => ['fiat', 'crypto'].includes(currency.type),\n            })\n            .pipe(\n                map(currencies =>\n                    currencies.map(currency => ({\n                        ...currency,\n                        exchangeRateFlipped:\n                            new BigNumber(1).div(currency.exchangeRate).toFixed(2, 1) === '0.00'\n                                ? new BigNumber(1).div(currency.exchangeRate).toFixed(4, 1)\n                                : new BigNumber(1).div(currency.exchangeRate).toFixed(2, 1),\n                    }))\n                )\n            )\n\n        this.chartData$ = this.walletsQuery.balances$.pipe(\n            tap(wallets => {\n                // Compute chart color based on css primary var\n                for (let i = 0; i < wallets.length; i++) {\n                    this.colorScheme.domain.push(getCurrencyColor(wallets[i].currency, i))\n                }\n            }),\n            map(wallets => {\n                const chartData = wallets.map(wallet => ({\n                    name: `${new BigNumber(wallet.availableBalance).toFormat(2, 1)} ${wallet.currency.code}`,\n                    value: parseFloat(wallet.value),\n                }))\n                if (chartData.length && chartData.every(data => data.value === 0)) {\n                    chartData[0].value = 1\n                }\n                return chartData\n            })\n        )\n    }\n\n    public changePreferredCurrency(currency: ICurrency): void {\n        this.session.userStream\n            .pipe(\n                take(1),\n                filter(user => user.preferredCurrency.code !== currency.code),\n                switchMap(user => this.userService.changePreferredCurrency(user.id, currency)),\n                flatMap(() => this.tokenService.refresh())\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.preferred-currency-changed'))\n            })\n    }\n\n    public formatTooltip = (item: any) => item.data.name\n}\n","import { currencies as CurrencyMap } from '@aerapass/country-data'\nimport { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faInfoCircle } from '@fortawesome/pro-light-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { ModalController } from '@ionic/angular'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { startCase } from 'lodash'\nimport { Observable } from 'rxjs'\nimport { flatMap, map, take, tap } from 'rxjs/operators'\nimport { CardViewPage } from 'src/app/common/card-view/card-view.page'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { environment } from 'src/environments/environment'\nimport { ICard, ICurrency } from '../../common/api-interfaces'\nimport { ListComponent } from '../../common/list.component'\nimport { SessionService } from '../../common/services/session.service'\nimport { getCurrencyColor } from '../../store/currencies/currencies.mixin'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\n\n@Component({\n    selector: 'account-cards',\n    templateUrl: 'account-cards.component.html',\n})\nexport class AccountCardsComponent extends ListComponent<ICard> implements OnInit {\n    public getCurrencyColor = getCurrencyColor\n    public faCircle = faCircle\n    public faInfoCircle = faInfoCircle\n    public limit = 4\n    public currencies: ICurrency[]\n    public displayName = environment.displayName\n    public appName = environment.appName\n    private isLoading = false\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private currenciesQuery: CurrenciesQuery,\n        private modalController: ModalController\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.subscriptions.add(\n            this.currenciesQuery.selectAll().subscribe(currencies => {\n                this.currencies = currencies\n            })\n        )\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user.id}/cards`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public async showCard(card: ICard): Promise<void> {\n        if (this.isLoading) {\n            return\n        }\n        this.isLoading = true\n        const modal = await this.modalController.create({\n            component: CardViewPage,\n            componentProps: {\n                item: card,\n            },\n        })\n        return await modal.present().finally(() => {\n            this.isLoading = false\n        })\n    }\n\n    public getCurrencyByCode(code: string): ICurrency | undefined {\n        return this.currencies.find(currency => currency.code === code)\n    }\n\n    public getCurrencyName(code: string): string {\n        if (code === 'USD') {\n            return 'US Dollar'\n        }\n        const currency = CurrencyMap[code]\n        if (currency) {\n            return startCase(currency.name)\n        }\n        return ''\n    }\n\n    public formatPan(pan: string): string {\n        return `${pan.slice(0, 4)} ${pan.slice(4, 8)} ${pan.slice(8, 12)} ${pan.slice(12)}`\n    }\n\n    protected mapItem(item: any): ICard {\n        item.balances$ = this.http.get<any[]>(`/cards/${item.id}/balance`).pipe(\n            map(balance => balance.filter(currency => currency.balance > 0)),\n            map(balance => (balance.length ? balance : [{ curSymbol: 'USD', balance: 0 }]))\n        )\n        return item\n    }\n}\n","export default \"<div class=\\\"card-header\\\" *ngIf=\\\"cardView\\\">\\n    {{ 'common.activities' | translate }}\\n    <div class=\\\"card-menu\\\">\\n        <a class=\\\"font-lg\\\" [routerLink]=\\\"['/activities']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n    </div>\\n</div>\\n<div [ngClass]=\\\"{ 'card-body': cardView }\\\">\\n    <div class=\\\"activity-feed\\\">\\n        <div class=\\\"feed-item\\\" [ngClass]=\\\"activity.severity\\\" *ngFor=\\\"let activity of itemsStream | async\\\">\\n            <div class=\\\"date\\\">{{ activity.createdAt | formatDistanceToNow: true:true }}</div>\\n            <div class=\\\"text\\\">\\n                <user-activity [activity]=\\\"activity\\\"></user-activity>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"preferredCurrency$ | async; let preferredCurrency\\\">\\n    <div class=\\\"card-header d-flex justify-content-between\\\">\\n        <span>{{ 'account-balance.account-balance' | translate }}</span>\\n        <div ngbDropdown placement=\\\"bottom-right\\\" class=\\\"account-balance-dropdown\\\" *ngIf=\\\"!compact\\\">\\n            <a href class=\\\"font-lg\\\" (click)=\\\"$event.preventDefault()\\\" ngbDropdownToggle>in {{ preferredCurrency.code }} &#x203A;</a>\\n            <div class=\\\"dropdown-menu-right\\\" ngbDropdownMenu>\\n                <h6 class=\\\"dropdown-header title-decorative text-center\\\">{{ 'common.choose-preferred-currency' | translate }}</h6>\\n                <div class=\\\"dropdown-divider mt-1\\\"></div>\\n                <button\\n                    ngbDropdownItem\\n                    *ngFor=\\\"let currency of currencies$ | async\\\"\\n                    [ngClass]=\\\"{ active: preferredCurrency.code === currency.code }\\\"\\n                    (click)=\\\"changePreferredCurrency(currency)\\\"\\n                >\\n                    <div>{{ currency.code }} ({{ currency.name }})</div>\\n                    <small class=\\\"text-muted\\\">\\n                        1.00 {{ currency.code }} = {{ currency.exchangeRateFlipped | amount: currency.decimalPlaces }} USD\\n                    </small>\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"d-flex flex-column justify-content-between h-100\\\">\\n        <div class=\\\"statistic-box\\\" *ngIf=\\\"!compact\\\">\\n            <div class=\\\"box-content\\\">\\n                <div class=\\\"box-chart-wrapper\\\">\\n                    <ngx-charts-pie-chart\\n                        *ngIf=\\\"chartData$ | async; let chartData\\\"\\n                        [scheme]=\\\"colorScheme\\\"\\n                        [results]=\\\"chartData\\\"\\n                        [legend]=\\\"false\\\"\\n                        [doughnut]=\\\"true\\\"\\n                        [arcWidth]=\\\"0.29\\\"\\n                        [tooltipText]=\\\"formatTooltip\\\"\\n                    >\\n                    </ngx-charts-pie-chart>\\n                </div>\\n            </div>\\n        </div>\\n        <div>\\n            <div class=\\\"table-responsive\\\">\\n                <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmx\\\">\\n                    <ng-container *ngIf=\\\"!extended; else extendedTemplate\\\">\\n                        <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let wallet of wallets$ | async; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"colorScheme.domain[index]\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ wallet.currency.name }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span\\n                                            class=\\\"font-size-sm\\\"\\n                                            placement=\\\"left\\\"\\n                                            [ngbTooltip]=\\\"\\n                                                (preferredCurrency?.code === wallet.currency.code ? '' : '~') +\\n                                                ($any(wallet).value | amount: 2) +\\n                                                ' ' +\\n                                                preferredCurrency?.code\\n                                            \\\"\\n                                            >{{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }}</span\\n                                        >\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </ng-container>\\n                </ng-container>\\n                <ng-template #sgpmx>\\n                    <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                        <tbody>\\n                            <tr *ngFor=\\\"let wallet of wallets$ | async; let index = index\\\">\\n                                <td>\\n                                    <ng-container [ngSwitch]=\\\"wallet.currency.code\\\">\\n                                        <ng-container *ngSwitchDefault>\\n                                            <fa-icon\\n                                                class=\\\"mr-2\\\"\\n                                                [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                [icon]=\\\"faCircle\\\"\\n                                            ></fa-icon>\\n                                            {{ wallet.currency.name }}\\n                                        </ng-container>\\n                                        <ng-container *ngSwitchCase=\\\"'AU'\\\">\\n                                            <div class=\\\"d-flex align-items-center\\\">\\n                                                <fa-icon\\n                                                    class=\\\"mr-2\\\"\\n                                                    [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                    [icon]=\\\"faCircle\\\"\\n                                                ></fa-icon>\\n                                                <div>\\n                                                    <div>Gold</div>\\n                                                    <span class=\\\"font-sm text-muted\\\">Troy Ounce</span>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                        <ng-container *ngSwitchCase=\\\"'AG'\\\">\\n                                            <div class=\\\"d-flex align-items-center\\\">\\n                                                <fa-icon\\n                                                    class=\\\"mr-2\\\"\\n                                                    [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                    [icon]=\\\"faCircle\\\"\\n                                                ></fa-icon>\\n                                                <div>\\n                                                    <div>Silver</div>\\n                                                    <span class=\\\"font-sm text-muted\\\">Troy Ounce</span>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"font-size-sm\\\">\\n                                        {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                    ><br />\\n                                    <ng-container *ngIf=\\\"wallet.currency.code !== 'USD'; else usd\\\">\\n                                        <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                    </ng-container>\\n                                    <ng-template #usd>\\n                                        <div class=\\\"small text-muted\\\">\\n                                            {{ compact ? 'TUA' : 'Top Up Account' }}: {{ wallet.topupAmount | amount: 2 }} USD\\n                                        </div>\\n                                        <span class=\\\"small text-muted\\\">\\n                                            {{ compact ? 'SP' : 'Sales Proceeds' }}:\\n                                            {{ wallet.proceedsOfSales | amount: 2 }}\\n                                            USD\\n                                        </span>\\n                                    </ng-template>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </ng-template>\\n                <ng-template #extendedTemplate>\\n                    <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                        <tbody>\\n                            <tr *ngFor=\\\"let wallet of filteredWallets$ | async; let index = index\\\">\\n                                <td>\\n                                    <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                    {{ wallet.currency.name }}\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"font-size-sm\\\">\\n                                        {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                    ><br />\\n                                    <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                    <div class=\\\"overlay overlay-dark\\\" [(ngbCollapse)]=\\\"!showOther\\\">\\n                        <table class=\\\"table table-striped table-borderless table-card b-t-1 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let wallet of otherWallets$ | async; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ wallet.currency.name }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span class=\\\"font-size-sm\\\">\\n                                            {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                        ><br />\\n                                        <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-template>\\n            </div>\\n            <div class=\\\"card-footer text-center p-0\\\" *ngIf=\\\"extended\\\">\\n                <a href=\\\"javascript:;\\\" class=\\\"d-block text-muted text-primary-hover py-2\\\" (click)=\\\"showOther = !showOther\\\">\\n                    <fa-icon [icon]=\\\"!showOther ? faChevronDoubleDown : faChevronDoubleUp\\\"></fa-icon>\\n                </a>\\n            </div>\\n            <div class=\\\"card-footer text-center text-muted\\\" *ngIf=\\\"!compact\\\">\\n                {{ 'common.total-balance' | translate | sentenceCase }}\\n                <span class=\\\"text-primary\\\">\\n                    {{ totalBalance$ | async | amount: preferredCurrency?.decimalPlaces }} {{ preferredCurrency?.code }}\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">\\n        {{\\n            (step === 'terms' ? 'common.terms-and-conditions' : step === 'privacy' ? 'common.data-privacy-notice' : 'common.fee-schedule')\\n                | translate\\n                | titlecase\\n        }}\\n    </h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div *ngIf=\\\"!viewOnly\\\" class=\\\"modal-subheader\\\">\\n    {{ subheader }}\\n</div>\\n<div class=\\\"modal-body terms-container text-body e2e-terms-modal\\\">\\n    <ng-container *ngIf=\\\"term; else loadingContent\\\">\\n        <div *ngIf=\\\"step === 'terms'\\\" [innerHtml]=\\\"term.terms | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'privacy'\\\" [innerHtml]=\\\"term.privacy | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'fees'\\\">\\n            <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmxFees\\\">\\n                <term-fees [user]=\\\"user\\\"></term-fees>\\n            </ng-container>\\n            <ng-template #sgpmxFees>\\n                <sgpmx-term-fees [user]=\\\"user\\\"></sgpmx-term-fees>\\n            </ng-template>\\n        </div>\\n    </ng-container>\\n    <ng-template #loadingContent>\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n        <p class=\\\"mb-0 mt-5 text-center\\\">{{ 'common.loading-terms' | translate }}</p>\\n    </ng-template>\\n</div>\\n<div class=\\\"modal-footer flex-column flex-md-row justify-content-center justify-content-md-end\\\">\\n    <ng-container *ngIf=\\\"!viewOnly; else closeButton\\\">\\n        <button class=\\\"btn btn-link mr-md-auto mb-2 mb-md-0 e2e-scroll-down-button\\\" (click)=\\\"scrollDown()\\\">\\n            {{ 'common.scroll-to-bottom' | translate }}\\n        </button>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm ml-1\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.decline' | translate }}</button>\\n            <button class=\\\"btn btn-success btn-w-sm ml-1 e2e-accept-button\\\" (click)=\\\"nextStep()\\\" [disabled]=\\\"!isDown\\\">\\n                {{ 'common.accept' | translate }}\\n            </button>\\n        </div>\\n    </ng-container>\\n    <ng-template #closeButton>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n        </div>\\n    </ng-template>\\n</div>\\n\";"]}