{"version":3,"sources":["webpack:///src/app/common/mails/mail/mail.component.ts","webpack:///src/app/common/mails/mail-form/mail-form.component.html","webpack:///src/app/common/mails/mails.module.ts","webpack:///src/app/common/mails/mails.component.ts","webpack:///src/app/common/mails/mail/mail.component.html","webpack:///src/app/common/mails/mails.component.html","webpack:///src/app/common/mails/mail-form/mail-form.component.ts"],"names":["MailComponent","http","Toastr","mailNotifications","route","router","session","intercom","translate","markAsRead","attachments","isDeleting","isLoading","displayName","faReply","faShare","faHistory","faTrash","faFile","subscriptions","fetchEvent","add","pipe","fetch","subscribe","paramMap","params","mailId","get","mail","id","next","unsubscribe","Object","assign","obs","read","post","notify","navigate","relativeTo","success","instant","back","attachment","createSignedUrl","signedUrl","window","open","startConversation","buildPrePopulatedMessage","subject","content","replace","selector","template","MailsModule","declarations","imports","exports","MailsComponent","ngbModal","changeDetector","striptags","apiUrl","user","MailFormComponent","activeModal","files","templates","useName","faTimes","editorModules","toolbar","list","indent","header","align","selectedTemplate","onSelectTemplate","reset","name","buildBaseMessage","recipient","message","form","valid","submitted"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmBaA,aAAa;AAgBtB,+BACYC,IADZ,EAEYC,MAFZ,EAGYC,iBAHZ,EAIYC,KAJZ,EAKYC,MALZ,EAMYC,OANZ,EAOWC,QAPX,EAQWC,SARX,EAQsC;AAAA;;AAP1B,eAAAP,IAAA,GAAAA,IAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,OAAA,GAAAA,OAAA;AACD,eAAAC,QAAA,GAAAA,QAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AAtBJ,eAAAC,UAAA,GAAa,KAAb;AAEA,eAAAC,WAAA,GAAqB,EAArB;AACA,eAAAC,UAAA,GAAa,KAAb;AACA,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,WAAA,GAAc,0EAAYA,WAA1B;AACA,eAAAC,OAAA,GAAU,wEAAV;AACA,eAAAC,OAAA,GAAU,wEAAV;AACA,eAAAC,SAAA,GAAY,0EAAZ;AACA,eAAAC,OAAA,GAAU,wEAAV;AACA,eAAAC,MAAA,GAAS,yEAAT;AACC,eAAAC,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AACA,eAAAC,UAAA,GAAa,IAAI,4CAAJ,EAAb;AAWJ;;AAzBkB;AAAA;AAAA,iBA2Bf,oBAAQ;AAAA;;AACX,iBAAKD,aAAL,CAAmBE,GAAnB,CAAuB,KAAKD,UAAL,CAAgBE,IAAhB,CAAqB,iEAAU;AAAA,qBAAM,KAAI,CAACC,KAAL,EAAN;AAAA,aAAV,CAArB,EAAoDC,SAApD,EAAvB;AACA,iBAAKL,aAAL,CAAmBE,GAAnB,CACI,KAAKjB,KAAL,CAAWqB,QAAX,CAAoBD,SAApB,CAA8B,UAAAE,MAAM,EAAI;AACpC,kBAAMC,MAAM,GAAGD,MAAM,CAACE,GAAP,CAAW,QAAX,CAAf;;AACA,kBAAID,MAAJ,EAAY;AACR,qBAAI,CAACE,IAAL,GAAY;AACRC,oBAAE,EAAEH;AADI,iBAAZ;;AAGA,qBAAI,CAACP,UAAL,CAAgBW,IAAhB;AACH;AACJ,aARD,CADJ;AAWH;AAxCqB;AAAA;AAAA,iBA0Cf,uBAAW;AACd,iBAAKZ,aAAL,CAAmBa,WAAnB;AACH;AA5CqB;AAAA;AAAA,iBA8Cf,iBAAK;AAAA;;AACR,iBAAKpB,SAAL,GAAiB,IAAjB;AACA,mBAAO,KAAKX,IAAL,CAAU2B,GAAV,kBAA8B,KAAKC,IAAL,CAAUC,EAAxC,GAA8CR,IAA9C,CACH,+DAAQ,UAAAO,IAAI,EAAI;AACZI,oBAAM,CAACC,MAAP,CAAc,MAAI,CAACL,IAAnB,EAAyBA,IAAzB;;AACA,kBAAIM,GAAG,GAAoB,MAAI,CAAClC,IAAL,CAAU2B,GAAV,kBAA+B,MAAI,CAACC,IAAL,CAAUC,EAAzC,mBAA2DR,IAA3D,CACvB,2DAAI,UAAAZ,WAAW,EAAI;AACf,sBAAI,CAACA,WAAL,GAAmBA,WAAnB;AACH,eAFD,CADuB,CAA3B;;AAKA,kBAAI,CAAC,MAAI,CAACmB,IAAL,CAAUO,IAAX,IAAmB,MAAI,CAAC3B,UAA5B,EAAwC;AACpC0B,mBAAG,GAAG,mDACFA,GADE,EAEF,MAAI,CAAClC,IAAL,CAAUoC,IAAV,kBAAyB,MAAI,CAACR,IAAL,CAAUC,EAAnC,oBAAsD,EAAtD,EAA0DR,IAA1D,CACI,2DAAI,YAAM;AACN,wBAAI,CAACnB,iBAAL,CAAuBmC,MAAvB;AACH,iBAFD,CADJ,CAFE,CAAN;AAQH;;AACD,qBAAOH,GAAP;AACH,aAlBD,CADG,EAoBH,gEAAS,YAAM;AACX,oBAAI,CAACvB,SAAL,GAAiB,KAAjB;AACH,aAFD,CApBG,CAAP;AAwBH;AAxEqB;AAAA;AAAA,iBA0ET,gBAAI;;;;;;;AACb,6BAAM,KAAKP,MAAL,CAAYkC,QAAZ,CAAqB,CAAC,KAAD,CAArB,EAA8B;AAAEC,kCAAU,EAAE,KAAKpC;AAAnB,uBAA9B,CAAN;;;;;;;;;AACH;AA5EqB;AAAA;AAAA,iBA8Ef,mBAAM;AAAA;;AACT,iBAAKO,UAAL,GAAkB,IAAlB;AACA,iBAAKV,IAAL,4BAC4B,KAAK4B,IAAL,CAAUC,EADtC,GAEKR,IAFL,CAGQ,gEAAS,YAAM;AACX,oBAAI,CAACX,UAAL,GAAkB,KAAlB;AACH,aAFD,CAHR,EAOKa,SAPL,CAOe;AAAA,qBAAY;AAAA;AAAA;AAAA;AAAA;AACnB,6BAAKtB,MAAL,CAAYuC,OAAZ,CAAoB,KAAKjC,SAAL,CAAekC,OAAf,CAAuB,mBAAvB,CAApB;AADmB;AAEnB,+BAAM,KAAKC,IAAL,EAAN;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;AAAA,aAPf;AAWH;AA3FqB;AAAA;AAAA,iBA6Ff,wBAAeC,UAAf,EAA+B;AAClC,iBAAKzB,aAAL,CAAmBE,GAAnB,CACI,KAAKf,OAAL,CACKuC,eADL,kBAC+B,KAAKhB,IAAL,CAAUC,EADzC,0BAC2Dc,UAAU,CAACd,EADtE,GAEKN,SAFL,CAEe,UAAAsB,SAAS;AAAA,qBAAIC,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuB,QAAvB,EAAiC,UAAjC,CAAJ;AAAA,aAFxB,CADJ;AAKH;AAnGqB;AAAA;AAAA,iBAqGf,iBAAK;AACR,iBAAKvC,QAAL,CAAc0C,iBAAd,CAAgC,KAAKC,wBAAL,EAAhC;AACH;AAvGqB;AAAA;AAAA,iBAyGd,oCAAwB;AAC5B,sCAAmB,KAAKrB,IAAL,CAAUsB,OAA7B,wBAAkD,KAAKtB,IAAL,CAAUuB,OAAV,CAAmBC,OAAnB,CAA2B,UAA3B,EAAuC,EAAvC,CAAlD;AACH;AA3GqB;;AAAA;AAAA,S;;;;gBAnBjB;;gBAaA;;gBAFA;;gBATA;;gBAAgB;;gBAUhB;;gBAFA;;gBALA;;;;;;gBAeJ;;;AADQrD,mBAAa,6DAJzB,gEAAU;AACPsD,gBAAQ,EAAE,MADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAIyB,GAAbvD,aAAa,CAAb;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCYFwD,WAAW;AAAA;AAAA,Q;;AAAXA,iBAAW,6DALvB,+DAAS;AACNC,oBAAY,EAAE,CAAC,+DAAD,EAAiB,kEAAjB,EAAgC,gFAAhC,CADR;AAENC,eAAO,EAAE,CAAC,2DAAD,EAAe,mFAAf,CAFH;AAGNC,eAAO,EAAE,CAAC,+DAAD,EAAiB,kEAAjB,EAAgC,gFAAhC;AAHH,OAAT,CAKuB,GAAXH,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCEAI,cAAc;AAAA;;AAAA;;AAKvB,gCACI3D,IADJ,EAEI4D,QAFJ,EAGIC,cAHJ,EAII1D,KAJJ,EAKIC,MALJ,EAMIC,OANJ,EAOWE,SAPX,EAOsC;AAAA;;AAAA;;AAElC,qCAAMP,IAAN,EAAY4D,QAAZ,EAAsBC,cAAtB,EAAsC1D,KAAtC,EAA6CC,MAA7C,EAAqDC,OAArD;AAFO,iBAAAE,SAAA,GAAAA,SAAA;AAXJ,iBAAAuD,SAAA,GAAY,sCAAZ;AAW+B;AAGrC;;AAfsB;AAAA;AAAA,iBAiBhB,oBAAQ;AACX;;AACA,iBAAKC,MAAL,oBAAwB,KAAKC,IAAL,CAAWnC,EAAnC;AACH;AApBsB;;AAAA;AAAA,QAAS,kEAAT,C;;;;gBAdlB;;gBAGA;;gBAFA;;gBACA;;gBAAgB;;gBAMhB;;gBAJA;;;;;;gBAYJ;;;AAFQ8B,oBAAc,6DAJ1B,gEAAU;AACPN,gBAAQ,EAAE,OADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI0B,GAAdK,cAAc,CAAd;;;;;;;;;;;;;;;;ACdb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCmBFM,iBAAiB;AAgC1B,mCAAmBC,WAAnB,EAAuD3D,SAAvD,EAAoF;AAAA;;AAAjE,eAAA2D,WAAA,GAAAA,WAAA;AAAoC,eAAA3D,SAAA,GAAAA,SAAA;AA1BhD,eAAA4D,KAAA,GAAgB,EAAhB;AAEA,eAAAC,SAAA,GAAwB,EAAxB;AAIA,eAAAC,OAAA,GAAU,IAAV;AAKA,eAAA1D,SAAA,GAAY,KAAZ;AAEA,eAAA2D,OAAA,GAAU,wEAAV;AACA,eAAAC,aAAA,GAAgB;AACnBC,mBAAO,EAAE,CACL,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,CADK,EAEL,CAAC;AAAEC,kBAAI,EAAE;AAAR,aAAD,CAFK,EAGL,CAAC;AAAEC,oBAAM,EAAE;AAAV,aAAD,EAAmB;AAAEA,oBAAM,EAAE;AAAV,aAAnB,CAHK,EAIL,CAAC;AAAEC,oBAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB;AAAV,aAAD,CAJK,EAKL,CAAC;AAAEC,mBAAK,EAAE;AAAT,aAAD,CALK,EAML,CAAC,OAAD,CANK,EAOL,CAAC,MAAD,CAPK;AADU,WAAhB;AAY+E;;AAhC5D;AAAA;AAAA,iBAkCnB,oBAAQ;AACX,gBAAI,KAAKC,gBAAT,EAA2B;AACvB,mBAAKC,gBAAL;AACH,aAFD,MAEO;AACH,mBAAKC,KAAL;AACH;AACJ;AAxCyB;AAAA;AAAA,eA0C1B,eAAoB;;;AAChB,mBAAO,CAAP,WAAO,KAAKf,IAAZ,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEgB,IAAX,MAAe,IAAf,IAAe,aAAf,GAAe,EAAf,GAAmB,QAA1B;AACH;AA5CyB;AAAA;AAAA,iBA8CnB,4BAAgB;AACnB,iBAAKpD,IAAL,CAAUsB,OAAV,GAAoB,KAAK2B,gBAAL,CAAsB3B,OAA1C;AACA,iBAAKtB,IAAL,CAAUuB,OAAV,GAAoB,KAAK8B,gBAAL,CAAsB,KAAKC,SAA3B,EAAsC,KAAKL,gBAAL,CAAsBM,OAA5D,CAApB;AACH;AAjDyB;AAAA;AAAA,iBAmDnB,mBAAO;AACV,mBAAO,CAAC,CAAC,KAAKC,IAAL,CAAUC,KAAnB;AACH;AArDyB;AAAA;AAAA,iBAuDnB,uBAAW;AACd,mBAAO,CAAC,CAAC,KAAKD,IAAL,CAAUE,SAAnB;AACH;AAzDyB;AAAA;AAAA,iBA2DlB,iBAAK;AACT,iBAAK1D,IAAL,CAAUsB,OAAV,0BAAoC,yEAAYtC,WAAhD;AACA,iBAAKgB,IAAL,CAAUuB,OAAV,GAAoB,KAAK8B,gBAAL,CAAsB,KAAKC,SAA3B,EAAsC,YAAtC,CAApB;AACH;AA9DyB;AAAA;AAAA,iBAgElB,0BAAiBF,IAAjB,EAA+B7B,OAA/B,EAA8C;AAClD,mCACI,KAAKkB,OAAL,GAAeW,IAAf,GAAsB,YAD1B,8BAEU7B,OAFV,wFAGI,yEAAYvC,WAHhB;AAKH;AAtEyB;;AAAA;AAAA,S;;;;gBAhBrB;;gBACA;;;;;;gBAgBJ;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAGA,uD;AAAS,iBAAC,MAAD;;;AAdDqD,uBAAiB,6DAJ7B,gEAAU;AACPZ,gBAAQ,EAAE,WADH;AAEPC,gBAAQ,EAAR;AAFO,OAAV,CAI6B,GAAjBW,iBAAiB,CAAjB","file":"default~admin-admin-module~mailbox-mailbox-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faFile } from '@fortawesome/pro-regular-svg-icons'\nimport { faHistory, faReply, faShare, faTrash } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { merge, Observable, Subject, Subscription } from 'rxjs'\nimport { finalize, flatMap, switchMap, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { File, Mail } from '../../api-interfaces'\nimport { IntercomService } from '../../services/intercom.service'\nimport { MailNotificationsService } from '../../services/mail-notifications.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\n\n@Component({\n    selector: 'mail',\n    templateUrl: 'mail.component.html',\n})\nexport class MailComponent implements OnInit, OnDestroy {\n    @Input()\n    public markAsRead = false\n    public mail: Mail\n    public attachments: any[] = []\n    public isDeleting = false\n    public isLoading = false\n    public displayName = environment.displayName\n    public faReply = faReply\n    public faShare = faShare\n    public faHistory = faHistory\n    public faTrash = faTrash\n    public faFile = faFile\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n\n    constructor(\n        private http: HttpClient,\n        private Toastr: ToastrService,\n        private mailNotifications: MailNotificationsService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        public intercom: IntercomService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(this.fetchEvent.pipe(switchMap(() => this.fetch())).subscribe())\n        this.subscriptions.add(\n            this.route.paramMap.subscribe(params => {\n                const mailId = params.get('mailId')\n                if (mailId) {\n                    this.mail = {\n                        id: mailId,\n                    } as Mail\n                    this.fetchEvent.next()\n                }\n            })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public fetch(): Observable<void> {\n        this.isLoading = true\n        return this.http.get<Mail>(`/mails/${this.mail.id}`).pipe(\n            flatMap(mail => {\n                Object.assign(this.mail, mail)\n                let obs: Observable<any> = this.http.get<any[]>(`/mails/${this.mail.id}/attachments`).pipe(\n                    tap(attachments => {\n                        this.attachments = attachments\n                    })\n                )\n                if (!this.mail.read && this.markAsRead) {\n                    obs = merge(\n                        obs,\n                        this.http.post(`/mails/${this.mail.id}/mark-as-read`, {}).pipe(\n                            tap(() => {\n                                this.mailNotifications.notify()\n                            })\n                        )\n                    )\n                }\n                return obs\n            }),\n            finalize(() => {\n                this.isLoading = false\n            })\n        )\n    }\n\n    public async back(): Promise<void> {\n        await this.router.navigate(['../'], { relativeTo: this.route })\n    }\n\n    public delete(): void {\n        this.isDeleting = true\n        this.http\n            .delete<void>(`/mails/${this.mail.id}`)\n            .pipe(\n                finalize(() => {\n                    this.isDeleting = false\n                })\n            )\n            .subscribe(async () => {\n                this.Toastr.success(this.translate.instant('mail.mail-deleted'))\n                await this.back()\n            })\n    }\n\n    public openAttachment(attachment: File): void {\n        this.subscriptions.add(\n            this.session\n                .createSignedUrl(`/mails/${this.mail.id}/attachments/${attachment.id}`)\n                .subscribe(signedUrl => window.open(signedUrl, '_blank', 'noopener'))\n        )\n    }\n\n    public reply(): void {\n        this.intercom.startConversation(this.buildPrePopulatedMessage())\n    }\n\n    private buildPrePopulatedMessage(): string {\n        return `Subject: ${this.mail.subject}, Message: ${this.mail.content!.replace(/<[^>]+>/g, '')} \\n \\n`\n    }\n}\n","export default \"<form class=\\\"form-validation e2e-mail-form\\\" [ngClass]=\\\"{ 'ng-submitted': form.submitted }\\\" #form=\\\"ngForm\\\" autocomplete=\\\"false\\\" novalidate>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"form-group col\\\">\\n            <label class=\\\"form-control-label\\\">{{ 'common.subject' | translate }}</label>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                name=\\\"subject\\\"\\n                [placeholder]=\\\"'common.subject' | translate\\\"\\n                [(ngModel)]=\\\"mail.subject\\\"\\n                #messageSubject=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"messageSubject.invalid && (form.submitted || messageSubject.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"messageSubject?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"templates.length > 0\\\" class=\\\"form-group col-sm-12\\\">\\n            <label class=\\\"form-control-label\\\" for=\\\"templates\\\">{{ 'common.template' | translate }}</label>\\n            <ng-select\\n                [items]=\\\"templates\\\"\\n                bindLabel=\\\"name\\\"\\n                groupBy=\\\"group\\\"\\n                [(ngModel)]=\\\"selectedTemplate\\\"\\n                (change)=\\\"onSelectTemplate()\\\"\\n                [placeholder]=\\\"'common.select-template' | translate\\\"\\n                name=\\\"templates\\\"\\n            >\\n                <ng-template ng-optgroup-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                    {{ item.group | uppercase }}\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                    {{ item.name }}\\n                </ng-template>\\n            </ng-select>\\n        </div>\\n    </div>\\n    <quill-editor\\n        name=\\\"message\\\"\\n        [(ngModel)]=\\\"mail.content\\\"\\n        [modules]=\\\"editorModules\\\"\\n        #messageBody=\\\"ngModel\\\"\\n        [sanitize]=\\\"true\\\"\\n        required\\n    ></quill-editor>\\n    <div *ngIf=\\\"messageBody.invalid && (form.submitted || messageBody.dirty)\\\" class=\\\"error-messages\\\">\\n        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"messageBody?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n    </div>\\n    <div class=\\\"mt-3\\\">\\n        <dropzone [files]=\\\"files\\\"></dropzone>\\n    </div>\\n</form>\\n\";","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { QuillEditorModule } from '../quill-editor/quill-editor.module'\nimport { MailFormComponent } from './mail-form/mail-form.component'\nimport { MailComponent } from './mail/mail.component'\nimport { MailsComponent } from './mails.component'\n\n@NgModule({\n    declarations: [MailsComponent, MailComponent, MailFormComponent],\n    imports: [CommonModule, QuillEditorModule],\n    exports: [MailsComponent, MailComponent, MailFormComponent],\n})\nexport class MailsModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as striptags from 'striptags'\nimport { IUser, Mail } from '../api-interfaces'\nimport { ListV2Component } from '../list-v2.component'\nimport { SessionService } from '../services/session.service'\n\n@Component({\n    selector: 'mails',\n    templateUrl: 'mails.component.html',\n})\nexport class MailsComponent extends ListV2Component<Mail> implements OnInit {\n    public striptags = striptags\n    @Input()\n    public user: IUser | null\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session)\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.apiUrl = `/users/${this.user!.id}/mails`\n    }\n}\n","export default \"<section class=\\\"card b-a-0 b-b-1 mb-0 rounded-0 e2e-mail\\\">\\n    <div class=\\\"card-body\\\">\\n        <div class=\\\"d-flex justify-content-between mb-3\\\">\\n            <div>\\n                <h6 class=\\\"mail-subject mb-0\\\">\\n                    <b>{{ mail.subject }}</b>\\n                </h6>\\n                <small class=\\\"block\\\">\\n                    <span\\n                        ><strong>{{ displayName + ' Team' }}</strong> {{ 'common.wrote-to-you' | translate }}</span\\n                    >\\n                    on {{ mail.createdAt | date: 'medium' }}:\\n                </small>\\n            </div>\\n            <div>\\n                <div class=\\\"row no-gutters\\\">\\n                    <div class=\\\"col-18 col-lg-auto ml-auto mr-2\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn-default btn-icon btn-block\\\" [routerLink]=\\\"['../']\\\">\\n                            <fa-icon class=\\\"btn-icon-symbol\\\" [icon]=\\\"faReply\\\"></fa-icon>\\n                            <span>{{ 'common.back' | translate }}</span>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"col-18 col-lg-auto ml-auto mr-2 mt-sm-0 mt-2\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn-default btn-icon btn-block\\\" (click)=\\\"reply()\\\">\\n                            <fa-icon class=\\\"btn-icon-symbol\\\" [icon]=\\\"faShare\\\"></fa-icon>\\n                            <span>{{ 'common.reply' | translate }}</span>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"col-18 col-lg-auto ml-auto mr-2 mt-sm-0 mt-2\\\">\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"btn btn-default btn-icon e2e-mail-delete-btn btn-block\\\"\\n                            (click)=\\\"delete()\\\"\\n                            [ngClass]=\\\"{ loading: isDeleting }\\\"\\n                            [disabled]=\\\"isDeleting\\\"\\n                        >\\n                            <fa-icon class=\\\"btn-icon-symbol\\\" [icon]=\\\"faTrash\\\"></fa-icon>\\n                            <span>{{ 'common.delete' | translate }}</span>\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <hr />\\n        <div *ngIf=\\\"mail\\\" [innerHtml]=\\\"mail.content\\\" class=\\\"mail-content mt-2\\\"></div>\\n        <div *ngIf=\\\"attachments.length > 0\\\">\\n            <p>\\n                <b>{{ 'common.attachments' | translate }}:</b>\\n            </p>\\n            <p *ngFor=\\\"let attachment of attachments\\\">\\n                <fa-icon class=\\\"mail-attachment-icon mr-2\\\" [icon]=\\\"faFile\\\"></fa-icon>\\n                <a href (click)=\\\"$event.preventDefault(); openAttachment(attachment)\\\">{{ attachment.name }}</a>\\n                <small class=\\\"mail-file-type text-muted\\\"> {{ attachment.type }}</small>\\n            </p>\\n        </div>\\n    </div>\\n</section>\\n\";","export default \"<div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n        <div class=\\\"row no-gutters align-items-center mb-3\\\">\\n            <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                <div class=\\\"input-group\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        name=\\\"searchText\\\"\\n                        (ngModelChange)=\\\"searchEvent.next()\\\"\\n                        [placeholder]=\\\"'common.search' | translate\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"search\\\"\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-17 d-flex justify-content-between align-items-center\\\">\\n                <span class=\\\"ml-lg-3\\\"\\n                    >{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span\\n                >\\n                <div class=\\\"d-flex align-items-center\\\">\\n                    <ng-select\\n                        class=\\\"mr-2\\\"\\n                        [(ngModel)]=\\\"limit\\\"\\n                        dropdownPosition=\\\"auto\\\"\\n                        (change)=\\\"select(1)\\\"\\n                        [items]=\\\"limitOpts\\\"\\n                        [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                        [clearable]=\\\"false\\\"\\n                        [searchable]=\\\"false\\\"\\n                        required\\n                    >\\n                        <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                        <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                    </ng-select>\\n                    <ngb-pagination\\n                        [(page)]=\\\"page\\\"\\n                        [collectionSize]=\\\"count\\\"\\n                        (pageChange)=\\\"select()\\\"\\n                        [pageSize]=\\\"limit\\\"\\n                        [maxSize]=\\\"5\\\"\\n                        [ellipses]=\\\"false\\\"\\n                        [rotate]=\\\"true\\\"\\n                        [boundaryLinks]=\\\"true\\\"\\n                    >\\n                    </ngb-pagination>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-bordered table-data\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">{{ 'common.from' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'common.subject' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'mails.received-at' | translate }}</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <tr *ngFor=\\\"let mail of items\\\" [routerLink]=\\\"['./', mail.id]\\\" class=\\\"clickable\\\">\\n                            <th scope=\\\"row\\\">\\n                                <user-display [user]=\\\"null\\\"></user-display>\\n                            </th>\\n                            <td>\\n                                <div class=\\\"text-truncate\\\" [ngClass]=\\\"{ 'font-weight-bold': !mail.read }\\\">\\n                                    {{ mail.subject }}\\n                                    <span *ngIf=\\\"!mail.read\\\" class=\\\"text-primary\\\">({{ 'common.new' | translate | lowercase }})</span>\\n                                </div>\\n                                <div class=\\\"small text-muted\\\">{{ striptags(mail.content) | truncate: true:60 }}</div>\\n                            </td>\\n                            <td>{{ mail.createdAt | date: 'medium' }}</td>\\n                        </tr>\\n                        <tr *ngIf=\\\"items.length === 0\\\">\\n                            <td colspan=\\\"6\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                        </tr>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\";","import { Component, Input, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faTimes } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Mail } from '../../api-interfaces'\n\nexport interface Template {\n    subject: string\n    group: string\n    name: string\n    message: string\n}\n\n@Component({\n    selector: 'mail-form',\n    templateUrl: 'mail-form.component.html',\n})\nexport class MailFormComponent implements OnInit {\n    @Input()\n    public user: IUser\n    @Input()\n    public mail: Mail\n    @Input()\n    public files: File[] = []\n    @Input()\n    public templates: Template[] = []\n    @Input()\n    public selectedTemplate: Template\n    @Input()\n    public useName = true\n\n    @ViewChild('form')\n    public form: NgForm\n\n    public isLoading = false\n\n    public faTimes = faTimes\n    public editorModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ align: [] as string[] }],\n            ['clean'],\n            ['link'],\n        ],\n    }\n\n    constructor(public activeModal: NgbActiveModal, public translate: TranslateService) {}\n\n    public ngOnInit(): void {\n        if (this.selectedTemplate) {\n            this.onSelectTemplate()\n        } else {\n            this.reset()\n        }\n    }\n\n    public get recipient(): string {\n        return this.user?.name ?? '<NAME>'\n    }\n\n    public onSelectTemplate(): void {\n        this.mail.subject = this.selectedTemplate.subject\n        this.mail.content = this.buildBaseMessage(this.recipient, this.selectedTemplate.message)\n    }\n\n    public isValid(): boolean {\n        return !!this.form.valid\n    }\n\n    public isSubmitted(): boolean {\n        return !!this.form.submitted\n    }\n\n    private reset(): void {\n        this.mail.subject = `Message from ${environment.displayName}`\n        this.mail.content = this.buildBaseMessage(this.recipient, '<p>...</p>')\n    }\n\n    private buildBaseMessage(name: string, content: string): string {\n        return `<p>Hi ${\n            this.useName ? name : '[username]'\n        } 👋</p>${content}<p>If you have any concerns, feel free to contact us.</p><p>Regards,</p><p>${\n            environment.displayName\n        } team</p>`\n    }\n}\n"]}