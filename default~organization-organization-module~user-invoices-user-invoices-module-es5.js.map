{"version":3,"sources":["webpack:///src/app/services/user-invoices/user-invoice-form/user-invoice-form.component.ts","webpack:///src/app/services/user-invoices/user-invoices.component.html","webpack:///src/app/services/user-invoices/user-invoice-form/user-invoice-form.component.html","webpack:///src/app/services/user-invoices/user-invoices-routing.module.ts","webpack:///src/app/services/user-invoices/user-invoices.module.ts","webpack:///src/app/services/user-invoices/user-invoices.component.ts"],"names":["UserInvoiceFormComponent","ngbModal","session","http","toastr","invoices","route","activeModal","translate","faQuestionCircle","displayName","onSave","currencies","items","lockRecipient","editorModules","toolbar","list","indent","header","align","faChevronLeft","faTrash","faSave","isLoading","isTermsCollapsed","percentageCurrencyMaskOptions","convertPercentage","showContacts","subscriptions","invoice","valueAddedTax","add","get","params","limit","subscribe","response","data","currency","code","user","preferredCurrency","length","snapshot","queryParamMap","has","invoicee","unsubscribe","itemsForm","toArray","form","submit","invalid","some","isValid","body","subject","dueDate","slice","invoicer","id","accountNumber","trim","replace","map","item","Object","assign","price","toString","terms","create","pipe","success","instant","next","modal","componentInstance","onSelect","contact","counterUser","close","push","country","alpha2","name","selector","template","routes","path","component","UserInvoicesRoutingModule","imports","forChild","exports","UserInvoicesModule","declarations","UserInvoicesComponent","faEllipsisV","invoicesBeingCancelled","Set","apiQuery","defaultLimit","limitOpts","defaultQuery","status","paramMap","openPayModal","closeHook","router","navigate","result","then","undefined","userStream","_","apiUrl","patch","op","value","updateEvent","accessErrors","open","backdrop","windowClass","keyboard","invoiceId","onSettle"],"mappings":"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","file":"default~organization-organization-module~user-invoices-user-invoices-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faChevronLeft, faQuestionCircle, faSave, faTrash } from '@fortawesome/pro-light-svg-icons'\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { find } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { finalize } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IContact, Paginated } from '../../../common/api-interfaces'\nimport { convertPercentage } from '../../../common/common.mixin'\nimport { ContactBookComponent, openContactBook } from '../../../common/contact-book/contact-book.component'\nimport { countriesSortedByName } from '../../../common/countries'\nimport { percentageCurrencyMaskOptions } from '../../../common/currency-mask.config'\nimport { InvoiceItemFormComponent } from '../../../common/invoices/invoice-item-form/invoice-item-form.component'\nimport { Currency } from '../../../common/models/accounting/currency.model'\nimport { InvoiceItem } from '../../../common/models/accounting/invoice-item.model'\nimport { Invoice } from '../../../common/models/accounting/invoice.model'\nimport { User } from '../../../common/models/core/user.model'\nimport { InvoiceService } from '../../../common/services/accounting/invoice.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'user-invoice-form',\n    templateUrl: 'user-invoice-form.component.html',\n})\nexport class UserInvoiceFormComponent implements OnInit, OnDestroy {\n    public faQuestionCircle = faQuestionCircle\n    public displayName = environment.displayName\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    public invoice: Invoice\n    public currencies: Currency[] = []\n    public items: InvoiceItem[] = [new InvoiceItem()]\n    @Input()\n    public invoicee: string\n    @Input()\n    public lockRecipient = false\n    public dueDate: string\n    public editorModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ align: [] as string[] }],\n            ['clean'],\n            ['link'],\n        ],\n    }\n    @ViewChild('invoiceForm')\n    public form: NgForm\n    @ViewChildren('itemsForm')\n    public itemsForm: QueryList<InvoiceItemFormComponent>\n\n    public faChevronLeft = faChevronLeft\n    public faTrash = faTrash\n    public faSave = faSave\n    public isLoading = false\n    public isTermsCollapsed = true\n\n    public percentageCurrencyMaskOptions = percentageCurrencyMaskOptions\n    public convertPercentage = convertPercentage\n\n    public valueAddedTax: string\n\n    @Input()\n    public hideModal: boolean\n\n    @Input()\n    public showContacts = true\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private ngbModal: NgbModal,\n        private session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private invoices: InvoiceService,\n        private route: ActivatedRoute,\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.invoice = new Invoice()\n        this.invoice.items = this.items\n        this.invoice.valueAddedTax = '0.00'\n        this.valueAddedTax = this.invoice.valueAddedTax\n        this.subscriptions.add(\n            this.http\n                .get<Paginated<Currency>>('/currencies', {\n                    params: {\n                        limit: 100 + '',\n                        'filter.type': 'or:fiat,crypto,metal',\n                    },\n                })\n                .subscribe(response => {\n                    this.currencies = response.data\n                    const currency = find(this.currencies, { code: this.session.user.preferredCurrency.code })\n                    if (currency) {\n                        this.invoice.currency = currency\n                    } else if (this.currencies.length > 0) {\n                        this.invoice.currency = this.currencies[0]\n                    }\n                })\n        )\n        if (this.route.snapshot.queryParamMap.has('recipient')) {\n            this.invoicee = this.route.snapshot.queryParamMap.get('recipient')!\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        for (const form of this.itemsForm.toArray()) {\n            form.submit()\n        }\n        if (this.form.invalid || this.itemsForm.some(form => !form.isValid())) {\n            return\n        }\n        const body = {\n            subject: this.invoice.subject,\n            currency: {\n                code: this.invoice.currency.code,\n            } as Currency,\n            valueAddedTax: this.invoice.valueAddedTax,\n            dueDate: `${this.dueDate.slice(4)}-${this.dueDate.slice(2, 4)}-${this.dueDate.slice(0, 2)}`,\n            invoicer: this.session.user\n                ? ({\n                      id: this.session.user.id,\n                  } as User)\n                : null,\n            invoicee: {\n                accountNumber: this.invoicee.trim().replace(/\\s/g, ''),\n            } as User,\n            items: this.items.map(item => Object.assign(item, { price: item.price.toString() })),\n            terms: !this.isTermsCollapsed ? this.invoice.terms : null,\n        }\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .create(body)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(invoice => {\n                    this.invoice = invoice\n                    this.toastr.success(this.translate.instant('common.invoice-created'))\n                    this.onSave.next()\n                })\n        )\n    }\n\n    public openContactBook(): void {\n        const modal = openContactBook(this.ngbModal, new User(this.session.user))\n        ;(modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n            this.invoicee = contact.counterUser.accountNumber\n            modal.close()\n        })\n    }\n\n    public addItem(): void {\n        this.items.push(new InvoiceItem())\n    }\n\n    public mapToCountry(code: string): string {\n        if (!code) {\n            return ''\n        }\n        const country = find(countriesSortedByName, { alpha2: code })\n        return country ? country.name : ''\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pb-3\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.invoices' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.invoices' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"row justify-content-between align-items-center\\\">\\n            <div class=\\\"col\\\">\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn mr-2\\\"\\n                    (click)=\\\"queryParams = getDefaultQuery(); searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery(getDefaultQuery()) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.all' | translate }}\\n                </button>\\n                <div class=\\\"btn-group mr-2\\\">\\n                    <button\\n                        type=\\\"button\\\"\\n                        class=\\\"btn\\\"\\n                        (click)=\\\"queryParams['status']['or'] = ['pending']; searchEvent.next()\\\"\\n                        [ngClass]=\\\"isActiveQuery({ status: { or: ['pending'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                    >\\n                        {{ 'common.pending' | translate }}\\n                    </button>\\n                    <button\\n                        type=\\\"button\\\"\\n                        class=\\\"btn\\\"\\n                        (click)=\\\"queryParams['status']['or'] = ['completed']; searchEvent.next()\\\"\\n                        [ngClass]=\\\"isActiveQuery({ status: { or: ['completed'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                    >\\n                        {{ 'common.completed' | translate }}\\n                    </button>\\n                </div>\\n            </div>\\n            <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n                <button class=\\\"btn btn-primary-air e2e-create-invoice-btn\\\" (click)=\\\"$event.preventDefault(); openCreateInvoice(user)\\\">\\n                    <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-invoice' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container e2e-user-invoices\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header b-b-0\\\">{{ 'common.invoices' | translate }}</div>\\n            <div class=\\\"table-responsive\\\">\\n                <table class=\\\"table table-hover table-card\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.recipient' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                                {{ 'common.amount' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['amount']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.due-date' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['dueDate']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['dueDate'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['dueDate']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'user-invoices.sent-at' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\"></th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                                <tr>\\n                                    <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                        <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                            <img src=\\\"/img/icons/file.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                            <h4 class=\\\"mb-1\\\">{{ 'common.send-an-invoice' | translate }}</h4>\\n                                            <p class=\\\"mb-3 text-gray\\\">{{ 'common.need-to-invoice' | translate }}</p>\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" (click)=\\\"openCreateInvoice(user)\\\">\\n                                                {{ 'common.create-invoice' | translate }}\\n                                            </button>\\n                                        </div>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-template #rows>\\n                                <tr *ngFor=\\\"let invoice of items\\\" (click)=\\\"openInvoice(invoice)\\\" class=\\\"clickable bg-white\\\">\\n                                    <th scope=\\\"row\\\">\\n                                        <div class=\\\"d-flex align-items-center\\\">\\n                                            <user-avatar\\n                                                [user]=\\\"isInvoicer(invoice, user) ? invoice.invoicee : invoice.invoicer\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                            <div>\\n                                                <div>{{ invoice.subject }}</div>\\n                                                <div>\\n                                                    {{ (isInvoicer(invoice, user) ? 'common.to' : 'common.from') | translate }}\\n                                                    <span\\n                                                        class=\\\"text-primary\\\"\\n                                                        [innerHTML]=\\\"\\n                                                            isInvoicer(invoice, user)\\n                                                                ? buildAccountHolder(invoice.invoicee)\\n                                                                : buildAccountHolder(invoice.invoicer)\\n                                                        \\\"\\n                                                    ></span>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                    </th>\\n                                    <td class=\\\"text-right\\\" [ngClass]=\\\"isInvoicer(invoice, user) ? 'text-green' : 'text-danger'\\\">\\n                                        {{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}\\n                                    </td>\\n                                    <td>\\n                                        <span\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': invoice.status === 'completed',\\n                                                'label-info': invoice.status === 'pending',\\n                                                'label-danger': invoice.status === 'cancelled'\\n                                            }\\\"\\n                                            >{{ invoice.status }}</span\\n                                        >\\n                                    </td>\\n                                    <td>{{ invoice.dueDate | date: 'mediumDate' }}</td>\\n                                    <td>{{ invoice.createdAt | date: 'medium' }}</td>\\n                                    <td class=\\\"action\\\">\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-success btn-sm btn-block px-2 e2e-pay-invoice-btn\\\"\\n                                            (click)=\\\"$event.stopPropagation(); openPayModal(invoice.id)\\\"\\n                                            *ngIf=\\\"!isInvoicer(invoice, user) && invoice.status === 'pending'\\\"\\n                                        >\\n                                            {{ 'common.pay-now' | translate }}\\n                                        </button>\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-danger btn-sm btn-block px-2 e2e-cancel-invoice-btn\\\"\\n                                            (click)=\\\"$event.stopPropagation(); cancel(invoice)\\\"\\n                                            *ngIf=\\\"isInvoicer(invoice, user) && invoice.status === 'pending'\\\"\\n                                            [ngClass]=\\\"{ loading: invoicesBeingCancelled.has(invoice.id) }\\\"\\n                                            [disabled]=\\\"invoicesBeingCancelled.has(invoice.id)\\\"\\n                                        >\\n                                            {{ 'common.cancel' | translate }}\\n                                        </button>\\n                                    </td>\\n                                </tr>\\n                                <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                    <td colspan=\\\"12\\\">\\n                                        <div>&nbsp;</div>\\n                                        <span>&nbsp;</span>\\n                                    </td>\\n                                </tr>\\n                            </ng-template>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n        <footer class=\\\"table-footer mb-3\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-6 col-md-8\\\">\\n                    <ng-select\\n                        [(ngModel)]=\\\"limit\\\"\\n                        dropdownPosition=\\\"auto\\\"\\n                        (change)=\\\"select(1)\\\"\\n                        [items]=\\\"limitOpts\\\"\\n                        [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                        [clearable]=\\\"false\\\"\\n                        [searchable]=\\\"false\\\"\\n                        required\\n                    >\\n                        <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                            >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                        >\\n                        <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                    </ng-select>\\n                </div>\\n                <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                    <ngb-pagination\\n                        [(page)]=\\\"page\\\"\\n                        [collectionSize]=\\\"count\\\"\\n                        (pageChange)=\\\"select()\\\"\\n                        [pageSize]=\\\"limit\\\"\\n                        [maxSize]=\\\"4\\\"\\n                        [rotate]=\\\"false\\\"\\n                        [boundaryLinks]=\\\"true\\\"\\n                    >\\n                    </ngb-pagination>\\n                </div>\\n            </div>\\n        </footer>\\n    </div>\\n</ng-container>\\n\";","export default \"<form\\n    #invoiceForm=\\\"ngForm\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': invoiceForm.submitted }\\\"\\n    class=\\\"form-validation e2e-user-invoice-form\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\" *ngIf=\\\"!hideModal\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.send-invoice' | translate | sentenceCase }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss(); $event.preventDefault()\\\">&times;</button>\\n    </div>\\n    <div [ngClass]=\\\"{ 'modal-body': !hideModal, 'pb-0': !hideModal }\\\">\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"invoicee\\\"\\n                    >{{ 'common.recipient' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n                <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" *ngIf=\\\"showContacts\\\">{{ 'common.show-contacts' | translate }}</a>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"invoicee\\\"\\n                name=\\\"invoicee\\\"\\n                [(ngModel)]=\\\"invoicee\\\"\\n                [disabled]=\\\"lockRecipient\\\"\\n                #invoiceeInput=\\\"ngModel\\\"\\n                emptyToNull\\n                required\\n                recipientValidator\\n            />\\n            <div *ngIf=\\\"invoiceeInput.invalid && (invoiceForm.submitted || invoiceeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"invoiceeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"invoiceeInput?.errors?.invalidRecipient\\\">{{ 'common.invalid-recipient' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.subject' | translate }}</label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"invoice.subject\\\" id=\\\"subject\\\" name=\\\"subject\\\" #subject=\\\"ngModel\\\" required />\\n            <div *ngIf=\\\"subject.invalid && (invoiceForm.submitted || subject.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"subject?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"valueAddedTax\\\">VAT / GST</label>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"valueAddedTax\\\"\\n                name=\\\"valueAddedTax\\\"\\n                [(ngModel)]=\\\"valueAddedTax\\\"\\n                (ngModelChange)=\\\"valueAddedTax && (invoice.valueAddedTax = convertPercentage(valueAddedTax))\\\"\\n                currencyMask\\n                [options]=\\\"percentageCurrencyMaskOptions\\\"\\n                #valueAddedTaxField=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"valueAddedTaxField.invalid && (invoiceForm.submitted || valueAddedTaxField.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueAddedTaxField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n                <ng-select\\n                    id=\\\"currency\\\"\\n                    name=\\\"currency\\\"\\n                    [(ngModel)]=\\\"invoice.currency\\\"\\n                    bindLabel=\\\"code\\\"\\n                    [items]=\\\"currencies\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #currency=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"currency.invalid && (invoiceForm.submitted || currency.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currency?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate | sentenceCase }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"dueDate\\\"\\n                    name=\\\"dueDate\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    [(ngModel)]=\\\"dueDate\\\"\\n                    #dueDateInput=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"dueDateInput.invalid && (invoiceForm.submitted || dueDateInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"dueDateInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <label class=\\\"form-control-label\\\">{{ 'common.items' | translate }}</label>\\n        <invoice-item-form *ngFor=\\\"let item of items; index as i\\\" [item]=\\\"item\\\" (onDelete)=\\\"items.splice(i, 1)\\\" #itemsForm></invoice-item-form>\\n        <div class=\\\"form-group d-flex justify-content-end\\\">\\n            <a class=\\\"e2e-add-invoice-item-btn\\\" href (click)=\\\"addItem(); $event.preventDefault()\\\">+ {{ 'common.add-item' | translate }}</a>\\n        </div>\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>{{ 'common.subtotal' | translate }}</span>\\n                        <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                        <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between\\\">\\n                        <span class=\\\"font-weight-bold\\\">Total</span>\\n                        <span class=\\\"font-weight-bold\\\"\\n                            >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                        >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <a href class=\\\"d-block mb-2 e2e-terms-toggle-btn\\\" (click)=\\\"isTermsCollapsed = !isTermsCollapsed; $event.preventDefault()\\\"\\n            >{{ isTermsCollapsed ? '+ ' + ('common.add' | translate) : '- ' + ('common.remove' | translate) }} {{ 'common.terms' | translate }}</a\\n        >\\n        <div class=\\\"mb-2\\\" [ngbCollapse]=\\\"isTermsCollapsed\\\">\\n            <label class=\\\"form-control-label font-md\\\">{{ 'common.terms' | translate }} ({{ 'common.optional' | translate }})</label>\\n            <quill-editor\\n                name=\\\"terms\\\"\\n                [(ngModel)]=\\\"invoice.terms\\\"\\n                [modules]=\\\"editorModules\\\"\\n                [placeholder]=\\\"'common.enter-your-terms' | translate\\\"\\n                [sanitize]=\\\"true\\\"\\n            ></quill-editor>\\n        </div>\\n    </div>\\n    <div [ngClass]=\\\"{ 'modal-footer': !hideModal, 'text-right': hideModal }\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            {{ 'common.send' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\\n<ng-template #recipientTitle> {{ 'common.how-does-it-work' | translate }} </ng-template>\\n<ng-template #recipientContent>\\n    <p>{{ 'common.you-can-send-invoices-to-other' | translate: { value: displayName } }}</p>\\n    <p [innerHtml]=\\\"'common.ask-your-invoicee' | translate\\\"></p>\\n</ng-template>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { UserInvoicesComponent } from './user-invoices.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserInvoicesComponent,\n    },\n    {\n        path: ':id',\n        component: UserInvoicesComponent,\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserInvoicesRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../../common/common.module'\nimport { InvoicesModule } from '../../common/invoices/invoices.module'\nimport { QuillEditorModule } from '../../common/quill-editor/quill-editor.module'\nimport { UserInvoiceFormComponent } from './user-invoice-form/user-invoice-form.component'\nimport { UserInvoicesRoutingModule } from './user-invoices-routing.module'\nimport { UserInvoicesComponent } from './user-invoices.component'\n\n@NgModule({\n    declarations: [UserInvoicesComponent, UserInvoiceFormComponent],\n    imports: [CommonModule, UserInvoicesRoutingModule, InvoicesModule, QuillEditorModule],\n    exports: [UserInvoiceFormComponent],\n})\nexport class UserInvoicesModule {}\n","import { HttpResponse } from '@angular/common/http'\nimport { Component, OnInit } from '@angular/core'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { finalize, flatMap, tap, withLatestFrom } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser } from '../../common/api-interfaces'\nimport { formatAccountNumber } from '../../common/common.mixin'\nimport { InvoiceModalComponent } from '../../common/invoices/invoice-modal/invoice-modal.component'\nimport { InvoicesComponent } from '../../common/invoices/invoices.component'\nimport { Invoice } from '../../common/models/accounting/invoice.model'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { User } from '../../common/services/session.service'\nimport { UserInvoiceFormComponent } from './user-invoice-form/user-invoice-form.component'\n\n@Component({\n    selector: 'user-invoices',\n    templateUrl: 'user-invoices.component.html',\n})\nexport class UserInvoicesComponent extends InvoicesComponent implements OnInit {\n    public faEllipsisV = faEllipsisV\n    public invoicesBeingCancelled = new Set<string>()\n\n    protected apiQuery = ['status']\n    protected defaultLimit = this.limitOpts[0]\n    protected defaultQuery = { status: {} }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.route.paramMap.subscribe(params => {\n            if (params.has('id')) {\n                const id = params.get('id')!\n                const modal = this.openPayModal(id)\n                const closeHook = () => this.router.navigate(['/services/invoices'])\n                modal.result.then(closeHook, closeHook)\n            }\n        })\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return of(undefined).pipe(\n            withLatestFrom(this.session.userStream),\n            tap(([_, user]) => {\n                this.apiUrl = `/users/${user.id}/invoices`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public cancel(invoice: Invoice): void {\n        this.invoicesBeingCancelled.add(invoice.id)\n        this.subscriptions.add(\n            this.invoices\n                .patch(invoice.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .pipe(\n                    finalize(() => {\n                        this.invoicesBeingCancelled.delete(invoice.id)\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public isInvoicer(invoice: Invoice, user: User): boolean {\n        return user.id === invoice.invoicer?.id\n    }\n\n    public openCreateInvoice(user: User): void {\n        if (user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, user.accessErrors[0])\n            return\n        }\n        const modal = this.ngbModal.open(UserInvoiceFormComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n        })\n        const form = modal.componentInstance as UserInvoiceFormComponent\n        form.onSave.subscribe(() => {\n            modal.close()\n            this.updateEvent.next()\n        })\n    }\n\n    public openPayModal(id: string): NgbModalRef {\n        const modal = this.ngbModal.open(InvoiceModalComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n            keyboard: false,\n        })\n        const component = modal.componentInstance as InvoiceModalComponent\n        component.invoiceId = id\n        component.onSettle.subscribe(() => {\n            modal.close()\n            this.updateEvent.next()\n        })\n        return modal\n    }\n\n    public buildAccountHolder(user: IUser | null): string {\n        return !user\n            ? environment.displayName\n            : `${user.name} <span class=\"text-muted\">/ ${formatAccountNumber(user.accountNumber)}</span>`\n    }\n}\n"]}