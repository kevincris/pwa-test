{"version":3,"sources":["webpack:///src/app/user-cards/user-cards.service.ts","webpack:///src/app/common/card-view/card-view.module.ts","webpack:///src/app/user-cards/card-activation/card-activation.component.html","webpack:///src/app/user-cards/card-order/card-order.component.html","webpack:///src/app/user-cards/user-cards.component.html","webpack:///src/app/user-cards/user-cards.module.ts","webpack:///src/app/user-cards/user-card-orders/user-card-orders.component.ts","webpack:///src/app/user-cards/card-activation/card-activation.component.ts","webpack:///src/app/user-cards/card-order/card-order.component.ts","webpack:///src/app/user-cards/user-card-orders/user-card-orders.component.html","webpack:///src/app/user-cards/user-cards.component.ts","webpack:///src/app/user-cards/card-order/card-order-fees/card-order-fees.component.ts","webpack:///src/app/user-cards/card-order/card-order-fees/card-order-fees.component.html","webpack:///src/app/user-cards/user-cards-routing.module.ts"],"names":["UserCardsService","http","session","cardsCount$","userStream","pipe","user","head","id","observe","response","headers","has","get","cardOrdersCount$","CardViewModule","declarations","exports","imports","UserCardsModule","providers","UserCardOrdersComponent","ngbModal","changeDetector","route","router","userCardsService","confirmation","intercom","translate","displayName","appColor","getComputedStyle","document","body","getPropertyValue","trim","lighten","faCreditCardFront","faPaperPlane","defaultLimit","limitOpts","apiUrl","selector","template","CardActivationComponent","toastr","securityCheckService","activation","isLoading","cardActivationForm","invalid","getScopePermission","subscribe","post","success","instant","navigate","CardOrderComponent","currenciesQuery","appName","item","type","undefined","transaction","currency","code","isExpressDelivery","types","typeChanged$","cardOrderCount","subscriptions","user$","add","params","set","count","cardProgram","details","shippingAddress","address","userDetails","preferredCurrency","virtualEnabled","hasVirtualEnabled","physicalEnabled","hasPhysicalEnabled","push","assignFee","next","digitalCardArtwork","digitalCardArtWorkUrl","unsubscribe","cardOrderForm","valid","accessErrors","length","open","windowClass","backdrop","result","then","terms","selectEntity","usd","transactionCurrency","pricePhysical","priceVirtual","fixedFee","convert","isEqualTo","allowMultiplePhysical","allowMultipleVirtual","UserCardsComponent","modalController","card","create","component","componentProps","modal","present","pan","slice","CardOrderFeesComponent","routes","path","canActivate","data","permissions","children","UserCardsRoutingModule","forChild"],"mappings":"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","file":"user-cards-user-cards-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { map, switchMap, take } from 'rxjs/operators'\nimport { SessionService } from '../common/services/session.service'\n\n@Injectable()\nexport class UserCardsService {\n    public cardsCount$ = this.session.userStream.pipe(\n        take(1),\n        switchMap(user =>\n            this.http\n                .head(`/users/${user.id}/cards`, {\n                    observe: 'response',\n                })\n                .pipe(\n                    map(response =>\n                        response.headers && response.headers.has('x-total-count')\n                            ? response.headers.get('x-total-count')!\n                            : '0'\n                    )\n                )\n        )\n    )\n    public cardOrdersCount$ = this.session.userStream.pipe(\n        take(1),\n        switchMap(user =>\n            this.http\n                .head(`/users/${user.id}/card-orders`, {\n                    observe: 'response',\n                })\n                .pipe(\n                    map(response =>\n                        response.headers && response.headers.has('x-total-count')\n                            ? response.headers.get('x-total-count')!\n                            : '0'\n                    )\n                )\n        )\n    )\n\n    constructor(private http: HttpClient, private session: SessionService) {}\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common.module'\nimport { CardDetailsPage } from './card-details/card-details.page'\nimport { CardViewPage } from './card-view.page'\nimport { ModalChangePinPage } from './modal-change-pin/modal-change-pin.page'\nimport { ModalDownloadTransactionsPage } from './modal-download-transactions/modal-download-transactions.page'\nimport { ModalFeesPage } from './modal-fees/modal-fees.page'\nimport { ModalOffledgerPage } from './modal-offledger/modal-offledger.page'\nimport { ModalSwapPage } from './modal-swap/modal-swap.page'\nimport { ModalTopupPage } from './modal-topup/modal-topup.page'\nimport { ModalUnloadPage } from './modal-unload/modal-unload.page'\n\n@NgModule({\n    declarations: [\n        CardViewPage,\n        ModalTopupPage,\n        CardDetailsPage,\n        ModalChangePinPage,\n        ModalDownloadTransactionsPage,\n        ModalFeesPage,\n        ModalOffledgerPage,\n        ModalUnloadPage,\n        ModalSwapPage,\n    ],\n    exports: [CardViewPage],\n    imports: [CommonModule, IonicModule],\n})\nexport class CardViewModule {}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/cards']\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.activate' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-3\\\">\\n        <div class=\\\"col-lg-12 offset-lg-6\\\">\\n            <section class=\\\"card mb-3\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"mb-0\\\">{{ 'common.activate-card' | translate }}</h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"callout callout-primary mt-0\\\">\\n                        <h6 class=\\\"text-info mb-0\\\">{{ 'common.follow-these-instructions' | translate }}</h6>\\n                        <p class=\\\"mb-0\\\">{{ 'common.enter-4-digits' | translate }}</p>\\n                    </div>\\n                    <form\\n                        class=\\\"form-validation\\\"\\n                        [ngClass]=\\\"{ 'ng-submitted': cardActivationForm.submitted }\\\"\\n                        #cardActivationForm=\\\"ngForm\\\"\\n                        (ngSubmit)=\\\"submit()\\\"\\n                        autocomplete=\\\"false\\\"\\n                        novalidate\\n                    >\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"last4Digits\\\">{{ 'common.last-4-digits' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"activation.last4Digits\\\"\\n                                id=\\\"last4Digits\\\"\\n                                name=\\\"last4Digits\\\"\\n                                #last4Digits=\\\"ngModel\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"last4Digits.invalid && (cardActivationForm.submitted || last4Digits.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"last4Digits?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"pin\\\">PIN</label>\\n                            <input\\n                                type=\\\"password\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"activation.pin\\\"\\n                                id=\\\"pin\\\"\\n                                name=\\\"pin\\\"\\n                                #pin=\\\"ngModel\\\"\\n                                pattern=\\\"^[0-9]+$\\\"\\n                                minlength=\\\"6\\\"\\n                                maxlength=\\\"6\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"pin.invalid && (cardActivationForm.submitted || pin.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.pattern\\\">{{ 'common.only-digits-allowed' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.minlength\\\">{{ 'common.must-six-digits' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.maxlength\\\">{{ 'common.cannot-be-longer' | translate }}</div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"pin\\\">{{ 'common.repeat-pin' | translate }}</label>\\n                            <input\\n                                type=\\\"password\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"repeatedPin\\\"\\n                                id=\\\"repeatedPin\\\"\\n                                name=\\\"repeatedPin\\\"\\n                                #repeatedPinInput=\\\"ngModel\\\"\\n                                pattern=\\\"^[0-9]+$\\\"\\n                                minlength=\\\"6\\\"\\n                                maxlength=\\\"6\\\"\\n                                [matchPassword]=\\\"activation.pin\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"repeatedPinInput.invalid && (cardActivationForm.submitted || repeatedPinInput.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.pattern\\\">\\n                                    {{ 'common.only-digits-allowed' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.minlength\\\">\\n                                    {{ 'common.must-six-digits' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.maxlength\\\">\\n                                    {{ 'common.cannot-be-longer' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.matchPassword\\\">\\n                                    {{ 'common.pin-do-not-match' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                            {{ 'common.activate-card' | translate }}\\n                        </button>\\n                    </form>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/cards']\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.order' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container e2e-card-order\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col d-flex justify-content-center\\\">\\n            <div class=\\\"card max-width-lg\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"text-center mb-0\\\">\\n                        {{ 'common.apply-for' | translate }} {{ displayName }}\\n                        {{ appName === 'sgpmx' ? (cardProgram?.name === 'Gold' ? 'Elite' : 'Pro') : 'Card' }}\\n                    </h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <card-dummy\\n                        [backgroundImage]=\\\"digitalCardArtWorkUrl\\\"\\n                        [card]=\\\"{ maskedPan: '1234 56** **** 5432' }\\\"\\n                        [isLoading]=\\\"isLoading\\\"\\n                    ></card-dummy>\\n                    <form\\n                        #cardOrderForm=\\\"ngForm\\\"\\n                        [ngClass]=\\\"{ 'ng-submitted': cardOrderForm.submitted }\\\"\\n                        (ngSubmit)=\\\"submit()\\\"\\n                        autocomplete=\\\"false\\\"\\n                        novalidate\\n                    >\\n                        <h5 class=\\\"text-center mb-2 font-lg\\\" [hidden]=\\\"item.transaction.fixedFee === null\\\">\\n                            <ng-container *ngIf=\\\"!isFree(); else free\\\">\\n                                {{ appName === 'sgpmx' ? 'Annual Fee inclusive of 7% GST' : 'One-Time' }} {{ 'common.fee' | translate }}\\n                                <span class=\\\"text-primary font-weight-bold\\\">\\n                                    {{ item.transaction.fixedFee | amount: item.transaction.currency?.decimalPlaces }}\\n                                    {{ item.transaction.currency?.code }}\\n                                </span>\\n                            </ng-container>\\n                            <ng-template #free>\\n                                {{ 'common.apply-for' | translate }} <b>{{ 'common.free' | translate | lowercase }}</b> {{ 'common.now' | translate }}\\n                            </ng-template>\\n                        </h5>\\n                        <h5 class=\\\"text-danger mb-3 text-center\\\" *ngIf=\\\"item.transaction.fixedFee === null\\\">\\n                            {{ 'common.out-of-stock' | translate }}\\n                        </h5>\\n                        <p class=\\\"text-center\\\" *ngIf=\\\"appName !== 'sgpmx'; else sgpmxContent\\\">\\n                            {{ 'common.simple-safe' | translate }} {{ item.type !== 'physical' ? 'of' : 'of ATMs and' }}\\n                            {{ 'common.store-around-globe' | translate: { value: displayName } }}\\n                            {{ appName === 'sgpmx' ? '' : ('common.at-annual-cost' | translate) }} {{ 'common.now' | translate }}.\\n                        </p>\\n                        <ng-template #sgpmxContent>\\n                            <div class=\\\"text-center w-75 m-auto mb-3\\\">\\n                                <hr />\\n                                <h5 class=\\\"text-primary font-weight-bold\\\">LIMITED TIME OFFER</h5>\\n                                <p class=\\\"text-primary\\\">\\n                                    Sign up for your Stacker Market {{ cardProgram?.name === 'Gold' ? 'Elite' : 'Pro' }} account today and receive\\n                                    200.00 USD worth of silver in your account.\\n                                </p>\\n                                <hr />\\n                                <p>Stacker Market {{ cardProgram?.name === 'Gold' ? 'Elite' : 'Pro' }} includes:</p>\\n                                <p>\\n                                    1. A physical or virtual multi-currency prepaid/debit card that is widely accepted by millions of ATMs, stores,\\n                                    and across the internet.*\\n                                </p>\\n                                <p>2. A physical mailing address in Singapore.</p>\\n                                <p>\\n                                    3. Preferred rates rates when onboarding existing metals or redeeming your Stacker Market allocated ounces for\\n                                    physical metals.\\n                                </p>\\n                                <br />\\n                                <p>*ATM option for physical cards only. Virtual card option is available for Androids devices only.</p>\\n                            </div>\\n                        </ng-template>\\n                        <div class=\\\"alert alert-warning\\\" *ngIf=\\\"isCardOrderDisabled()\\\">\\n                            {{ 'common.card-orders-unavailable' | translate }}\\n                        </div>\\n                        <ng-container *ngIf=\\\"user$ | async; let user\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"type\\\">{{ 'common.card-type' | translate }}</label>\\n                                <ng-select\\n                                    [items]=\\\"types\\\"\\n                                    [placeholder]=\\\"'common.select-card-type' | translate\\\"\\n                                    name=\\\"type\\\"\\n                                    id=\\\"type\\\"\\n                                    [clearable]=\\\"false\\\"\\n                                    [(ngModel)]=\\\"item.type\\\"\\n                                    (change)=\\\"assignFee(); typeChanged$.next()\\\"\\n                                    required\\n                                    [disabled]=\\\"isCardOrderDisabled()\\\"\\n                                >\\n                                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                                        <span class=\\\"text-capitalize\\\">{{ item }}</span>\\n                                    </ng-template>\\n                                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                                        <span class=\\\"text-capitalize\\\">{{ item }}</span>\\n                                    </ng-template>\\n                                </ng-select>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"!isFree() ? 'col-sm-12' : 'col'\\\">\\n                                    <label for=\\\"cardHolder\\\">{{ 'common.name-on-card' | translate }}</label>\\n                                    <input\\n                                        type=\\\"text\\\"\\n                                        id=\\\"cardHolder\\\"\\n                                        name=\\\"cardHolder\\\"\\n                                        class=\\\"form-control\\\"\\n                                        [value]=\\\"userDetails?.firstName + ' ' + userDetails?.lastName\\\"\\n                                        disabled\\n                                    />\\n                                </div>\\n                                <div class=\\\"form-group col-sm-12\\\" *ngIf=\\\"!isFree()\\\">\\n                                    <label for=\\\"type\\\">{{ 'common.pay-with' | translate }}</label>\\n                                    <currency-select\\n                                        [(currency)]=\\\"item.transaction.currency\\\"\\n                                        [user]=\\\"user\\\"\\n                                        (currencyChange)=\\\"assignFee()\\\"\\n                                    ></currency-select>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group mb-3\\\" *ngIf=\\\"item.type === 'physical'\\\">\\n                                <div class=\\\"d-flex justify-content-between\\\">\\n                                    <label>{{ 'common.shipping-address' | translate }}</label>\\n                                </div>\\n                                <textarea\\n                                    class=\\\"form-control\\\"\\n                                    [(ngModel)]=\\\"item.shippingAddress\\\"\\n                                    name=\\\"shippingAddress\\\"\\n                                    rows=\\\"4\\\"\\n                                    required\\n                                    #shippingAddressField=\\\"ngModel\\\"\\n                                ></textarea>\\n                                <div\\n                                    *ngIf=\\\"shippingAddressField.invalid && (cardOrderForm.submitted || shippingAddressField.dirty)\\\"\\n                                    class=\\\"error-messages\\\"\\n                                >\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"shippingAddressField?.errors?.required\\\">\\n                                        {{ 'common.this-is-required' | translate }}\\n                                    </div>\\n                                </div>\\n                                <p class=\\\"text-muted font-sm mt-1\\\">{{ 'common.shipping-address-note' | translate }}</p>\\n                            </div>\\n                            <ng-container *ngIf=\\\"appName !== 'sgpmx'\\\">\\n                                <div *ngIf=\\\"item.type === 'physical' && !!cardProgram?.expressDeliveryPrice\\\" class=\\\"row\\\">\\n                                    <div class=\\\"form-group col-sm-12\\\">\\n                                        <div class=\\\"custom-control custom-radio\\\">\\n                                            <input\\n                                                class=\\\"custom-control-input\\\"\\n                                                type=\\\"radio\\\"\\n                                                id=\\\"shippingBatch\\\"\\n                                                name=\\\"isExpressDelivery\\\"\\n                                                [value]=\\\"false\\\"\\n                                                [(ngModel)]=\\\"item.isExpressDelivery\\\"\\n                                            />\\n                                            <label class=\\\"custom-control-label font-md\\\" for=\\\"shippingBatch\\\">\\n                                                {{ 'common.batch-delivery' | translate }}\\n                                                <p class=\\\"font-sm\\\">\\n                                                    {{ 'common.batch-delivery-desc' | translate }} <br />\\n                                                    <b class=\\\"text-primary\\\">FREE</b>\\n                                                </p>\\n                                            </label>\\n                                        </div>\\n                                    </div>\\n                                    <div class=\\\"form-group col-sm-12\\\">\\n                                        <div class=\\\"custom-control custom-radio\\\">\\n                                            <input\\n                                                class=\\\"custom-control-input\\\"\\n                                                type=\\\"radio\\\"\\n                                                id=\\\"shippingExpress\\\"\\n                                                name=\\\"isExpressDelivery\\\"\\n                                                [value]=\\\"true\\\"\\n                                                [(ngModel)]=\\\"item.isExpressDelivery\\\"\\n                                            />\\n                                            <label class=\\\"custom-control-label font-md\\\" for=\\\"shippingExpress\\\">\\n                                                {{ 'common.express-delivery' | translate }}\\n                                                <p class=\\\"font-sm\\\">\\n                                                    {{ 'common.express-delivery-desc' | translate }} <br />\\n                                                    <b class=\\\"text-primary\\\">+{{ cardProgram.expressDeliveryPrice | amount: 2 }} USD</b>\\n                                                </p>\\n                                            </label>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </ng-container>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col\\\">\\n                                    <access-errors></access-errors>\\n                                    <button\\n                                        type=\\\"submit\\\"\\n                                        class=\\\"btn btn-primary btn-lg mb-2 w-100\\\"\\n                                        [ngClass]=\\\"{ loading: isLoading }\\\"\\n                                        [disabled]=\\\"\\n                                            isLoading ||\\n                                            !item.transaction.fixedFee ||\\n                                            user.accessErrors.length > 0 ||\\n                                            isCardOrderDisabled() ||\\n                                            isDisallowMultiple()\\n                                        \\\"\\n                                    >\\n                                        {{ 'common.apply' | translate }} {{ appName === 'sgpmx' ? '' : ('common.for-card' | translate) }}\\n                                    </button>\\n                                    <p class=\\\"text-center text-danger\\\" *ngIf=\\\"isDisallowMultiple()\\\">\\n                                        {{ 'common.this-card-program' | translate }}\\n                                    </p>\\n                                </div>\\n                            </div>\\n                        </ng-container>\\n                        <div class=\\\"row mt-2\\\">\\n                            <div class=\\\"col text-center\\\">\\n                                <a href (click)=\\\"openFeesModal(); $event.preventDefault()\\\">{{ 'common.view-card-fee-schedule' | translate }}</a>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pb-3\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.cards' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"row justify-content-between align-items-center\\\">\\n            <div class=\\\"col-lg col-md-12\\\">\\n                <ul class=\\\"nav nav-tabs nav-tabs-lg\\\">\\n                    <li class=\\\"nav-item\\\">\\n                        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards', true) }\\\" [routerLink]=\\\"['/cards']\\\">\\n                            {{ 'common.manage-cards' | translate }} ({{ (cardsCount$ | async) || 0 }})\\n                        </a>\\n                    </li>\\n                    <li class=\\\"nav-item\\\">\\n                        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards/orders', true) }\\\" [routerLink]=\\\"['/cards/orders']\\\">\\n                            {{ 'common.manage-orders' | translate }} ({{ (cardOrdersCount$ | async) || 0 }})\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n            <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n                <button class=\\\"btn btn-success-air mr-2\\\" [routerLink]=\\\"['/cards/activate']\\\">{{ 'common.activate-card' | translate }}</button>\\n                <button class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                    <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-card' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container e2e-user-invoices\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header b-b-0\\\">{{ 'common.cards' | translate }}</div>\\n            <div class=\\\"table-responsive\\\">\\n                <table class=\\\"table table-hover table-card\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.card' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.created-at' | translate | titlecase }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\"></th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                                <tr>\\n                                    <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                        <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                            <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                            <h4 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h4>\\n                                            <p class=\\\"mb-3 text-gray\\\">\\n                                                {{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}\\n                                            </p>\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                                                {{ 'common.apply-now' | translate }}\\n                                            </button>\\n                                        </div>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-template #rows>\\n                                <tr *ngFor=\\\"let card of items\\\" class=\\\"clickable bg-white\\\" (click)=\\\"showCard(card)\\\">\\n                                    <th scope=\\\"row\\\">\\n                                        <div class=\\\"d-flex align-items-center\\\">\\n                                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                            <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                                <svg\\n                                                    class=\\\"img-avatar\\\"\\n                                                    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                    xml:space=\\\"preserve\\\"\\n                                                    text-rendering=\\\"geometricPrecision\\\"\\n                                                    style=\\\"\\n                                                        shape-rendering: geometricPrecision;\\n                                                        image-rendering: optimizeQuality;\\n                                                        fill-rule: evenodd;\\n                                                        clip-rule: evenodd;\\n                                                    \\\"\\n                                                    viewBox=\\\"0 0 120 120\\\"\\n                                                >\\n                                                    <g>\\n                                                        <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                        <text\\n                                                            font-weight=\\\"500\\\"\\n                                                            font-size=\\\"3.25em\\\"\\n                                                            font-family=\\\"sans-serif\\\"\\n                                                            fill=\\\"#ffffff\\\"\\n                                                            x=\\\"50%\\\"\\n                                                            y=\\\"50%\\\"\\n                                                            text-anchor=\\\"middle\\\"\\n                                                            dy=\\\"0.35em\\\"\\n                                                        >\\n                                                            {{ card.type[0] | uppercase }}\\n                                                        </text>\\n                                                    </g>\\n                                                </svg>\\n                                            </div>\\n                                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                            <div>\\n                                                <div>{{ formatPan(card.maskedPan) }}</div>\\n                                                <div class=\\\"text-muted text-capitalize\\\">{{ card.type }}</div>\\n                                            </div>\\n                                        </div>\\n                                    </th>\\n                                    <td>\\n                                        <span\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': card.status === 'active',\\n                                                'label-info': card.status === 'blocked',\\n                                                'label-danger': card.status === 'inactive'\\n                                            }\\\"\\n                                            >{{ card.status }}</span\\n                                        >\\n                                    </td>\\n                                    <td>{{ card.createdAt | date: 'medium' }}</td>\\n                                    <td class=\\\"action pr-4 text-right\\\">\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary-air\\\" (click)=\\\"showCard(card); $event.stopPropagation()\\\">\\n                                            {{ 'common.view' | translate }}\\n                                        </button>\\n                                    </td>\\n                                </tr>\\n                                <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                    <td colspan=\\\"12\\\">\\n                                        <div>&nbsp;</div>\\n                                        <span>&nbsp;</span>\\n                                    </td>\\n                                </tr>\\n                            </ng-template>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n        <footer class=\\\"table-footer mb-3\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-6 col-md-8\\\">\\n                    <ng-select\\n                        [(ngModel)]=\\\"limit\\\"\\n                        dropdownPosition=\\\"auto\\\"\\n                        (change)=\\\"select(1)\\\"\\n                        [items]=\\\"limitOpts\\\"\\n                        [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                        [clearable]=\\\"false\\\"\\n                        [searchable]=\\\"false\\\"\\n                        required\\n                    >\\n                        <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                        <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                    </ng-select>\\n                </div>\\n                <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                    <ngb-pagination\\n                        [(page)]=\\\"page\\\"\\n                        [collectionSize]=\\\"count\\\"\\n                        (pageChange)=\\\"select()\\\"\\n                        [pageSize]=\\\"limit\\\"\\n                        [maxSize]=\\\"4\\\"\\n                        [rotate]=\\\"false\\\"\\n                        [boundaryLinks]=\\\"true\\\"\\n                    >\\n                    </ngb-pagination>\\n                </div>\\n            </div>\\n        </footer>\\n    </div>\\n</ng-container>\\n\";","import { NgModule } from '@angular/core'\nimport { CardDummyModule } from '../common/card-dummy/card-dummy.module'\nimport { CardViewModule } from '../common/card-view/card-view.module'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { CardActivationComponent } from './card-activation/card-activation.component'\nimport { CardOrderConfirmationComponent } from './card-order-confirmation/card-order-confirmation.component'\nimport { CardOrderFeesComponent } from './card-order/card-order-fees/card-order-fees.component'\nimport { CardOrderTermsComponent } from './card-order/card-order-terms/card-order-terms.component'\nimport { CardOrderComponent } from './card-order/card-order.component'\nimport { UserCardOrdersComponent } from './user-card-orders/user-card-orders.component'\nimport { UserCardsRoutingModule } from './user-cards-routing.module'\nimport { UserCardsComponent } from './user-cards.component'\nimport { UserCardsService } from './user-cards.service'\n\n@NgModule({\n    declarations: [\n        UserCardsComponent,\n        CardOrderComponent,\n        UserCardOrdersComponent,\n        CardOrderTermsComponent,\n        CardOrderFeesComponent,\n        CardActivationComponent,\n        CardOrderConfirmationComponent,\n    ],\n    imports: [\n        CommonModule,\n        UserCardsRoutingModule,\n        CardDummyModule,\n        PaymentFormModule,\n        TransactionModule,\n        CardViewModule,\n    ],\n    providers: [UserCardsService],\n})\nexport class UserCardsModule {}\n","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faCreditCardFront } from '@fortawesome/pro-light-svg-icons'\nimport { faPaperPlane } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { Observable } from 'rxjs'\nimport { delay, flatMap, take, tap } from 'rxjs/operators'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { environment } from 'src/environments/environment'\nimport { ListComponent } from '../../common/list.component'\nimport { CardOrder } from '../../common/models/accounting/card-order.model'\nimport { IntercomService } from '../../common/services/intercom.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { UserCardsService } from '../user-cards.service'\n\n@Component({\n    selector: 'user-card-orders',\n    templateUrl: 'user-card-orders.component.html',\n})\nexport class UserCardOrdersComponent extends ListComponent<CardOrder> {\n    public displayName = environment.displayName\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n    public faCreditCardFront = faCreditCardFront\n\n    public cardsCount$: Observable<string>\n    public cardOrdersCount$: Observable<string>\n\n    public faPaperPlane = faPaperPlane\n\n    protected defaultLimit = this.limitOpts[0]\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        userCardsService: UserCardsService,\n        confirmation: ConfirmationService,\n        public intercom: IntercomService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n\n        this.cardsCount$ = userCardsService.cardsCount$\n        this.cardOrdersCount$ = userCardsService.cardOrdersCount$\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            delay(0),\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user!.id}/card-orders`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    protected async stateChange(): Promise<void> {\n        // do nothing\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\nimport { finalize, switchMap, take } from 'rxjs/operators'\nimport { SecurityCheckService } from 'src/app/common/security-check/security-check.service'\nimport { ICard } from '../../common/api-interfaces'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\n\n@Component({\n    selector: 'card-activation',\n    templateUrl: 'card-activation.component.html',\n})\nexport class CardActivationComponent {\n    @ViewChild('cardActivationForm')\n    public cardActivationForm: NgForm\n    public activation: { activationCode: string; last4Digits: string; pin: string } = {} as any\n    public repeatedPin: string\n    public isLoading = false\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private session: SessionService,\n        private router: Router,\n        private securityCheckService: SecurityCheckService,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (this.cardActivationForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.securityCheckService.getScopePermission('banking').subscribe(() => {\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    switchMap(user => this.http.post<ICard>(`/users/${user.id}/cards/activate`, this.activation)),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(async () => {\n                    this.toastr.success(this.translate.instant('card-activation.card-activated'))\n                    await this.router.navigate(['/cards'])\n                })\n        })\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { pick } from 'lodash'\nimport { forkJoin, Observable, Subject, Subscription } from 'rxjs'\nimport { finalize, map, switchMap, take } from 'rxjs/operators'\nimport { formatAddressToUSFormat } from 'src/app/common/common.mixin'\nimport { buildFileUrl } from 'src/app/common/file'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { environment } from 'src/environments/environment'\nimport {\n    CardType,\n    ICardOrder,\n    ICardProgram,\n    ICurrency,\n    IUser,\n    Transaction,\n    UserDetails,\n} from '../../common/api-interfaces'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { SecurityCheckService } from '../../common/security-check/security-check.service'\nimport { SessionService, User } from '../../common/services/session.service'\nimport { CardOrderFeesComponent } from './card-order-fees/card-order-fees.component'\nimport { CardOrderTermsComponent } from './card-order-terms/card-order-terms.component'\n\n@Component({\n    selector: 'card-order',\n    templateUrl: 'card-order.component.html',\n})\nexport class CardOrderComponent implements OnInit, OnDestroy {\n    public appName = environment.appName\n    public item: Partial<ICardOrder> & { transaction: Transaction } = {\n        type: undefined,\n        transaction: {} as Transaction,\n        currency: {\n            code: 'USD',\n        } as ICurrency,\n        isExpressDelivery: false,\n    }\n\n    public user$: Observable<User>\n    public cardProgram: ICardProgram\n    public userDetails: UserDetails\n    public isLoading = false\n\n    public types: CardType[] = ['physical', 'virtual']\n    public displayName = environment.displayName\n    public digitalCardArtWorkUrl: string | null\n    public typeChanged$ = new Subject<void>()\n    public cardOrderCount = 0\n\n    @ViewChild('cardOrderForm')\n    public cardOrderForm: NgForm\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        public session: SessionService,\n        public router: Router,\n        public translate: TranslateService,\n        private ngbModal: NgbModal,\n        private securityCheckService: SecurityCheckService,\n        private currenciesQuery: CurrenciesQuery\n    ) {}\n\n    public ngOnInit(): void {\n        this.isLoading = true\n        this.user$ = this.session.userStream\n        this.subscriptions.add(\n            this.typeChanged$\n                .pipe(\n                    switchMap(() => {\n                        const params = new HttpParams().set('status', 'ne:cancelled')\n                        if (this.item.type) {\n                            params.set('type', this.item.type)\n                        }\n                        return this.http.head(`/users/${this.item.user?.id}/card-orders`, {\n                            observe: 'response',\n                            params,\n                        })\n                    }),\n                    map(response =>\n                        response && response.headers.has('x-total-count') ? ~~response.headers.get('x-total-count')! : 0\n                    )\n                )\n                .subscribe(count => {\n                    this.cardOrderCount = count\n                })\n        )\n        this.session.userStream\n            .pipe(\n                take(1),\n                switchMap(user =>\n                    forkJoin([\n                        this.http.get<IUser>(`/users/${user.id}`),\n                        this.http.get<ICardProgram>(`/users/${user.id}/card-program`),\n                        this.http.get<UserDetails>(`/users/${user.id}/details`),\n                    ])\n                ),\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(([user, cardProgram, details]) => {\n                this.item.shippingAddress = formatAddressToUSFormat(details.address)\n                this.userDetails = details\n                this.item.user = pick(user, 'id') as any\n                this.item.transaction.currency = user.preferredCurrency\n                this.cardProgram = cardProgram\n                const virtualEnabled = this.cardProgram?.hasVirtualEnabled\n                const physicalEnabled = this.cardProgram?.hasPhysicalEnabled\n                this.types = []\n                if (physicalEnabled) {\n                    this.types.push('physical')\n                }\n                if (virtualEnabled) {\n                    this.types.push('virtual')\n                }\n                this.item.type = physicalEnabled ? 'physical' : virtualEnabled ? 'virtual' : undefined\n                this.assignFee()\n                this.typeChanged$.next()\n                if (this.cardProgram.digitalCardArtwork) {\n                    this.digitalCardArtWorkUrl = buildFileUrl(this.cardProgram.digitalCardArtwork)\n                }\n            })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (!this.cardOrderForm.valid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        this.subscriptions.add(\n            this.securityCheckService.getScopePermission('banking').subscribe(() => {\n                this.ngbModal\n                    .open(CardOrderTermsComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    .result.then(\n                        terms => {\n                            this.isLoading = true\n                            this.http\n                                .post<ICardOrder>('/card-orders', {\n                                    ...this.item,\n                                    transaction: pick(this.item.transaction, ['currency']),\n                                    terms: pick(terms, ['accept', 'versionId', 'name']),\n                                })\n                                .pipe(\n                                    finalize(() => {\n                                        this.isLoading = false\n                                    })\n                                )\n                                .subscribe(async () => {\n                                    await this.router.navigate(['/cards/orders'])\n                                })\n                        },\n                        () => undefined\n                    )\n            })\n        )\n    }\n\n    public openFeesModal() {\n        this.ngbModal.open(CardOrderFeesComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n    }\n\n    public assignFee(): void {\n        if (!this.cardProgram || !this.item.transaction.currency) {\n            return\n        }\n        this.subscriptions.add(\n            forkJoin([\n                this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n                this.currenciesQuery.selectEntity(this.item.transaction.currency.code).pipe(take(1)),\n            ]).subscribe(([usd, transactionCurrency]) => {\n                if (!usd || !transactionCurrency) {\n                    return\n                }\n                const { pricePhysical, priceVirtual } = this.cardProgram\n                this.item.transaction.fixedFee = Currency.convert(\n                    this.item.type === 'physical' ? pricePhysical || '0' : priceVirtual || '0',\n                    usd,\n                    transactionCurrency\n                )\n            })\n        )\n    }\n\n    public isFree(): boolean {\n        return !!this.item.transaction.fixedFee && new BigNumber(this.item.transaction.fixedFee).isEqualTo(0)\n    }\n\n    public isDisallowMultiple(): boolean {\n        if (this.item.type === 'physical') {\n            return !this.cardProgram.allowMultiplePhysical && this.cardOrderCount >= 1\n        }\n        if (this.item.type === 'virtual') {\n            return !this.cardProgram.allowMultipleVirtual && this.cardOrderCount >= 1\n        }\n        return false\n    }\n\n    public isCardOrderDisabled(): boolean {\n        return !this.cardProgram || (!this.cardProgram?.hasVirtualEnabled && !this.cardProgram?.hasPhysicalEnabled)\n    }\n}\n","export default \"<div class=\\\"container pt-page pb-3\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\" [ngClass]=\\\"{ active: !router.isActive('/cards/orders', false) }\\\">\\n                    <a [routerLink]=\\\"router.isActive('/cards/orders', false) ? ['/cards'] : []\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\" *ngIf=\\\"router.isActive('/cards/orders', false)\\\">{{ 'common.orders' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row justify-content-between align-items-center\\\">\\n        <div class=\\\"col-lg col-md-12\\\">\\n            <ul class=\\\"nav nav-tabs nav-tabs-lg\\\">\\n                <li class=\\\"nav-item\\\">\\n                    <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards', true) }\\\" [routerLink]=\\\"['/cards']\\\">\\n                        {{ 'common.manage-cards' | translate }} ({{ (cardsCount$ | async) || 0 }})\\n                    </a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards/orders', true) }\\\" [routerLink]=\\\"['/cards/orders']\\\">\\n                        {{ 'common.manage-orders' | translate }} ({{ (cardOrdersCount$ | async) || 0 }})\\n                    </a>\\n                </li>\\n            </ul>\\n        </div>\\n        <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n            <button class=\\\"btn btn-success-air mr-2\\\" [routerLink]=\\\"['/cards/activate']\\\">{{ 'common.activate-card' | translate }}</button>\\n            <button class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-card' | translate }}\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">{{ 'common.orders' | translate }}</div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">#</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.type' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['type']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['type'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['type']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">{{ 'common.shipping-address' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'common.tracking-code' | translate }}</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">\\n                                            {{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}\\n                                        </p>\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                                            {{ 'common.apply-now' | translate }}\\n                                        </button>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr *ngFor=\\\"let order of items\\\" class=\\\"bg-white\\\">\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                        <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                            <svg\\n                                                class=\\\"img-avatar\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                xml:space=\\\"preserve\\\"\\n                                                text-rendering=\\\"geometricPrecision\\\"\\n                                                style=\\\"\\n                                                    shape-rendering: geometricPrecision;\\n                                                    image-rendering: optimizeQuality;\\n                                                    fill-rule: evenodd;\\n                                                    clip-rule: evenodd;\\n                                                \\\"\\n                                                viewBox=\\\"0 0 120 120\\\"\\n                                            >\\n                                                <g>\\n                                                    <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                    <text\\n                                                        font-weight=\\\"500\\\"\\n                                                        font-size=\\\"3.25em\\\"\\n                                                        font-family=\\\"sans-serif\\\"\\n                                                        fill=\\\"#ffffff\\\"\\n                                                        x=\\\"50%\\\"\\n                                                        y=\\\"50%\\\"\\n                                                        text-anchor=\\\"middle\\\"\\n                                                        dy=\\\"0.35em\\\"\\n                                                    >\\n                                                        {{ order.type[0] | uppercase }}\\n                                                    </text>\\n                                                </g>\\n                                            </svg>\\n                                        </div>\\n                                        <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        <div>\\n                                            <div [ngbTooltip]=\\\"tipContent\\\" placement=\\\"right\\\">{{ 'common.multi-currency-card' | translate }}</div>\\n                                            <uuid [value]=\\\"order.id\\\"></uuid>\\n                                            <ng-template #tipContent>\\n                                                {{ 'common.paid' | translate }}:\\n                                                <ng-container *ngIf=\\\"order.transaction; else free\\\">\\n                                                    {{ order.transaction?.fixedFee | amount: order.transaction?.currency.decimalPlaces }}\\n                                                    {{ order.transaction?.currency.code }}\\n                                                </ng-container>\\n                                                <ng-template #free> 0.00 USD </ng-template>\\n                                            </ng-template>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label\\\"\\n                                        [ngClass]=\\\"{ 'label-success': order.type === 'physical', 'label-info': order.type === 'virtual' }\\\"\\n                                        >{{ order.type }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <ul class=\\\"step d-flex flex-nowrap\\\">\\n                                        <li\\n                                            class=\\\"step-item\\\"\\n                                            [ngClass]=\\\"{\\n                                                active: ['pending', 'unconfirmed', 'action-required'].includes(order.status),\\n                                                failed: order.status === 'cancelled'\\n                                            }\\\"\\n                                        >\\n                                            <a class=\\\"small\\\">{{\\n                                                (order.status === 'cancelled' ? 'common.cancelled' : 'common.requested') | translate\\n                                            }}</a>\\n                                        </li>\\n                                        <li class=\\\"step-item\\\" [ngClass]=\\\"{ active: order.status === 'processing' }\\\">\\n                                            <a class=\\\"small\\\">{{ 'common.approved' | translate }}</a>\\n                                        </li>\\n                                        <li\\n                                            class=\\\"step-item\\\"\\n                                            *ngIf=\\\"order.type === 'physical'\\\"\\n                                            [ngClass]=\\\"{ active: order.status === 'completed' && order.card?.status !== 'active' }\\\"\\n                                        >\\n                                            <a class=\\\"small\\\">{{ 'common.shipped' | translate }}</a>\\n                                        </li>\\n                                        <li class=\\\"step-item\\\" [ngClass]=\\\"{ active: order.card?.status === 'active' }\\\">\\n                                            <a class=\\\"small\\\">{{ 'common.activated' | translate }}</a>\\n                                        </li>\\n                                    </ul>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"order.type === 'physical'\\\">\\n                                        <div *ngIf=\\\"order.isExpressDelivery\\\" class=\\\"badge badge-success badge-lg mb-1\\\">\\n                                            <fa-icon [icon]=\\\"faPaperPlane\\\"></fa-icon> Express\\n                                        </div>\\n                                        <address class=\\\"address-input whitespace-pre\\\">{{ order.shippingAddress }}</address>\\n                                    </ng-container>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"order.type === 'physical'; else na\\\">\\n                                        <a\\n                                            href=\\\"{{\\n                                                order.isExpressDelivery\\n                                                    ? 'https://mydhl.express.dhl/sg/en/tracking.html#/track-by-number'\\n                                                    : 'https://www.singpost.com/track-items'\\n                                            }}\\\"\\n                                            target=\\\"_blank\\\"\\n                                            rel=\\\"noopener\\\"\\n                                        >\\n                                            {{ order.trackingCode }}\\n                                        </a>\\n                                    </ng-container>\\n                                    <ng-template #na>\\n                                        <span class=\\\"text-muted\\\">N/A</span>\\n                                    </ng-template>\\n                                </td>\\n                                <td>{{ order.createdAt | date: 'medium' }}</td>\\n                                <td class=\\\"action pr-4 text-right\\\">\\n                                    <button\\n                                        type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-danger\\\"\\n                                        *ngIf=\\\"['pending', 'action-required'].includes(order.status)\\\"\\n                                        (click)=\\\"\\n                                            intercom.startConversation(\\n                                                'Hi, I would like to cancel my card order ' + order.id.substring(0, 7) + '. Kindly assist.'\\n                                            )\\n                                        \\\"\\n                                    >\\n                                        {{ 'common.cancel' | translate }}\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\";","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { ModalController } from '@ionic/angular'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { Observable } from 'rxjs'\nimport { flatMap, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICard } from '../common/api-interfaces'\nimport { CardViewPage } from '../common/card-view/card-view.page'\nimport { ListComponent } from '../common/list.component'\nimport { ConfirmationService } from '../common/services/confirmation.service'\nimport { SessionService } from '../common/services/session.service'\nimport { UserCardsService } from './user-cards.service'\n\n@Component({\n    selector: 'user-cards',\n    templateUrl: 'user-cards.component.html',\n})\nexport class UserCardsComponent extends ListComponent<ICard> {\n    public displayName = environment.displayName\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n\n    public cardsCount$: Observable<string>\n    public cardOrdersCount$: Observable<string>\n\n    protected defaultLimit = this.limitOpts[0]\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        userCardsService: UserCardsService,\n        confirmation: ConfirmationService,\n        private modalController: ModalController,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n\n        this.cardsCount$ = userCardsService.cardsCount$\n        this.cardOrdersCount$ = userCardsService.cardOrdersCount$\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user.id}/cards`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public async showCard(card: ICard): Promise<void> {\n        const modal = await this.modalController.create({\n            component: CardViewPage,\n            componentProps: {\n                item: card,\n            },\n        })\n        return await modal.present()\n    }\n\n    public formatPan(pan: string): string {\n        return `${pan.slice(0, 4)} ${pan.slice(4, 8)} ${pan.slice(8, 12)} ${pan.slice(12)}`\n    }\n}\n","import { Component } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\n\n@Component({\n    selector: 'card-order-fees',\n    templateUrl: 'card-order-fees.component.html',\n})\nexport class CardOrderFeesComponent {\n    constructor(public modal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.card' | translate }} - {{ 'common.fee-schedule' | translate | titlecase }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body card-terms-container text-body\\\">\\n    <card-fee-schedule></card-fee-schedule>\\n</div>\\n<div class=\\\"modal-footer flex-column flex-md-row justify-content-center justify-content-md-end\\\">\\n    <div class=\\\"d-flex justify-content-end\\\">\\n        <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"modal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { PermissionGuard } from '../common/guards/permission.guard'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { CardActivationComponent } from './card-activation/card-activation.component'\nimport { CardOrderComponent } from './card-order/card-order.component'\nimport { UserCardOrdersComponent } from './user-card-orders/user-card-orders.component'\nimport { UserCardsComponent } from './user-cards.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [LoggedInAuthGuard, PermissionGuard],\n        data: {\n            permissions: ['cards'],\n        },\n        children: [\n            {\n                path: '',\n                component: UserCardsComponent,\n            },\n            {\n                path: 'orders',\n                component: UserCardOrdersComponent,\n            },\n            {\n                path: 'order',\n                component: CardOrderComponent,\n            },\n            {\n                path: 'activate',\n                component: CardActivationComponent,\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserCardsRoutingModule {}\n"]}