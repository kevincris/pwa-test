{"version":3,"sources":["webpack:///src/app/user-redemption/user-redemption.component.html","webpack:///src/app/user-redemption/user-redemption.module.ts","webpack:///src/app/user-redemption/user-redemption-routing.module.ts","webpack:///src/app/user-redemption/user-redemption.component.ts"],"names":["UserRedemptionModule","declarations","imports","routes","path","component","canActivate","data","permissions","UserRedemptionRoutingModule","forChild","exports","UserRedemptionComponent","http","ngbModal","changeDetector","route","router","session","toastr","walletsQuery","redemptionService","faArrowAltToBottom","faArrowAltFromBottom","faCircle","wallets$","filteredBalances$","apiUrl","user","id","redemptionForm","totalOunces","redemption","isSilver","totalGrams","div","toFixed","type","currencyCode","balance","subscriptions","add","subscribe","wallets","wallet","find","w","currency","code","availableBalance","minus","updateEvent","next","selector","template"],"mappings":"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","file":"user-redemption-user-redemption-module-es5.js","sourcesContent":["export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-7\\\">\\n            <account-balance class=\\\"card\\\" [compact]=\\\"true\\\"></account-balance>\\n        </div>\\n        <div class=\\\"col-lg-11\\\">\\n            <section class=\\\"card\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"mb-0\\\">{{ 'common.redeem' | translate }}</h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <redemption-form (onRedemptionSubmitted)=\\\"onUpdate()\\\" #redemptionForm></redemption-form>\\n                </div>\\n            </section>\\n        </div>\\n        <div class=\\\"col-lg-6\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <div class=\\\"card\\\">\\n                        <div class=\\\"card-body\\\">\\n                            <div class=\\\"mb-2 text-center\\\">\\n                                <div class=\\\"mb-2\\\">\\n                                    <span class=\\\"label label-success\\\">{{ 'common.redeeming' | translate }}</span>\\n                                </div>\\n                                <div class=\\\"p-2 text-center border\\\">\\n                                    <small>{{ 'common.total-quantity-to-redeem' | translate }}</small\\n                                    ><br />\\n                                    <h5 class=\\\"mb-0\\\">{{ totalOunces() | amount: 7 }} ounce</h5>\\n                                </div>\\n                                <div class=\\\"p-2 text-center border\\\">\\n                                    <h5 class=\\\"mb-0\\\">\\n                                        {{ totalQuantity() | number: (isSilver() ? '1.2-2' : '1.0-0') }} {{ isSilver() ? 'kg' : 'g' }}\\n                                    </h5>\\n                                </div>\\n                                <div class=\\\"p-2\\\">\\n                                    <small> {{ 'common.balance-after-redemption' | translate }} </small><br />\\n                                    <h5 class=\\\"mb-0\\\">\\n                                        {{ calculateBalanceAfterRedemption(isSilver() ? 'AG' : 'AU') | amount: 7 }} {{ isSilver() ? 'AG' : 'AU' }}\\n                                    </h5>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <div class=\\\"card\\\">\\n                        <div class=\\\"card-header\\\">{{ 'common.history' | translate }}</div>\\n                        <ul class=\\\"list-group list-group-flush\\\">\\n                            <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                                <li\\n                                    class=\\\"list-group-item py-2\\\"\\n                                    [ngClass]=\\\"redemption.status !== 'completed' ? 'text-muted' : ''\\\"\\n                                    *ngFor=\\\"let redemption of items\\\"\\n                                >\\n                                    <div class=\\\"d-flex justify-content-between\\\">\\n                                        <span> {{ redemption.type === 'silver' ? 'Silver Troy Ounce' : 'Gold Troy Ounce' }}</span>\\n                                        <span class=\\\"text-right\\\" [ngClass]=\\\"redemption.status !== 'completed' ? 'text-muted' : 'text-danger'\\\"\\n                                            >-{{ getQuantity(redemption) }}\\n                                            <ng-container *ngIf=\\\"redemption.type === 'gold'; else silverTemplate\\\"> g </ng-container>\\n                                            <ng-template #silverTemplate> ozt</ng-template>\\n                                        </span>\\n                                    </div>\\n                                    <small class=\\\"d-flex justify-content-between\\\">\\n                                        <span class=\\\"text-muted\\\">{{ redemption.createdAt | date: 'short' }}</span>\\n                                        <span class=\\\"text-muted text-right\\\">\\n                                            {{ redemption.transaction.amount | amount: 2 }} {{ redemption.transaction.currency.code }}\\n                                        </span>\\n                                    </small>\\n                                    <span\\n                                        class=\\\"text-capitalize label label-sm text-right\\\"\\n                                        [ngClass]=\\\"{\\n                                            'label-primary': redemption.status === 'pending',\\n                                            'label-success': redemption.status === 'completed',\\n                                            'label-warning': redemption.status === 'processing',\\n                                            'label-danger': redemption.status === 'cancelled'\\n                                        }\\\"\\n                                        >{{ redemption.status }}</span\\n                                    >\\n                                </li>\\n                                <li class=\\\"list-group-item py-3 text-center text-muted\\\" *ngIf=\\\"items.length === 0\\\">\\n                                    <i>{{ 'common.no-redemptions-found' | translate }}</i>\\n                                </li>\\n                            </ng-container>\\n                        </ul>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-center mb-3\\\">\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"5\\\"\\n                            [ellipses]=\\\"false\\\"\\n                            [rotate]=\\\"true\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RedemptionModule } from 'src/app/common/redemption/redemption.module'\nimport { DashboardModule } from 'src/app/dashboard/dashboard.module'\nimport { CommonModule } from '../common/common.module'\nimport { UserRedemptionRoutingModule } from './user-redemption-routing.module'\nimport { UserRedemptionComponent } from './user-redemption.component'\n\n@NgModule({\n    declarations: [UserRedemptionComponent],\n    imports: [CommonModule, UserRedemptionRoutingModule, DashboardModule, RedemptionModule],\n})\nexport class UserRedemptionModule {}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { PermissionGuard } from '../common/guards/permission.guard'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { UserRedemptionComponent } from './user-redemption.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserRedemptionComponent,\n        canActivate: [LoggedInAuthGuard, PermissionGuard],\n        data: {\n            permissions: ['redeem'],\n        },\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserRedemptionRoutingModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faArrowAltFromBottom, faArrowAltToBottom } from '@fortawesome/pro-light-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { RedemptionFormComponent } from 'src/app/common/redemption/redemption-form.component'\nimport { Redemption, Wallet } from '../common/api-interfaces'\nimport { ListV2Component } from '../common/list-v2.component'\nimport { RedemptionService } from '../common/services/redemption.service'\nimport { SessionService } from '../common/services/session.service'\nimport { ToastrService } from '../common/services/toastr.service'\nimport { WalletsQuery } from '../store/wallets/wallets.query'\n\n@Component({\n    selector: 'user-redemption',\n    templateUrl: 'user-redemption.component.html',\n})\nexport class UserRedemptionComponent extends ListV2Component<Redemption> implements OnInit {\n    public wallets$: Observable<(Wallet & { value: string })[]>\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public faCircle = faCircle\n    @ViewChild('redemptionForm')\n    public redemptionForm: RedemptionFormComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        protected toastr: ToastrService,\n        private walletsQuery: WalletsQuery,\n        private redemptionService: RedemptionService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session)\n        this.wallets$ = this.walletsQuery.filteredBalances$\n    }\n\n    public ngOnInit(): void {\n        this.apiUrl = `/users/${this.session.user.id}/redemptions`\n        super.ngOnInit()\n    }\n\n    public totalOunces(): string {\n        return this.redemptionForm ? this.redemptionService.totalOunces(this.redemptionForm.redemption) : '0.00'\n    }\n\n    public totalQuantity(): string {\n        return this.redemptionForm\n            ? this.isSilver()\n                ? new BigNumber(this.redemptionService.totalGrams(this.redemptionForm.redemption)).div(1000).toFixed(2)\n                : new BigNumber(this.redemptionService.totalGrams(this.redemptionForm.redemption)).toFixed(0, 1)\n            : '0.00'\n    }\n\n    public isSilver(): boolean {\n        return this.redemptionForm ? this.redemptionForm.redemption.type === 'silver' : false\n    }\n\n    public calculateBalanceAfterRedemption(currencyCode: string): string {\n        let balance = '0.00'\n        this.subscriptions.add(\n            this.wallets$.subscribe(wallets => {\n                const wallet = wallets.find(w => w.currency.code === currencyCode)\n                if (wallet) {\n                    balance = wallet.availableBalance\n                }\n            })\n        )\n        if (!balance) {\n            return '0'\n        }\n        return new BigNumber(balance)\n            .minus(this.redemptionForm ? this.redemptionService.totalOunces(this.redemptionForm.redemption) : 0)\n            .toFixed(7)\n    }\n\n    public getQuantity(redemption: Redemption): string {\n        return new BigNumber(\n            redemption.type === 'gold'\n                ? this.redemptionService.totalGrams(redemption)\n                : this.redemptionService.totalOunces(redemption)\n        ).toFixed(0)\n    }\n\n    public onUpdate(): void {\n        this.updateEvent.next()\n    }\n}\n"]}