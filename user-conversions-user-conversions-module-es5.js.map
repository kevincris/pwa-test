{"version":3,"sources":["webpack:///src/app/store/fees/fees.store.ts","webpack:///src/app/store/fees/fees.query.ts","webpack:///src/app/services/user-conversions/user-conversion-form.component.html","webpack:///src/app/common/services/sgpmx.service.ts","webpack:///src/app/services/user-conversions/user-conversion-form.component.ts","webpack:///src/app/services/user-conversions/user-conversions.module.ts","webpack:///src/app/services/user-conversions/user-conversions.component.ts","webpack:///src/app/services/user-conversions/user-conversions.component.html","webpack:///src/app/common/security-check/security-check.service.ts","webpack:///src/app/services/user-conversions/user-conversion-action.component.ts","webpack:///src/app/services/user-conversions/user-conversions-routing.module.ts","webpack:///src/app/services/user-conversions/user-conversion-action.component.html"],"names":["FeesStore","providedIn","name","idKey","FeesQuery","store","query","selectEntity","entity","type","method","currencyCode","currency","code","pipe","fee","usdFee","SgpmxService","currenciesQuery","feesQuery","transaction","amount","findByPrimaryAttributes","usd","transferFee","gstFee","usdValue","convert","decimalPlaces","feeAmount","times","relative","plus","fixed","min","isLessThan","max","isGreaterThan","gst","isZero","toFixed","UserConversionFormComponent","http","toastr","activeModal","securityCheckService","conversionService","translate","onSave","onDelete","copy","isSaving","userAutocomplete","legalEntitiesStream","search","get","params","set","canChangeOwner","appName","subscriptions","item","limit","JSON","stringify","response","data","subscribe","cur","currencies","filteredCurrencies","user","id","unsubscribe","conversionForm","invalid","add","getScopePermission","create","baseTransaction","conversion","success","instant","reset","emit","date","slice","accept","dismiss","patch","op","path","value","filter","includes","find","undefined","resetForm","selector","template","UserConversionsModule","declarations","imports","Mode","UserConversionsComponent","ngbModal","changeDetector","route","router","session","confirmation","notification","modes","mode","ACTIVE","conversionsChangingStatus","Set","faEllipsisV","appColor","getComputedStyle","document","body","getPropertyValue","trim","lighten","apiQuery","defaultQuery","status","or","defaultLimit","limitOpts","formComponent","userStream","apiUrl","paramMap","queryParamMap","has","fetchById","action","closeHook","navigate","modal","open","windowClass","backdrop","conversionActionComponent","componentInstance","result","then","onConfirm","updateEvent","next","close","actionSubscription","Object","assign","notifyEvent","event","accessErrors","length","showForm","SecurityCheckService","scope","hasTokenScope","observer","complete","UserConversionActionComponent","routes","component","canActivate","pathMatch","UserConversionsRoutingModule","forChild","exports"],"mappings":"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","file":"user-conversions-user-conversions-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","export default \"<form\\n    class=\\\"form-validation e2e-conversion-form\\\"\\n    #conversionForm=\\\"ngForm\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': conversionForm.submitted }\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ (!isNew() ? 'common.conversion' : 'common.currency-conversion') | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <div class=\\\"form-group\\\" *ngIf=\\\"item.user !== null && canChangeOwner\\\">\\n            <label for=\\\"user\\\">{{ 'common.user' | translate }}</label>\\n            <ng-select\\n                id=\\\"user\\\"\\n                name=\\\"user\\\"\\n                [placeholder]=\\\"'common.enter-user' | translate\\\"\\n                [(ngModel)]=\\\"user\\\"\\n                #userInput=\\\"ngModel\\\"\\n                [items]=\\\"legalEntitiesStream | async\\\"\\n                [typeahead]=\\\"userAutocomplete\\\"\\n                [clearable]=\\\"false\\\"\\n                [disabled]=\\\"!isNew()\\\"\\n                required\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item.name }} <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                        <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                        <div class=\\\"w-100\\\">\\n                            <div>{{ item.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"userInput.invalid && (conversionForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"baseAmount\\\">{{ 'common.amount' | translate }} ({{ 'common.from' | translate }})</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"baseAmount\\\"\\n                    name=\\\"baseAmount\\\"\\n                    [(ngModel)]=\\\"copy.baseTransaction!.amount\\\"\\n                    #baseAmount=\\\"ngModel\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    required\\n                    [disabled]=\\\"!isNew()\\\"\\n                />\\n                <div *ngIf=\\\"baseAmount.invalid && (conversionForm.submitted || baseAmount.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"baseAmount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"baseCurrency\\\">{{ 'common.currency' | translate }} ({{ 'common.from' | translate }})</label>\\n                <currency-select\\n                    [user]=\\\"user\\\"\\n                    [placeholder]=\\\"'common.from-currency' | translate\\\"\\n                    [(currency)]=\\\"copy.baseTransaction!.currency\\\"\\n                    [disabled]=\\\"!isNew()\\\"\\n                    [transferable]=\\\"true\\\"\\n                    [required]=\\\"true\\\"\\n                    [hideZeroBalance]=\\\"appName !== 'sgpmx'\\\"\\n                    [filterBy]=\\\"copy.currency && copy.currency.type === 'crypto' ? ['EUR', 'USD'] : undefined\\\"\\n                    (currencyChange)=\\\"copy.currency = undefined; filterCurrencies()\\\"\\n                    #currencySelect\\n                ></currency-select>\\n                <div\\n                    *ngIf=\\\"currencySelect.currencyInput.invalid && (conversionForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                    class=\\\"error-messages\\\"\\n                >\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                        {{ 'common.this-is-required' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" *ngIf=\\\"isNew() || !copy.counterTransaction?.amount\\\">\\n            <label for=\\\"currency\\\">{{ 'common.currency' | translate }} ({{ 'common.to' | translate }})</label>\\n            <ng-select\\n                name=\\\"currency\\\"\\n                class=\\\"to-currency\\\"\\n                [placeholder]=\\\"'common.to-currency' | translate\\\"\\n                [(ngModel)]=\\\"copy.currency\\\"\\n                [items]=\\\"filteredCurrencies\\\"\\n                [clearable]=\\\"false\\\"\\n                [searchable]=\\\"false\\\"\\n                #currencyInput=\\\"ngModel\\\"\\n                required\\n                [disabled]=\\\"!isNew()\\\"\\n                (change)=\\\"resetBaseCurrency()\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">{{ item.code }} - {{ item.name }}</ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item.code }} - {{ item.name }}</ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"currencyInput.invalid && (conversionForm.submitted || currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencyInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row\\\" *ngIf=\\\"!isNew() && copy.counterTransaction?.amount\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"counterAmount\\\">{{ 'common.amount' | translate }} ({{ 'common.to' | translate }})</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"counterAmount\\\"\\n                    name=\\\"counterAmount\\\"\\n                    [ngModel]=\\\"copy.counterTransaction?.amount\\\"\\n                    #counterAmount=\\\"ngModel\\\"\\n                    [disabled]=\\\"true\\\"\\n                />\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"counterCurrency\\\">{{ 'common.currency' | translate }} (To)</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"counterCurrency\\\"\\n                    name=\\\"counterCurrency\\\"\\n                    [ngModel]=\\\"copy.currency?.code\\\"\\n                    [disabled]=\\\"true\\\"\\n                />\\n            </div>\\n        </div>\\n\\n        <div class=\\\"callout callout-success mb-0\\\" *ngIf=\\\"isNew()\\\">\\n            <h6>{{ 'common.how-it-works' | translate }}</h6>\\n            <p>\\n                {{ 'common.submit-your-conversion' | translate }}\\n            </p>\\n            <p>{{ 'common.if-you-wish-to-accept' | translate }}</p>\\n        </div>\\n        <div class=\\\"mt-2\\\">\\n            <small class=\\\"text-muted\\\">\\n                <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n                Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n            </small>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button *ngIf=\\\"copy.status === 'offered'\\\" type=\\\"button\\\" class=\\\"btn btn-success btn-w-sm\\\" (click)=\\\"accept()\\\">\\n            {{ 'common.accept' | translate }}\\n        </button>\\n        <button *ngIf=\\\"copy.status === 'offered'\\\" type=\\\"button\\\" class=\\\"btn btn-danger btn-w-sm\\\" (click)=\\\"decline()\\\">\\n            {{ 'common.decline' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"isNew()\\\"\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-primary btn-w-sm e2e-request-btn\\\"\\n            [ngClass]=\\\"{ loading: isSaving }\\\"\\n            [disabled]=\\\"isSaving\\\"\\n        >\\n            {{ 'common.request' | translate }}\\n        </button>\\n        <button *ngIf=\\\"!isNew()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">\\n            {{ 'common.close' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","import { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, of } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { Transaction } from '../api-interfaces'\nimport { Currency } from '../models/accounting/currency.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SgpmxService {\n    constructor(private currenciesQuery: CurrenciesQuery, private feesQuery: FeesQuery) {}\n\n    public calculateFeeInUsd(transaction: Partial<Transaction> | Transaction): Observable<string> {\n        if (!transaction.currency || !transaction.amount) {\n            return of('0')\n        }\n        return forkJoin([\n            this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n            this.currenciesQuery.selectEntity(transaction.currency.code).pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'transfer',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'gst',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n        ]).pipe(\n            map(([usd, currency, transferFee, gstFee]) => {\n                const usdValue = new BigNumber(Currency.convert(transaction.amount!, currency!, usd!)).decimalPlaces(2)\n                let feeAmount = usdValue.times(transferFee?.relative || 0).plus(transferFee?.fixed || 0)\n\n                if (transferFee?.min && feeAmount.isLessThan(transferFee.min)) {\n                    feeAmount = new BigNumber(transferFee.min)\n                } else if (transferFee?.max && feeAmount.isGreaterThan(transferFee.max)) {\n                    feeAmount = new BigNumber(transferFee.max)\n                }\n\n                let gst = feeAmount.times(gstFee?.relative || 0)\n                if (!feeAmount.isZero() && gstFee?.min && gst.isLessThan(gstFee.min)) {\n                    gst = new BigNumber(gstFee.min)\n                } else if (!feeAmount.isZero() && gstFee?.max && gst.isGreaterThan(gstFee.max)) {\n                    gst = new BigNumber(gstFee.max)\n                }\n\n                return feeAmount.plus(gst).toFixed(2)\n            })\n        )\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { cloneDeep } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, flatMap, map, switchMap, tap } from 'rxjs/operators'\nimport { IConversion, ICurrency, IUser, Paginated } from 'src/app/common/api-interfaces'\nimport { SecurityCheckService } from 'src/app/common/security-check/security-check.service'\nimport { ConversionService } from 'src/app/common/services/accounting/conversion.service'\nimport { ToastrService } from 'src/app/common/services/toastr.service'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'user-conversion-form',\n    templateUrl: 'user-conversion-form.component.html',\n})\nexport class UserConversionFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public item: IConversion\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('conversionForm')\n    public conversionForm: NgForm\n    public copy: Partial<IConversion> = {}\n    public isSaving = false\n    public user?: IUser\n    public userAutocomplete = new EventEmitter<string>()\n    public legalEntitiesStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        )\n    )\n    public currencies: ICurrency[]\n    public filteredCurrencies: ICurrency[]\n    public canChangeOwner = true\n    public appName = environment.appName\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        public activeModal: NgbActiveModal,\n        private securityCheckService: SecurityCheckService,\n        private conversionService: ConversionService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.copy = cloneDeep(this.item)\n        this.http\n            .get<Paginated<ICurrency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                    'filter.holdable': JSON.stringify(true),\n                },\n            })\n            .pipe(map(response => response.data))\n            .subscribe(cur => {\n                this.currencies = cur\n                this.filteredCurrencies = cloneDeep(this.currencies)\n            })\n        if (this.item.user) {\n            this.canChangeOwner = false\n            this.user = this.item.user\n        }\n    }\n\n    public isNew(): boolean {\n        return !this.item.id\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.conversionForm.invalid) {\n            return\n        }\n\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(\n                    flatMap(() =>\n                        this.conversionService.create({\n                            currency: this.copy.currency!,\n                            baseTransaction: {\n                                amount: this.copy.baseTransaction!.amount,\n                                currency: this.copy.baseTransaction!.currency,\n                            },\n                            user: this.user,\n                        })\n                    ),\n                    tap(conversion => {\n                        this.copy = conversion\n                    }),\n                    finalize(() => {\n                        this.isSaving = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-created'))\n                    this.reset()\n                    this.onSave.emit()\n                })\n        )\n    }\n\n    public convertToISODate(date: string | null): string | null {\n        return date && `${date.slice(4)}-${date.slice(2, 4)}-${date.slice(0, 2)}`\n    }\n\n    public accept(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(flatMap(() => this.conversionService.accept(this.item.id)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-accepted'))\n                    this.onSave.emit()\n                    this.activeModal.dismiss()\n                })\n        )\n    }\n\n    public decline(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(() =>\n                    this.conversionService.patch(this.item.id, [\n                        {\n                            op: 'replace',\n                            path: '/status',\n                            value: 'declined',\n                        },\n                    ])\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-decline'))\n                    this.onSave.emit()\n                    this.activeModal.dismiss()\n                })\n        )\n    }\n\n    public filterCurrencies(): void {\n        if (\n            this.currencies &&\n            this.copy.baseTransaction &&\n            this.copy.baseTransaction.currency &&\n            this.copy.baseTransaction.currency.type === 'crypto'\n        ) {\n            this.filteredCurrencies = this.currencies.filter(currency => ['EUR', 'USD'].includes(currency.code))\n        } else {\n            this.filteredCurrencies = cloneDeep(this.currencies)\n        }\n    }\n\n    public resetBaseCurrency(): void {\n        if (\n            this.copy.currency &&\n            this.copy.currency.type === 'crypto' &&\n            !['USD', 'EUR'].includes(this.copy.baseTransaction?.currency.code!)\n        ) {\n            this.copy.baseTransaction!.currency = this.currencies.find(currency => currency.code === 'USD')!\n        }\n    }\n\n    private reset(): void {\n        this.user = undefined\n        this.conversionForm.reset()\n        this.conversionForm.resetForm()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../../common/common.module'\nimport { UserConversionActionComponent } from './user-conversion-action.component'\nimport { UserConversionFormComponent } from './user-conversion-form.component'\nimport { UserConversionsRoutingModule } from './user-conversions-routing.module'\nimport { UserConversionsComponent } from './user-conversions.component'\n\n@NgModule({\n    declarations: [UserConversionsComponent, UserConversionFormComponent, UserConversionActionComponent],\n    imports: [CommonModule, UserConversionsRoutingModule],\n})\nexport class UserConversionsModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core'\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { values } from 'lodash'\nimport { combineLatest, forkJoin, of } from 'rxjs'\nimport { filter, finalize, flatMap } from 'rxjs/operators'\nimport { ListComponent } from 'src/app/common/list.component'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { IConversion, IUser } from '../../common/api-interfaces'\nimport { Conversion } from '../../common/models/accounting/conversion.model'\nimport { User } from '../../common/models/core/user.model'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { ConversionService } from '../../common/services/accounting/conversion.service'\nimport { NotificationsService } from '../../common/services/notifications.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { UserConversionActionComponent } from './user-conversion-action.component'\nimport { UserConversionFormComponent } from './user-conversion-form.component'\n\nenum Mode {\n    ALL = 'all',\n    ACTIVE = 'active',\n    PENDING = 'pending',\n}\n\n@Component({\n    selector: 'user-conversions',\n    templateUrl: 'user-conversions.component.html',\n})\nexport class UserConversionsComponent extends ListComponent<Conversion> implements OnInit {\n    public user: IUser\n    public modes: Mode[] = values(Mode) as Mode[]\n    @Input()\n    public mode: Mode = Mode.ACTIVE\n    public conversionsChangingStatus = new Set<string>()\n\n    public faEllipsisV = faEllipsisV\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n\n    protected apiQuery = ['status']\n    protected defaultQuery = { status: { or: ['pending', 'offered', 'accepted'] } }\n    protected defaultLimit = this.limitOpts[0]\n    protected formComponent = UserConversionFormComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private notification: NotificationsService,\n        private toastr: ToastrService,\n        private conversionService: ConversionService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.apiUrl = `/users/${user.id}/conversions`\n                this.user = new User(user)\n            })\n        )\n        this.subscriptions.add(\n            combineLatest(this.route.paramMap, this.route.queryParamMap)\n                .pipe(\n                    filter(([paramMap]) => paramMap.has('id')),\n                    flatMap(([paramMap, queryParamMap]) =>\n                        forkJoin([this.conversionService.fetchById(paramMap.get('id')!), of(queryParamMap)])\n                    )\n                )\n                .subscribe(([conversion, queryParamMap]: [Conversion, ParamMap]) => {\n                    const action = queryParamMap.get('action')\n                    const closeHook = () => this.router.navigate(['/services/conversions'])\n\n                    if (action && ['accept', 'decline'].includes(action)) {\n                        const modal = this.ngbModal.open(UserConversionActionComponent, {\n                            windowClass: 'modal-primary',\n                            backdrop: 'static',\n                        })\n                        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n                        conversionActionComponent.action = action as 'accept' | 'decline'\n                        conversionActionComponent.conversion = conversion\n                        modal.result.then(closeHook, closeHook)\n\n                        this.subscriptions.add(\n                            conversionActionComponent.onConfirm\n                                .pipe(\n                                    flatMap(() =>\n                                        action === 'accept'\n                                            ? this.conversionService.accept(conversion.id)\n                                            : this.conversionService.patch(conversion.id, [\n                                                  {\n                                                      op: 'replace',\n                                                      path: '/status',\n                                                      value: 'declined',\n                                                  },\n                                              ])\n                                    )\n                                )\n                                .subscribe(async () => {\n                                    this.updateEvent.next()\n                                    this.toastr.success(\n                                        `${this.translate.instant('common.conversion')} ${\n                                            action === 'accept'\n                                                ? this.translate.instant('common.accepted')\n                                                : this.translate.instant('common.declined')\n                                        }`\n                                    )\n                                    modal.close()\n                                })\n                        )\n                    } else {\n                        const modal = this.ngbModal.open(UserConversionFormComponent, {\n                            windowClass: 'modal-primary',\n                            backdrop: 'static',\n                        })\n                        modal.componentInstance.item = conversion\n                        modal.result.then(closeHook, closeHook)\n                    }\n                })\n        )\n        super.ngOnInit()\n    }\n\n    public accept(conversion: Conversion): void {\n        this.conversionsChangingStatus.add(conversion.id)\n        const modal = this.ngbModal.open(UserConversionActionComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n        conversionActionComponent.action = 'accept'\n        conversionActionComponent.conversion = conversion\n        const actionSubscription = conversionActionComponent.onConfirm\n            .pipe(flatMap(() => this.conversionService.accept(conversion.id)))\n            .subscribe(() => {\n                modal.close()\n                this.toastr.success(this.translate.instant('common.conversion-accepted'))\n                this.updateEvent.next()\n            })\n        const closeHook = () => {\n            actionSubscription.unsubscribe()\n            this.conversionsChangingStatus.delete(conversion.id)\n        }\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public decline(conversion: Conversion): void {\n        this.conversionsChangingStatus.add(conversion.id)\n        const modal = this.ngbModal.open(UserConversionActionComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n        conversionActionComponent.action = 'decline'\n        conversionActionComponent.conversion = conversion\n        const actionSubscription = conversionActionComponent.onConfirm\n            .pipe(\n                flatMap(() =>\n                    this.conversionService.patch(conversion.id, [\n                        {\n                            op: 'replace',\n                            path: '/status',\n                            value: 'declined',\n                        },\n                    ])\n                )\n            )\n            .subscribe(() => {\n                modal.close()\n                this.toastr.success(this.translate.instant('user-conversions.conversion-declined'))\n                this.updateEvent.next()\n            })\n        const closeHook = () => {\n            actionSubscription.unsubscribe()\n            this.conversionsChangingStatus.delete(conversion.id)\n        }\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public cancel(conversion: Conversion): void {\n        this.subscriptions.add(\n            this.conversionService\n                .patch(conversion.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .pipe(\n                    finalize(() => {\n                        this.conversionsChangingStatus.delete(conversion.id)\n                    })\n                )\n                .subscribe(response => {\n                    Object.assign(conversion, response)\n                    this.toastr.success(this.translate.instant('common.conversion-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public gotoConversion(conversion: Conversion): void {\n        const closeHook = () => {\n            this.updateEvent.next()\n            this.notification.notifyEvent.next()\n        }\n        const modal = this.ngbModal.open(UserConversionFormComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        modal.componentInstance.item = conversion\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public newConversion(event: MouseEvent): void {\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n        const conversion: Partial<IConversion> = {\n            baseTransaction: {} as any,\n            user: this.user,\n        }\n        this.showForm(event, conversion as Conversion)\n    }\n\n    protected mapItem(item: any): Conversion {\n        return new Conversion(item)\n    }\n}\n","export default \"<div class=\\\"container pt-page pb-3\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.conversions' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\"><a [routerLink]=\\\"['/dashboard']\\\">Home</a></li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.conversions' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row justify-content-between align-items-center\\\">\\n        <div class=\\\"col\\\">\\n            <button\\n                type=\\\"button\\\"\\n                class=\\\"btn mr-2\\\"\\n                (click)=\\\"queryParams = getDefaultQuery(); searchEvent.next()\\\"\\n                [ngClass]=\\\"isActiveQuery(getDefaultQuery()) ? 'btn-primary' : 'btn-primary-air'\\\"\\n            >\\n                {{ 'common.all' | translate }}\\n            </button>\\n            <div class=\\\"btn-group mr-2\\\">\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['pending']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['pending'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.pending' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['offered']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['offered'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.offered' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['accepted']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['accepted'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.accepted' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n            <button class=\\\"btn btn-primary-air e2e-create-conversion-btn\\\" (click)=\\\"$event.preventDefault(); newConversion($event)\\\">\\n                <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-conversion' | translate }}\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container e2e-user-conversions\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">{{ 'common.conversions' | translate }}</div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">{{ 'common.subject' | translate }}</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">{{ 'common.from' | translate }}</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">To</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">{{ 'common.exchange-rate' | translate }}</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.expires-at' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['expiresAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['expiresAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['expiresAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/refresh.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.convert-your-currency' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">{{ 'common.need-to-convert' | translate }}</p>\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" (click)=\\\"newConversion($event)\\\">\\n                                            {{ 'common.create-conversion' | translate }}\\n                                        </button>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr\\n                                *ngFor=\\\"let conversion of itemsStream | async\\\"\\n                                class=\\\"clickable bg-white\\\"\\n                                (click)=\\\"$event.preventDefault(); gotoConversion(conversion)\\\"\\n                            >\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                        <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                            <svg\\n                                                class=\\\"img-avatar\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                xml:space=\\\"preserve\\\"\\n                                                text-rendering=\\\"geometricPrecision\\\"\\n                                                style=\\\"\\n                                                    shape-rendering: geometricPrecision;\\n                                                    image-rendering: optimizeQuality;\\n                                                    fill-rule: evenodd;\\n                                                    clip-rule: evenodd;\\n                                                \\\"\\n                                                viewBox=\\\"0 0 120 120\\\"\\n                                            >\\n                                                <g>\\n                                                    <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                    <text\\n                                                        font-weight=\\\"500\\\"\\n                                                        font-size=\\\"3.25em\\\"\\n                                                        font-family=\\\"sans-serif\\\"\\n                                                        fill=\\\"#ffffff\\\"\\n                                                        x=\\\"50%\\\"\\n                                                        y=\\\"50%\\\"\\n                                                        text-anchor=\\\"middle\\\"\\n                                                        dy=\\\"0.35em\\\"\\n                                                    >\\n                                                        {{ conversion.currency.code }}\\n                                                    </text>\\n                                                </g>\\n                                            </svg>\\n                                        </div>\\n                                        <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        <div>\\n                                            <div>{{ conversion.baseTransaction.currency.code }} to {{ conversion.currency.code }}</div>\\n                                            <div><uuid [value]=\\\"conversion.id\\\"></uuid></div>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"text-danger\\\" *ngIf=\\\"conversion.baseTransaction\\\">\\n                                        {{ conversion.baseTransaction.amount | amount: conversion.baseTransaction.currency.decimalPlaces }}\\n                                        {{ conversion.baseTransaction.currency.code }}</span\\n                                    >\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"conversion.counterTransaction; else pending\\\">\\n                                        <span class=\\\"text-green\\\" *ngIf=\\\"conversion.counterTransaction\\\"\\n                                            >{{\\n                                                conversion.counterTransaction.amount | amount: conversion.counterTransaction.currency.decimalPlaces\\n                                            }}\\n                                            {{ conversion.counterTransaction.currency.code }}</span\\n                                        >\\n                                    </ng-container>\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"conversion.counterTransaction; else pending\\\">\\n                                        <span class=\\\"text-primary\\\"\\n                                            >{{ conversion.exchangeRate | amount: conversion.currency.decimalPlaces }}\\n                                            {{ conversion.currency.code }}</span\\n                                        >\\n                                    </ng-container>\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        [ngbTooltip]=\\\"conversion.id\\\"\\n                                        class=\\\"text-capitalize label label-danger\\\"\\n                                        *ngIf=\\\"conversion.status === 'offered' && (conversion.expiresAt | isBefore); else showStatus\\\"\\n                                    >\\n                                        {{ 'common.expired' | translate }}\\n                                    </span>\\n                                    <ng-template #showStatus>\\n                                        <span\\n                                            placement=\\\"right\\\"\\n                                            [ngbTooltip]=\\\"conversion.id\\\"\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': conversion.status === 'accepted',\\n                                                'label-info': conversion.status === 'pending',\\n                                                'label-warning': conversion.status === 'offered',\\n                                                'label-danger': ['cancelled', 'declined'].includes(conversion.status)\\n                                            }\\\"\\n                                            >{{ conversion.status }}</span\\n                                        >\\n                                    </ng-template>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"conversion.expiresAt; else pending\\\">{{\\n                                        conversion.expiresAt | date: 'mediumDate'\\n                                    }}</ng-container>\\n                                </td>\\n                                <td>\\n                                    {{ conversion.createdAt | date: 'medium' }}\\n                                </td>\\n                                <td class=\\\"action\\\">\\n                                    <div\\n                                        ngbDropdown\\n                                        container=\\\"body\\\"\\n                                        placement=\\\"bottom-right\\\"\\n                                        #dropdown=\\\"ngbDropdown\\\"\\n                                        (click)=\\\"$event.stopPropagation()\\\"\\n                                        *ngIf=\\\"\\n                                            conversion.status === 'pending' || (conversion.status === 'offered' && !(conversion.expiresAt | isBefore))\\n                                        \\\"\\n                                    >\\n                                        <button class=\\\"btn btn-transparent\\\" type=\\\"button\\\" ngbDropdownToggle>\\n                                            <fa-icon [icon]=\\\"faEllipsisV\\\"></fa-icon>\\n                                        </button>\\n                                        <div class=\\\"dropdown-menu dropdown-menu-sm\\\" ngbDropdownMenu>\\n                                            <a\\n                                                class=\\\"e2e-accept-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"!conversionsChangingStatus.has(conversion.id) && accept(conversion); $event.preventDefault()\\\"\\n                                                *ngIf=\\\"conversion.status === 'offered'\\\"\\n                                                >Accept</a\\n                                            >\\n                                            <a\\n                                                class=\\\"e2e-decline-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"\\n                                                    !conversionsChangingStatus.has(conversion.id) && decline(conversion); $event.preventDefault()\\n                                                \\\"\\n                                                *ngIf=\\\"conversion.status === 'offered'\\\"\\n                                                >{{ 'common.decline' | translate }}</a\\n                                            >\\n                                            <a\\n                                                class=\\\"e2e-cancel-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"!conversionsChangingStatus.has(conversion.id) && cancel(conversion); $event.preventDefault()\\\"\\n                                                *ngIf=\\\"conversion.status === 'pending'\\\"\\n                                                >{{ 'common.cancel' | translate }}</a\\n                                            >\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                        >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                    >\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\\n<ng-template #pending><span class=\\\"text-muted\\\">...</span></ng-template>\\n\";","import { Injectable } from '@angular/core'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { SessionService, TokenScope } from '../services/session.service'\nimport { ConfirmPasswordModalComponent } from './confirm-password.modal'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SecurityCheckService {\n    constructor(private ngbModal: NgbModal, private session: SessionService) {}\n\n    /**\n     * Asks the user for permission to do something that requires a higher scope than basic\n     * Resolves if the check was successful or the permission is still granted from another request\n     * @param scope The required scope\n     */\n    public getScopePermission(scope: TokenScope): Observable<void> {\n        // Resolve if token has already the correct scope\n        if (this.session.hasTokenScope(scope)) {\n            return of(undefined)\n        }\n        const modal = this.ngbModal.open(ConfirmPasswordModalComponent, {\n            windowClass: 'modal-primary security-check-modal',\n        })\n        ;(modal.componentInstance as ConfirmPasswordModalComponent).scope = scope\n        return new Observable(observer => {\n            modal.result\n                .then(() => {\n                    observer.next()\n                    observer.complete()\n                })\n                .catch(() => {\n                    observer.complete()\n                })\n        })\n    }\n}\n","import { Component, Input } from '@angular/core'\nimport { Conversion } from 'src/app/common/models/accounting/conversion.model'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\n\n@Component({\n    selector: 'user-conversion-action',\n    templateUrl: 'user-conversion-action.component.html',\n})\nexport class UserConversionActionComponent extends PaymentConfirmationComponent {\n    @Input()\n    public action: 'accept' | 'decline'\n    @Input()\n    public conversion: Conversion\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../../common/logged-in.auth-guard'\nimport { UserConversionsComponent } from './user-conversions.component'\n\nconst routes: Routes = [\n    {\n        path: ':id',\n        component: UserConversionsComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n    {\n        path: '',\n        component: UserConversionsComponent,\n        canActivate: [LoggedInAuthGuard],\n        pathMatch: 'full',\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserConversionsRoutingModule {}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ (action === 'accept' ? 'common.accept' : 'accept.decline') | translate }} {{ 'common.offer' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-confirm-conversion\\\">\\n    <h5 class=\\\"text-center\\\">{{ 'common.you-are-about-to' | translate }} {{ action }} {{ 'common.the-offer' | translate }}:</h5>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.you-sell' | translate }}</div>\\n        <div class=\\\"col\\\">\\n            {{ conversion?.baseTransaction?.amount | amount: conversion?.baseTransaction?.currency?.decimalPlaces }}\\n            {{ conversion?.baseTransaction?.currency?.code }}\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.you-buy' | translate }}</div>\\n        <div class=\\\"col\\\">\\n            {{ conversion?.counterTransaction?.amount | amount: conversion?.counterTransaction?.currency?.decimalPlaces }}\\n            {{ conversion?.counterTransaction?.currency?.code }}\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.offer-expires-at' | translate }}</div>\\n        <div class=\\\"col\\\">{{ conversion?.expiresAt | date: 'medium' }}</div>\\n    </div>\\n    <br />\\n    <form class=\\\"form-validation\\\" #passwordForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\" novalidate>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"alert\\\">\\n            {{ alert }}\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"!showTwoFactorForm\\\">\\n            <div class=\\\"input-group input-group-lg\\\">\\n                <span class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\">\\n                        <fa-icon [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                    </span>\\n                </span>\\n                <input\\n                    type=\\\"password\\\"\\n                    class=\\\"form-control\\\"\\n                    name=\\\"password\\\"\\n                    [placeholder]=\\\"'common.enter-your-password' | translate\\\"\\n                    [(ngModel)]=\\\"password\\\"\\n                    [focus]=\\\"true\\\"\\n                    required\\n                />\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"showTwoFactorForm\\\">\\n            <div class=\\\"input-group input-group-lg\\\">\\n                <span class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\">\\n                        <fa-icon [icon]=\\\"faMobile\\\"></fa-icon>\\n                    </span>\\n                </span>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    name=\\\"twoFactorCode\\\"\\n                    [placeholder]=\\\"'common.enter-2fa-code' | translate\\\"\\n                    number\\n                    [(ngModel)]=\\\"twoFactorCode\\\"\\n                    [focus]=\\\"true\\\"\\n                    required\\n                />\\n            </div>\\n        </div>\\n        <button\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-lg btn-block btn-primary\\\"\\n            [ngClass]=\\\"{ loading: isLoading }\\\"\\n            [disabled]=\\\"!passwordForm.valid || isLoading\\\"\\n        >\\n            {{ 'common.confirm' | translate }}\\n        </button>\\n    </form>\\n</div>\\n\";"]}