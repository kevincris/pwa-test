{"version":3,"sources":["webpack:///src/app/user-trades/user-trades.component.ts","webpack:///src/app/user-trades/user-trades.module.ts","webpack:///src/app/user-trades/user-trades.component.html","webpack:///src/app/user-trades/user-trades-routing.module.ts"],"names":["UserTradesComponent","http","ngbModal","changeDetector","route","router","session","toastr","walletsQuery","faArrowAltToBottom","faArrowAltFromBottom","defaultLimit","limitOpts","faCircle","getCurrencyColor","symbolsMap","wallets$","filteredBalances$","apiUrl","user","id","symbol","parts","split","trade","price","times","quantity","toFixed","updateEvent","next","selector","template","UserTradesModule","declarations","imports","routes","path","component","canActivate","data","permissions","UserTradesRoutingModule","forChild","exports"],"mappings":"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","file":"user-trades-user-trades-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faArrowAltFromBottom, faArrowAltToBottom } from '@fortawesome/pro-light-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { Trade, TradeSymbol, Wallet } from '../common/api-interfaces'\nimport { ListV2Component } from '../common/list-v2.component'\nimport { SessionService } from '../common/services/session.service'\nimport { ToastrService } from '../common/services/toastr.service'\nimport { getCurrencyColor } from '../store/currencies/currencies.mixin'\nimport { WalletsQuery } from '../store/wallets/wallets.query'\n\n@Component({\n    selector: 'user-trades',\n    templateUrl: 'user-trades.component.html',\n})\nexport class UserTradesComponent extends ListV2Component<Trade> implements OnInit {\n    public wallets$: Observable<(Wallet & { value: string })[]>\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public defaultLimit = this.limitOpts[0]\n    public faCircle = faCircle\n    public getCurrencyColor = getCurrencyColor\n    public symbolsMap = {\n        'AU/USD': 'Gold Troy Ounce',\n        'AG/USD': 'Silver Troy Ounce',\n    }\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        protected toastr: ToastrService,\n        private walletsQuery: WalletsQuery\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session)\n        this.wallets$ = this.walletsQuery.filteredBalances$\n    }\n\n    public ngOnInit(): void {\n        this.apiUrl = `/users/${this.session.user.id}/trades`\n        super.ngOnInit()\n    }\n\n    public getBaseCurrency(symbol: TradeSymbol): string {\n        if (!symbol) {\n            return ''\n        }\n        const parts = symbol!.split('/')\n        return parts[1]\n    }\n\n    public getCounterCurrency(symbol: TradeSymbol): string {\n        if (!symbol) {\n            return ''\n        }\n        const parts = symbol!.split('/')\n        return parts[0]\n    }\n\n    public getTotal(trade: Trade): string {\n        return new BigNumber(trade.price).times(trade.quantity).toFixed(2)\n    }\n\n    public onTrade(): void {\n        this.updateEvent.next()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { TradesModule } from 'src/app/common/trades/trades.module'\nimport { DashboardModule } from 'src/app/dashboard/dashboard.module'\nimport { CommonModule } from '../common/common.module'\nimport { UserTradesRoutingModule } from './user-trades-routing.module'\nimport { UserTradesComponent } from './user-trades.component'\n\n@NgModule({\n    declarations: [UserTradesComponent],\n    imports: [CommonModule, IonicModule, UserTradesRoutingModule, DashboardModule, TradesModule],\n})\nexport class UserTradesModule {}\n","export default \"<div class=\\\"container pt-page pb-3\\\">\\n    <trade-feed></trade-feed>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-7\\\">\\n            <account-balance class=\\\"card\\\" [compact]=\\\"true\\\"></account-balance>\\n            <div class=\\\"card\\\">\\n                <div class=\\\"card-header\\\">{{ 'common.accumulator-status' | translate }}</div>\\n                <ul class=\\\"list-group list-group-flush\\\">\\n                    <li class=\\\"list-group-item py-3\\\">\\n                        <i>{{ 'common.coming-soon' | translate }}</i>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n        <div class=\\\"col-lg-10\\\">\\n            <section class=\\\"card\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"mb-0\\\">{{ 'common.buy' | translate }} &amp; {{ 'common.sell' | translate }}</h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <trade-form (onTrade)=\\\"onTrade()\\\"></trade-form>\\n                </div>\\n            </section>\\n            <div class=\\\"callout callout-danger\\\">\\n                <h6 class=\\\"text-danger\\\">{{ 'common.important-notice' | translate }}</h6>\\n                <p>\\n                    {{ 'common.every-transaction-is-denominated-in-troy-ounces' | translate }}\\n                </p>\\n                <p>{{ 'common.final-pricing-will-be-confirmed-upon-full-payment' | translate }}</p>\\n                <p>{{ 'common.we-operate-from-mondays-to-sundays' | translate }}</p>\\n                <p>\\n                    {{ 'common.due-to-global-markets-being-close-on-weekends' | translate }}\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"col-lg-7\\\">\\n            <div class=\\\"card\\\">\\n                <div class=\\\"card-header\\\">{{ 'common.history' | translate }}</div>\\n                <ul class=\\\"list-group list-group-flush\\\">\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <li class=\\\"list-group-item py-2\\\" *ngFor=\\\"let trade of items\\\">\\n                            <div class=\\\"d-flex justify-content-between\\\">\\n                                <span> {{ $any(symbolsMap)[trade.symbol] }}</span>\\n                                <span class=\\\"text-right\\\" [ngClass]=\\\"trade.side === 'BUY' ? 'text-primary' : 'text-danger'\\\">\\n                                    {{ trade.side === 'BUY' ? '+' : '-' }}{{ trade.quantity | amount: 7 }} {{ getCounterCurrency(trade.symbol) }}\\n                                </span>\\n                            </div>\\n                            <small class=\\\"d-flex justify-content-between\\\">\\n                                <span class=\\\"text-muted\\\">{{ trade.createdAt | date: 'short' }}</span>\\n                                <span class=\\\"text-muted text-right\\\">{{ getTotal(trade) | amount: 2 }} {{ getBaseCurrency(trade.symbol) }}</span>\\n                            </small>\\n                        </li>\\n                        <li class=\\\"list-group-item py-3 text-center text-muted\\\" *ngIf=\\\"items.length === 0\\\">\\n                            <i>{{ 'common.no-trades-found' | translate }}</i>\\n                        </li>\\n                    </ng-container>\\n                </ul>\\n            </div>\\n            <div class=\\\"d-flex justify-content-center mb-3\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"5\\\"\\n                    [ellipses]=\\\"false\\\"\\n                    [rotate]=\\\"true\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { PermissionGuard } from '../common/guards/permission.guard'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { UserTradesComponent } from './user-trades.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserTradesComponent,\n        canActivate: [LoggedInAuthGuard, PermissionGuard],\n        data: {\n            permissions: ['trades'],\n        },\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserTradesRoutingModule {}\n"]}